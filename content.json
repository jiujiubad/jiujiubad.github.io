{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"青蛙跳台阶的问题——Fibonacci","slug":"2011-10-11-fibonacci","date":"2019-03-18T10:41:22.636Z","updated":"2019-03-18T11:16:59.473Z","comments":true,"path":"posts/9ca9c8ca/","link":"","permalink":"http://yoursite.com/posts/9ca9c8ca/","excerpt":"","text":"这几天正在复习算法，今天在看一篇文章时偶然看到这个题目，想了一下居然没什么思路……（抱歉，实在太菜。)，文章中提示了一个关键词：Fibonacci 数列。然后我又小百度了一下，找了一个具体分析实例，结合两处，这才理清了思路。（汗啊……基础全忘光了，这以后咋办啊……深感担忧……) 问题描述一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶，请问这只青蛙跳上 n 级的台阶总共有多少种跳法？ 问题分析设青蛙跳上 n 级台阶的跳法为 f(n) 种。 设 Fibonacci 数列的第 x 项值为 fibo(x)。 当 n=1 时，f(n)=1=fibo(2) 当 n=2 时，f(n)=2=fibo(3) 当 n&gt;2 时，分析可知，在跳上第 n 级台阶前一步，必然是在第 (n-1) 或 (n-2) 级台阶，故有 f(n) = f(n-1) + f(n-2); 依此类推…… 则有： f(n)= f(n-1) + f(n-2)= 2f(n-2) + f(n-3)= 3f(n-3) + 2f(n-4)= 5 f(n-4) + 3f(n-5)= 8f(n-5) + 5f(n-6)= …= fibo(x+1)f(n-x)+fibo(x)f(n-(x+1))=…= fibo(n-1)f(n-(n-2)) + fibo(n-2)f(n-(n-1))= fibo(n-1)f(2) + fibo(n-2)f(1) f(n) 的规律符合 Fibonacci 数列的规律，它与 Fibonacci 的区别是 Fibonacci 的前两个元素是 1，1，而 f(n) 的规律是 1，2，即可知有 f(n)=fibo(n+1)。 简单的 C++ 实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;using namespace std;// 非递归写法int fibo(int n) // 获取 Fibonacci 数列的第 N 项值&#123; if(n == 1 || n == 2) return 1; else &#123; int a = 1; int b = 1; int tmp; for(int i = 3; i &lt;= n; ++ i) &#123; tmp = a; a = b; b += tmp; &#125; return b; &#125;&#125;//// 递归写法//int fibo(int n)//&#123;// if(n == 1 || n == 2)// return 1;// else// return fibo(n-1) + fibo(n-2);//&#125;int main()&#123; cout &lt;&lt; \"请输入楼梯的级数：\"; int n; cin &gt;&gt; n; int sum; //if(1==n) // sum = 1; //else if (2==n) // sum = 2; //else //&#123; // sum = 2 * fibo(n-1) + fibo(n-2); //&#125; sum = fibo(n+1); cout &lt;&lt; \"共有 \" &lt;&lt; sum &lt;&lt; \" 种跳法。\" &lt;&lt; endl; return 0;&#125;","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}],"tags":[],"keywords":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}]},{"title":"使用 VBA 将 Excel 数据导入到 Word 表格中","slug":"2011-05-25-export-data-from-excel-to-word-by-vba","date":"2019-03-18T10:41:22.635Z","updated":"2019-03-18T11:16:59.474Z","comments":true,"path":"posts/b8bb9cb/","link":"","permalink":"http://yoursite.com/posts/b8bb9cb/","excerpt":"","text":"需求现要求将一个 Excel 数据表中的每行数据导成一个 Word 文档，即有多少行数据就生成多少个 Word 文档，Excel 每列与 Word 文档中的表格项一一对应。 实现前置工作：将 Word 文档空表格当作模板文档做好，与 Excel 数据源文件置于同一路径下。 12345678910111213141516171819202122232425Sub 分离() Application.ScreenUpdating = False p = ThisWorkbook.Path &amp; \"/\" f = p &amp; \"空白模板.doc\" Dim myWS As Worksheet Set myWS = ThisWorkbook.Sheets(1) '存有数据的表格 For i = 3 To 54 '遍历数据行 FileCopy f, p &amp; \"test/\" &amp; myWS.Cells(i, 2).Text &amp; \".doc\" '复制空模板并以某列数据为名命名新产生的文档 Set wd = CreateObject(\"word.application\") Set d = wd.documents.Open(p &amp; \"test/\" &amp; myWS.Cells(i, 2).Text &amp; \".doc\") '打开新文档 d.tables(1).Cell(1, 2) = myWS.Cells(i, 2).Text '### '复制表格每列内容到文档，有多少项就有多少条 d.tables(1).Cell(5, 4) = myWS.Cells(i, 20).Text '### d.Close wd.Quit Set wd = Nothing Next Application.ScreenUpdating = TrueEnd Sub","categories":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/categories/Excel/"}],"tags":[],"keywords":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/categories/Excel/"}]},{"title":"用 VBA 将多个 Excel 文件里的数据汇总到一个 Excel 表","slug":"2011-05-25-gather-multi-excel-to-one-by-vba","date":"2019-03-18T10:41:22.635Z","updated":"2019-03-18T11:16:59.475Z","comments":true,"path":"posts/f3306ad0/","link":"","permalink":"http://yoursite.com/posts/f3306ad0/","excerpt":"","text":"需求给出一个空汇总表，和若干单独的 Excel 文件，每个文件里头有一个表格里存有一个人的信息，要将这些文件里的信息全部对应地导入到汇总表里。 以前写的，也不给实际例子了，直接上代码，逻辑不复杂，看看就明白。记在这里备以后查。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165Sub ExportMyFile() Dim myPath, myFileName Dim myCurOpenWB As Workbook 'work工作簿 Dim myCurOpenWS As Worksheet 'work工作表 Dim myTotalWS As Worksheet '汇总工作表 Dim myFolderName As String myFolderName = \"六堰\" Set myTotalWS = ThisWorkbook.Sheets(\"附件4\") '汇总到表名为附件4的表格里 myPath = ThisWorkbook.Path &amp; \"/\" &amp; myFolderName &amp; \"/*.xls\" myFileName = Dir(myPath) ''''''''''''''''''''''''''''''''''' 'Dim iCounter As Integer 'iCounter = 0 '遍历指定目录下的文件并操作 Do ''''''''''''''''''''''''''''''''''''' Debug.Print myFileName Dim searchStr As String '通用搜索字符串 Dim resStr As String '通用结果字符串 Dim iCount As Integer '通用计数器 myFileName = ThisWorkbook.Path &amp; \"/\" &amp; myFolderName &amp; \"/\" &amp; myFileName '打开指定目录里的一个*.xls文件 'Debug.Print myFileName Set myCurOpenWB = Workbooks.Open(myFileName) Set myCurOpenWS = myCurOpenWB.Sheets(\"附件1\") '打开文件的sheet附件1里是分条数据 '插入内容行 Dim iC As Integer For iC = 0 To 3 '插入内容行 myTotalWS.Rows(6).Insert myTotalWS.Rows(6).RowHeight = 14.25 myTotalWS.Range(\"B6:Q6\").NumberFormat = \"@\" '将它们的数字格式设置成文本 Next '##################################复制数据过程###################################### '序号 =Row()-5 myTotalWS.Range(\"A6\").Formula = \"=INT(Row()/4)\" '姓名 C4 myTotalWS.Range(\"B6\").Value = myCurOpenWS.Range(\"C4\").Value '性别 F4 myTotalWS.Range(\"C6\").Value = myCurOpenWS.Range(\"F4\").Value '出生年月 C6 myTotalWS.Range(\"D6\").Value = myCurOpenWS.Range(\"C6\").Value '身份证 D8 myTotalWS.Range(\"E6\").Value = myCurOpenWS.Range(\"D8\").Value '进厂劳动时间 B21-B25 myTotalWS.Range(\"F6\").Value = myCurOpenWS.Range(\"B21\").Value myTotalWS.Range(\"F7\").Value = myCurOpenWS.Range(\"B22\").Value myTotalWS.Range(\"F8\").Value = myCurOpenWS.Range(\"B23\").Value myTotalWS.Range(\"F9\").Value = myCurOpenWS.Range(\"B24\").Value '离岗时间 B21-B25 '劳动年限 I26 myTotalWS.Range(\"H6\").Value = myCurOpenWS.Range(\"I26\").Value '原用工单位 D21-D25 'myTotalWS.Range(\"I6\").Value = myFolderName myTotalWS.Range(\"I6\").Value = myCurOpenWS.Range(\"D21\").Value myTotalWS.Range(\"I7\").Value = myCurOpenWS.Range(\"D22\").Value myTotalWS.Range(\"I8\").Value = myCurOpenWS.Range(\"D23\").Value myTotalWS.Range(\"I9\").Value = myCurOpenWS.Range(\"D24\").Value '用工类别 D26 myTotalWS.Range(\"J6\").Value = \"家属工\" '已享受保障 B28-B30 searchStr = myCurOpenWS.Range(\"B28\").Value resStr = \"\" iCount = 0 If InStr(searchStr, \"√\") &lt;&gt; 0 Then resStr = resStr &amp; \"城市最低生活保障\" iCount = iCount + 1 End If searchStr = myCurOpenWS.Range(\"B29\").Value If InStr(searchStr, \"√\") &lt;&gt; 0 Then If iCount &lt;&gt; 0 Then resStr = resStr &amp; \"、\" End If resStr = resStr &amp; \"遗属生活困难补助\" iCount = iCount + 1 End If searchStr = myCurOpenWS.Range(\"B30\").Value If InStr(searchStr, \"√\") &lt;&gt; 0 Then If iCount &lt;&gt; 0 Then resStr = resStr &amp; \"、\" End If resStr = resStr &amp; \"供养亲属抚恤费\" End If myTotalWS.Range(\"K6\").Value = resStr '已参加社保 B32-B34 searchStr = myCurOpenWS.Range(\"B32\").Value resStr = \"\" iCount = 0 If InStr(searchStr, \"√\") &lt;&gt; 0 Then resStr = resStr &amp; \"企业职工养老保险\" iCount = iCount + 1 End If searchStr = myCurOpenWS.Range(\"B33\").Value If InStr(searchStr, \"√\") &lt;&gt; 0 Then If iCount &lt;&gt; 0 Then resStr = resStr &amp; \"、\" End If resStr = resStr &amp; \"灵活就业人员养老保险\" iCount = iCount + 1 End If searchStr = myCurOpenWS.Range(\"B34\").Value If InStr(searchStr, \"√\") &lt;&gt; 0 Then If iCount &lt;&gt; 0 Then resStr = resStr &amp; \"、\" End If resStr = resStr &amp; \"城镇居民医疗保险\" End If myTotalWS.Range(\"L6\").Value = resStr '配偶姓名 C10 myTotalWS.Range(\"M6\").Value = myCurOpenWS.Range(\"C10\").Value '配偶现所在单位 myTotalWS.Range(\"N6\").Value = \"重型车厂\" '配偶人员类别 C12 'myTotalWS.Range(\"O6\").Value = myCurOpenWS.Range(\"C12\").Value searchStr = myCurOpenWS.Range(\"C12\").Value If InStr(searchStr, \"√去世\") &lt;&gt; 0 Then myTotalWS.Range(\"O6\").Value = \"去世\" ElseIf InStr(searchStr, \"√离休\") &lt;&gt; 0 Then myTotalWS.Range(\"O6\").Value = \"离休\" ElseIf InStr(searchStr, \"√退休\") &lt;&gt; 0 Then myTotalWS.Range(\"O6\").Value = \"退休\" ElseIf InStr(searchStr, \"√退养\") &lt;&gt; 0 Then myTotalWS.Range(\"O6\").Value = \"退养\" Else myTotalWS.Range(\"O6\").Value = \"在职\" End If '备注 myTotalWS.Range(\"P6\").Value = myFolderName '联系电话 myTotalWS.Range(\"Q6\").Value = myCurOpenWS.Range(\"H18\").Value '################################复制数据过程结束############################# '关闭打开的文件 myCurOpenWB.Close myFileName = Dir '''''''''''''''''''''''''''''' ' iCounter = iCounter + 1 Loop Until myFileName = \"\" ''''''''''''''''''''''''''''' End Sub","categories":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/categories/Excel/"}],"tags":[],"keywords":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/categories/Excel/"}]},{"title":"Rubymine 入门 第一章","slug":"2014-11-11-rubymine入门","date":"2019-03-16T09:54:03.495Z","updated":"2019-03-18T11:16:59.476Z","comments":true,"path":"posts/7df240fc/","link":"","permalink":"http://yoursite.com/posts/7df240fc/","excerpt":"","text":"Rubymine 是一个 IDE 工具，主要针对 Ruby。 1.1 基本设置1.1.1 导出自己的 Rubymine 配置「文件 → 导出设置 → 类型全选、选择文件夹 → 确定」 1.1.2 快捷键方案「设置 → 快捷键：Mac OS X 10.5+」 1.1.3 字体 - 侧边栏「设置 → 外观 &amp; 行为 → 外观 → 勾选『使用自定义字体』、字体选择『Roboto Mono for Powerline』、大小9 → 确定」，https://jingyan.baidu.com/article/d3b74d64e005201f77e609ff.html 1.1.4 字体 - Terminal 终端「设置 → 编辑器 → 切换配色方案 → Console Font → 勾选『使用控制台字体代替』、字体选择『Roboto Mono for Powerline』、大小9 → 确定 → 重启才能生效」 1.1.5 .gitignore 的文件灰色显示「设置 → Plugins → 搜索『ignore』→ 安装 → 重启 Rubymine 」，然后「文件 → 关闭项目 → 重新打开项目生效」 1.1.6 显示内存使用多少「设置 → 外观 &amp; 行为 → 外观 → 窗口选项勾选『显示内存指示』，会在窗口右下角出现」 如何修改 Rubymine 内存分配：https://blog.csdn.net/qq_27093465/article/details/81947933 1.1.7 刷新当前窗口（暂不用）command + fn + F5，用于新建文件后，如果 Rubymine 没有新增文件，则手动刷新 注意：实测发现有时不灵，还不如新建文件后点击左侧目录栏，即可激活显示新增的文件 1.1.8 自动换行「设置 → 编辑器 → 常规 → 自动换行 → 勾选『在编辑窗口使用自动换行』『仅显示当前行的换行指示器』，反选『自动换行时显示原始的缩进』」 1.1.9 修改内存大小修改内存大小-使得idea运行更流畅：https://blog.csdn.net/qq_27093465/article/details/81947933「打开Finder → 应用程序 → 右键『Rubymine.app』 → 显示包内容 → 修改内存 Contents/bin/rubymine.vmoptions」1234-Xms1024m-Xmx2048m-XX:ReservedCodeCacheSize=1024m-XX:+UseCompressedOops 1.1.10 Markdown Css 自定义「设置 → 语言&amp;框架 → Markdown → Custom Css 勾选『Add Css Rules』」1234567891011121314151617181920212223242526body &#123; font-size: 13px; line-height: 1.6;&#125;h1 &#123; padding-bottom: .3em; font-size: 2.1em; margin-top: 0em; margin-bottom: 0.85em; line-height: 1.2; border-bottom: 1px solid #eee;&#125;h2 &#123; padding-bottom: .3em; font-size: 1.7em; margin-top: 1.275em; margin-bottom: 0.85em; line-height: 1.3; border-bottom: 1px solid #eee;&#125;h3 &#123; font-size: 1.3em; margin-top: 1.275em; margin-bottom: 0.85em; line-height: 1.43;&#125; 1.1.11 代码样式「设置 → 编辑器 → Code Style → 分别修改 Ruby 和 其他文件类型（Markdown）」，在设置界面的右侧有效果预览图，根据预览选择自己的喜好 1.2 快捷键自定义1.2.1 编辑器操作移动插入符号到行首：ctrl + a移动插入符号到行首：ctrl + e移动插入符号到行首并选择（删除光标左右侧的代码）：ctrl + option + a移动插入符号到行尾并选择（删除光标左右侧的代码）：ctrl + option + e移动插入符号到文本的开始处：command + ↑移动插入符号到文本的末尾处：command + ↓在上方克隆插入符号：option + command + ↑在下方克隆插入符号：option + command + ↓开始新行：command + 回车在当前位置之前开始新行：shift + command + 回车 1.2.2 主菜单导航 - 后退（是光标位置）：command + ←，返回到上一个操作的位置导航 - 向前（是光标位置）：command + →，返回到下一个操作的位置窗口 - 编辑器选项卡 - 选择上一个选项卡（Tab 标签左右切换）：option + command + ←窗口 - 编辑器选项卡 - 选择下一个选项卡（Tab 标签左右切换）：option + command + →编辑 - 查找 - 将下一个匹配项添加到选择：command + d编辑 - 查找 - 选择所有匹配项：command + fn + F2视图 - 最近的文件：command + pVCS - Git - 与同一个版本库比较：ctrl + option + command + b 1.2.3 工具窗口终端 - Terminal：ctrl + ` 1.3 快捷键补充1.3.1 Rubymine 自带 代码补全 Autocomplete（补全任何类、方法、变量） 代码语法检测 Linter：自带 Emmet 展开 html 代码（div.notice&gt;ul&gt;li*5）：自带 1.3.2 主菜单打开任何文件（最好用！搜索时巧用*代表任意文字）：双击 shift 比如，搜索 app/views/orders/new.html.erb 页面，只需搜索 vi*or*new （搜索后选中所有搜索到的词）：command + f 然后 option + 回车替换 - 当前文件：command + r替换 - 全局：command + shift + r重命名：command + fn + F6 1.3.3 编辑器操作缩进、反缩进：tab，shfit + tab，因为 Rubymine 有自动格式化所以不太需要。插入代码片段 snippet（html、js等）：command + J格式化 Beautify：command + option + L，部分缩进不规范（特别是 html 页）但总体 ok注释：command + /，或 shift + command + /整行代码 - 复制：command + c整行代码 - 删除：command + x整行代码 - 上下移动（有时失灵，光标最好放在行首尾再操作）：shift + command + 上/下饥饿退格：shift + command + 退格delete展开或收缩 - 代码 ：command + + 和 command + -展开或收缩 - 全部代码：shift + command + + 和 shift + command + - 1.4 Ruby China 解答常见问题 Rubymine 优点总结：跳转（读源码好工具），Debug，代码补全，能连接数据库， 1.4.1 Vim 比 Rubymine 高端？flowerwrong-2015：完全是个人喜好，用了 N 年 Vim 又怎样，我认识一哥们 N 年后换了 Sublime。我系统装了 Atom、Vim、 Sublime、 Rubymine，每次第一个出现在脑海的名字就打开。 1.4.2 怎么学习 Rails 源码？jasl-2018：用 RubyMine 干活，心情好的时候按住 command 点一下方法名，就跳进 Rails 源码了，顺着翻就行了 1.4.3 Sublime、Vim、Rubymine（IDE），到底用哪个？jasl-2018：IDE 的智能感知的实现原理和编辑器不一样，相比来说 IDE 的准确率更高一些。不用纠结，用惯了干活都一样，到时候见招拆招就行了 Rei-2011：喜欢用什么就用什么，只要代码规范简洁易读。用什么都好，一定要把自己的工具用到滚瓜烂熟。 xautjzd-2013：不喜欢折腾就 Rubymine，喜欢折腾建议 Vim railsboy-2017：之前一直用 vim，新公司用的 RubyMine，用挺方便的，就不用 vim，咋舒服咋来 guyanbiao-2017：Rubymine 的 vim 模式是最好的 1.4.4 Rubymine 的代码格式化对齐问题？jasl-2017：https://ruby-china.org/topics/34139，要去配的… 我记得 Rubymine 默认 &lt;% 不算缩进 1.4.5 2018 RubyMine 加强了对 I18n 的支持https://ruby-china.org/topics/37573 1.4.6 为什么 before_action 没有智能提示？zhufenggood-2017：https://github.com/rails/rails/blob/master/actionpack/lib/abstract_controller/callbacks.rb#L186&gt; 这几个 callback 方法是元编程出来的，RubyMine 对 dynamic 出来的代码智能提示一般。jasl-2017：试试刚发布的2017.3 1.4.7 Rubymine 的块注释会标黄线报警怎么解决？jasl-2017：可以关 inspection 的，另外如果你项目配置了 rubocop，RubyMine 会自动使用 rubocop 的配置，其实相比编辑器要方便的多的。mingyuan0715-2017：头下角头像 - Configure inspections - 搜索 reference - 反选 Ruby 下的 Unresolved Ruby reference 1.4.8 我 rubocop 总是找不到路径，必须在项目目录下 mine . 才好使，atom 也是这样，求大哥给支个招，我用的 rvm？jasl-2017：在rubymine的设置里 有个选择ruby sdk的 选和你rvm的一致就可以了","categories":[{"name":"IDE 工具","slug":"IDE-工具","permalink":"http://yoursite.com/categories/IDE-工具/"}],"tags":[],"keywords":[{"name":"IDE 工具","slug":"IDE-工具","permalink":"http://yoursite.com/categories/IDE-工具/"}]}]}