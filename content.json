{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"hello-world","slug":"hello-world","date":"2018-01-11T14:30:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/b1d4025b/","link":"","permalink":"http://yoursite.com/posts/b1d4025b/","excerpt":"","text":"9999Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/categories/hello/"},{"name":"world","slug":"hello/world","permalink":"http://yoursite.com/categories/hello/world/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://yoursite.com/tags/测试/"}],"keywords":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/categories/hello/"},{"name":"world","slug":"hello/world","permalink":"http://yoursite.com/categories/hello/world/"}]},{"title":"VSCode 高效开发必装插件视频教程","slug":"vscode","date":"2017-09-22T01:00:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/dcf198d6/","link":"","permalink":"http://yoursite.com/posts/dcf198d6/","excerpt":"\u0016 此课程为 VSCode 编辑器系列课程。VSCode 强大的插件库使得其在提升开发效率方面更加的无敌，系列课程给大家分享了必装插件的安装、配置与使用技巧相关的知识。","text":"\u0016 此课程为 VSCode 编辑器系列课程。VSCode 强大的插件库使得其在提升开发效率方面更加的无敌，系列课程给大家分享了必装插件的安装、配置与使用技巧相关的知识。 课程持续更新中，目前更新章节如下： 001 - 课程简介 002 - 如何让你的文件类型一目了然 003 - 如何更加高效地管理项目 004 - 自动格式化你的代码 005 - 如何一键搭建各类语言的学习测试环境 006 - 如何和 Chrome 联动调试 007 - 如何实时自动检测你的代码规范与代码中的错误 008 - 如何提升 React 等前端开发的效率 009 - 如何集成并美化你的终端到 VSCode 中 010 - Visual Studio 重度使用者如何迁移到 VSCode 课程地址: https://devopen.club/course/vscode","categories":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"VSCode","slug":"VSCode","permalink":"http://yoursite.com/tags/VSCode/"}],"keywords":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}]},{"title":"Webpack 2 视频教程 020 - Webpack 2 中的 HMR ( Hot Module Replacement )","slug":"webpack2-tech-020","date":"2017-05-23T11:00:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/d9c8ff45/","link":"","permalink":"http://yoursite.com/posts/d9c8ff45/","excerpt":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。源码中包含了课程中的思维导图源文件，使用的思维导图软件为 Mac 下的 iThoughtsX 。 课程地址: https://devopen.club/course/webpack2.html","text":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。源码中包含了课程中的思维导图源文件，使用的思维导图软件为 Mac 下的 iThoughtsX 。 课程地址: https://devopen.club/course/webpack2.html Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过loader的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。 1. 视频课程简介此节课程主要对Webpack 2 中的 HMR ( Hot Module Replacement )进行了详细地讲解。 课程地址: https://devopen.club/course/webpack2.html 2. 课程源码地址https://github.com/ParryQiu/DevOpenClub-Tech-Webpack2 3. 视频课程地址 Webpack 2 前端开发教程 bilibili 完整播单 https://www.bilibili.com/video/av11128844/ Webpack 2 前端开发教程 Youtube 完整播单 https://www.youtube.com/playlist?list=PLXbU-2B80FvDu2YTKN42WvAVKWHs6XHRy Webpack 2 前端开发教程优酷完整播单 (因优酷审核太垃圾，不再更新到优酷。) http://list.youku.com/albumlist/show?id=49394464&amp;ascending=1&amp;page=1 如果需要 1080P 的视频，第一时间获取到后续的更新，以及对于相关前端技术的高质量讨论与提问，可以加入我们的「DevOpenClub 前端小密圈」进行相关交流。 课程已全部更新完毕，撒花~~~稍后会根据小密圈问题以及官方发布 Webpack 3 后进行适当地更新。关于课程的任何问题，都可以在我们的高质量前端开发小密圈中提问或交流。课程更新及高质量讨论小密圈地址：https://devopen.club/course/webpack2.html 4. 高质量前端开发小密圈DevOpenClub 一直致力于免费分享高质量的软件开发的相关视频教程，在每一门技术的学习交流过程中都和大家形成了一个非常明确的讨论圈。之前一直都是 QQ 群、微信群进行讨论，刚好最近「小密圈」流行，而且「小密圈」很好地解决了群交流的很多缺点。 有价值的信息不能沉淀的问题，有了小密圈，分享的东西都可以沉淀下来，和论坛一样随时可以翻看； 可以直接进行提问获得解答； 随时可以过滤掉垃圾信息，而且不受群垃圾消息的轰炸； 付费永远都是过滤垃圾信息最好的办法。 此小密圈功能 每日分享高质量的国外技术开发头条信息与资源； 获取每年所有原创开发视频教程的第一手更新； 获取百度云中分享的超清视频课程以及源码等相关资料； 获取其他高质量软件开发行业新闻、技术文章、教学视频分享； 第一时间获取视频更新提醒及观看密码； 遇到相关技术问题可以进行快速提问以及讨论交流； 群中认识更多的朋友以及合作开发项目的机会； 认识更多的行业朋友，或者交流自己的创业小项目。 如何加入使用微信识别下面的二维码（或点击下面的链接）即可加入，价格是小密圈能设置的最低价格，随着人数的增多会进行价格上调。加入后永久有效。 扫码或点击此链接加入点击此链接加入小密圈","categories":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/tags/Webpack/"}],"keywords":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}]},{"title":"Webpack 2 视频教程 018 - 使用可视化图表进行统计分析打包过程","slug":"webpack2-tech-018","date":"2017-05-21T11:00:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/bd14a45/","link":"","permalink":"http://yoursite.com/posts/bd14a45/","excerpt":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。源码中包含了课程中的思维导图源文件，使用的思维导图软件为 Mac 下的 iThoughtsX 。 课程地址: https://devopen.club/course/webpack2.html","text":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。源码中包含了课程中的思维导图源文件，使用的思维导图软件为 Mac 下的 iThoughtsX 。 课程地址: https://devopen.club/course/webpack2.html Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过loader的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。 1. 视频课程简介此节课程主要对使用可视化图表进行统计分析打包过程进行了详细地讲解。 课程地址: https://devopen.club/course/webpack2.html 2. 课程源码地址https://github.com/ParryQiu/DevOpenClub-Tech-Webpack2 3. 视频课程地址 Webpack 2 前端开发教程 bilibili 完整播单 https://www.bilibili.com/video/av11128844/ Webpack 2 前端开发教程 Youtube 完整播单 https://www.youtube.com/playlist?list=PLXbU-2B80FvDu2YTKN42WvAVKWHs6XHRy Webpack 2 前端开发教程优酷完整播单 (因优酷审核太垃圾，不再更新到优酷。) http://list.youku.com/albumlist/show?id=49394464&amp;ascending=1&amp;page=1 如果需要 1080P 的视频，第一时间获取到后续的更新，以及对于相关前端技术的高质量讨论与提问，可以加入我们的「DevOpenClub 前端小密圈」进行相关交流。 课程已全部更新完毕，撒花~~~稍后会根据小密圈问题以及官方发布 Webpack 3 后进行适当地更新。关于课程的任何问题，都可以在我们的高质量前端开发小密圈中提问或交流。课程更新及高质量讨论小密圈地址：https://devopen.club/course/webpack2.html 4. 高质量前端开发小密圈DevOpenClub 一直致力于免费分享高质量的软件开发的相关视频教程，在每一门技术的学习交流过程中都和大家形成了一个非常明确的讨论圈。之前一直都是 QQ 群、微信群进行讨论，刚好最近「小密圈」流行，而且「小密圈」很好地解决了群交流的很多缺点。 有价值的信息不能沉淀的问题，有了小密圈，分享的东西都可以沉淀下来，和论坛一样随时可以翻看； 可以直接进行提问获得解答； 随时可以过滤掉垃圾信息，而且不受群垃圾消息的轰炸； 付费永远都是过滤垃圾信息最好的办法。 此小密圈功能 每日分享高质量的国外技术开发头条信息与资源； 获取每年所有原创开发视频教程的第一手更新； 获取百度云中分享的超清视频课程以及源码等相关资料； 获取其他高质量软件开发行业新闻、技术文章、教学视频分享； 第一时间获取视频更新提醒及观看密码； 遇到相关技术问题可以进行快速提问以及讨论交流； 群中认识更多的朋友以及合作开发项目的机会； 认识更多的行业朋友，或者交流自己的创业小项目。 如何加入使用微信识别下面的二维码（或点击下面的链接）即可加入，价格是小密圈能设置的最低价格，随着人数的增多会进行价格上调。加入后永久有效。 扫码或点击此链接加入点击此链接加入小密圈","categories":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/tags/Webpack/"}],"keywords":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}]},{"title":"Webpack 2 视频教程 012 - 理解Webpack 中的 CSS 作用域与 CSS Modules","slug":"webpack2-tech-012","date":"2017-05-15T11:00:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/64d60628/","link":"","permalink":"http://yoursite.com/posts/64d60628/","excerpt":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。","text":"这是我免费发布的高质量超清「Webpack 2 视频教程」。Webpack 作为目前前端开发必备的框架，Webpack 发布了 2.0 版本，此视频就是基于 2.0 的版本讲解的。这个基本就是目前国内最好的 Webpack 2.0 最好的学习视频了，希望可以对新手或者复习相关知识的朋友有用。 Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过loader的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。 1. 视频课程简介此节课程主要对 Webpack 2 中 CSS 作用域与 CSS Modules进行了详细地讲解。 2. 课程源码地址https://github.com/ParryQiu/DevOpenClub-Tech-Webpack2 3. 视频课程地址优酷超清视频：http://v.youku.com/v_show/id_XMjc0Nzg2NzcxNg==.html 如果需要 1080P 的视频，第一时间获取到后续的更新，以及对于相关前端技术的高质量讨论与提问，可以加入我们的「DevOpenClub 前端小密圈」进行相关交流。 4. 高质量前端开发小密圈DevOpenClub 一直致力于免费分享高质量的软件开发的相关视频教程，在每一门技术的学习交流过程中都和大家形成了一个非常明确的讨论圈。之前一直都是 QQ 群、微信群进行讨论，刚好最近「小密圈」流行，而且「小密圈」很好地解决了群交流的很多缺点。 有价值的信息不能沉淀的问题，有了小密圈，分享的东西都可以沉淀下来，和论坛一样随时可以翻看； 可以直接进行提问获得解答； 随时可以过滤掉垃圾信息，而且不受群垃圾消息的轰炸； 付费永远都是过滤垃圾信息最好的办法。 此小密圈功能 每日分享高质量的国外技术开发头条信息与资源； 获取每年所有原创开发视频教程的第一手更新； 获取百度云中分享的超清视频课程以及源码等相关资料； 获取其他高质量软件开发行业新闻、技术文章、教学视频分享； 第一时间获取视频更新提醒及观看密码； 遇到相关技术问题可以进行快速提问以及讨论交流； 群中认识更多的朋友以及合作开发项目的机会； 认识更多的行业朋友，或者交流自己的创业小项目。 如何加入使用微信识别下面的二维码（或点击下面的链接）即可加入，价格是小密圈能设置的最低价格，随着人数的增多会进行价格上调。加入后永久有效。 扫码或点击此链接加入点击此链接加入小密圈","categories":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/tags/Webpack/"}],"keywords":[{"name":"Webpack","slug":"Webpack","permalink":"http://yoursite.com/categories/Webpack/"}]},{"title":"【项目】购物网","slug":"【项目】购物网","date":"2017-01-11T16:10:00.000Z","updated":"2018-01-12T03:27:09.000Z","comments":true,"path":"posts/e192d747/","link":"","permalink":"http://yoursite.com/posts/e192d747/","excerpt":"","text":"atom设置快捷键lt、ltp、ltd表示，&lt;%= link_to(“XXXX”, XXXX_path, class:”btn btn-danger btn-lg pull-right”, method: :post) %&gt; tb表示，table.table.table-bordered&gt;(thead&gt;tr&gt;th3)+(tbody&gt;tr&gt;td3) sf表示，&lt;%= simple_form_for @xx do |f| %&gt;&lt;% end %&gt; 记住：controller中定义action都是按照find_and_do的思路。一再遇到的 bug1、gem ‘carrierwave’加上gem ‘mini_magick’后，上传图片的时候报错上传不了。 解决办法：更新brew upgrade imagemagick，然后bundle 2、cart.add_product_to_cart(product)在rails c测试时，product = Product.last把小写的product写成大写，折腾半天。 3、current_cart的定义，@current_cart ||= find_cart错写成@current_cart || find_cart，另外if cart.blank?错写成if current_cart.blank? 4、6-1第四题，update会报错，是因为simple_form_for里要指明url，系统才能知道我们具体要删除哪一个cart_item，因为这里不是show页面。 5、8-1checkout结算页在chrome浏览器里刷新，会跳出缺少order的show action的bug。换个浏览器就好了。 6、最常出现No route matches {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;admin/resumes&quot;} missing required keys: [:job_id]。原因如下： 1、Model层，model里没有做关联 2、Controller层，model关联后，所有外键（比如简历resume里有user_id、job_id）要在controlller的create的action里给一个表达式，指明这份简历具体属于哪一个用户、具体属于哪一个职位的。比如 123456app/controllers/resumes_controller.rb def create @job = Job.find(params[:job_id]) @resume.job = @job @resume.user = current_user end 3、Views层，路径没有给参数，比如admin_job_resumes_path(@job)里的@job 一、简单版4、后台4.1、基础建设4.1.1 fork、或新建专案 https://github.com/quanzhanying/jdstore 4.1.2 gem ‘bootstrap-sass’ css html flashes+js app/views/common/_flashes.html.erb 12345678&lt;% if flash.any? %&gt; &lt;% user_facing_flashes.each do |key, value| %&gt; &lt;div class=&quot;alert alert-dismissable alert-&lt;%= flash_class(key) %&gt;&quot;&gt; &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt; &lt;%= value %&gt; &lt;/div&gt; &lt;% end %&gt;&lt;% end %&gt; app/helpers/flashes_helper.rb 1234567891011module FlashesHelper FLASH_CLASSES = &#123; alert: &quot;danger&quot;, notice: &quot;success&quot;, warning: &quot;warning&quot;&#125;.freeze def flash_class(key) FLASH_CLASSES.fetch key.to_sym, key end def user_facing_flashes flash.to_hash.slice &quot;alert&quot;, &quot;notice&quot;,&quot;warning&quot; endend 4.1.3 gem ‘devise’ 注册、登录、退出 4.1.4 gem ‘simple_form’ 4.1.5 gem ‘font-awesome-rails’ 4.2、上架后台CRUD 使用者必须要是 admin 才能登入 http://localhost:3000/admin/products 商品栏位必须要有 title, description, quantity, price admin 后台 products 完整的 CRUD 4.3、admin 可以登录后台 管理者（商家）必须先登录网站才能进入（商店）后台 管理者必须有 admin 权限才能进入后台 后台用layout ‘admin’自定义页面样式 4.4、上传图片 可以上传图片、且是剪切过的图片（gem ‘carrierwave’、gem ‘mini_magick’） 图片文件夹加入.gitignore中 设定 localhost:3000 为商品首页 商品index、show展示 重构后台各个views，加入图片 5、购物车实做5.2 Step 1 : 建立加入购物车的 action 先做按钮和flashes 5.3 Step 2: 购物车设计 Part 1 cart、cart_item、product 实作add_product_to_cart(@product) rails c 下测试功能 5.4 Step 3: 购物车设计 Part 2 显示购物车内物品数量 实作current_cart rails c下测试功能 5.5 Step 4 : 显示购物车明细 carts的index 5.6 Step 5 : 计算总价 先在views里做，测试ok后重构到helper和model中 6、购物车实做（解答）6.1 购物车练习作业 （解答） 请设计一个功能，可以一键清空购物车内所有的商品 某商品突然不想买了，我可以在购物车内删除它 已经加入购物车的商品，不能重复被加入 可以更改购物车内购买的商品数量(原本预设数量都是1) 库存为 0 的商品不能购买 在购物车新增数量时，不能更新超过原有库存的商品数量 8、订单实做8.1 Step 1 : 建立结帐页 按下「确认结帐」按钮后，可以显示结帐明细order页，并且可以让消费者输入寄送地址 8.2 Step 2 : 建立购买明细 有时候商品会下架、价格会变，新建product_list的model 订单create时的购买明细缓存 购买明细show页面 8.3 Step 3 : 将网址改为秘密 token 9、订单实做（解答）9.1 订单练习作业（解答） 使用者可以在 /account/orders/ 看到过去所有订单 使用者在下拉式选单可以看到过去所有的订单 订单排序 10、支付订单与寄信10.1 Step 1 : 消费者可以针对订单付款 使用 is_paid（boolean 属性）判断是否已付费 使用 payment_method 判断，实际付款渠道为：微信、支付宝 已付款过的订单不可以再付 10.2 Step 2 : 寄送订单确认通知信 使用者在下单后会收到一封订单确认信，rails g mailer OrderMailer gem ‘letter_opener’，并在console下测试信件预览 在订单建立时寄通知信 11、后台出货订单操作11.1 情境和 Model 准备效果：「有限状态机」这个架构去做后台订单切换状态。 已下订（order_placed） 已付款（paid） 卖家发货中（shipping） 已交货（shipped） 取消订单（order_cancelled） 退货（good_returned） 11.2 订单状态切换 建立 admin/orders 可以看到系统内所有订单 admin 的 order 列表应要能显示订单状态 使用者可以“申请取消订单” 使用者“申请取消订单”后，管理员应该要收到“申请通知信” 后台管理员可以“取消订单”、“出货” 后台管理“出货”后，系统应该寄出通知信 后台管理员“取消订单”后，系统应该寄出通知信 12、部署到 Heroku （七牛云）12.1 本章学习指南12.2 一些安全概念 (本节只需要看，不需要实作)12.3 使用七牛云（用来存储图片）12.4 使用 Figaro 管理密码12.5 将JDStore部署到Heroku12.6 JDStore 商店创意大赛（第二季）参赛指南12.7 使用SendCloud服务发送邮件12.8 Rails 环境架构12.9 如何在 Heroku 上 Debug13-部署到 Heroku (海外用户方案)13.1 本章部属指南13.2 申请AWS S3（用来储存图片）13.3 使用 Figaro 管理密码13.4 将JDStore部署到Heroku13.5 泄漏 S3 密钥的处理方式二、提示版4、后台4.1、基础建设4.1.1 fork、或新建专案 方法一：for专案网址 https://github.com/quanzhanying/jdstore 1234567git clone https://github.com/quanzhanying/jdstore.git rails/jdstore004cd rails/jdstore004cp config/database.yml.example config/database.ymlbundle checkbundle installgit checkout -b testrails s 方法二：新建专案 123rails new rails/jdstore1201git initrails s 4.1.2 gem ‘bootstrap-sass’ css mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss 1234app/assets/stylesheets/application.scss@import &quot;bootstrap-sprockets&quot;;@import &quot;bootstrap&quot;; html rails g controller welcome，新建index并设置为首页 footer 1234567&lt;footer class=&quot;container&quot; style=&quot;margin-top: 100px;&quot;&gt; &lt;p class=&quot;text-center&quot;&gt; Copyright ©2017 JDStore &lt;br&gt; Design by yourname &lt;/p&gt;&lt;/footer&gt; 增加_navbar.html.erb、_footer.html.erb、_flashes.htm.erb，设置全局html 12345678910app/views/layouts/application.html.erb &lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;%= render &quot;common/navbar&quot; %&gt; &lt;%= render &quot;common/flashes&quot; %&gt; &lt;%= yield %&gt; &lt;/div&gt; &lt;%= render &quot;common/footer&quot; %&gt; &lt;/body&gt; flashes+js js加入//= require bootstrap/alert app/views/common/_flashes.html.erb 12345678&lt;% if flash.any? %&gt; &lt;% user_facing_flashes.each do |key, value| %&gt; &lt;div class=&quot;alert alert-dismissable alert-&lt;%= flash_class(key) %&gt;&quot;&gt; &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt; &lt;%= value %&gt; &lt;/div&gt; &lt;% end %&gt;&lt;% end %&gt; app/helpers/flashes_helper.rb 1234567891011module FlashesHelper FLASH_CLASSES = &#123; alert: &quot;danger&quot;, notice: &quot;success&quot;, warning: &quot;warning&quot;&#125;.freeze def flash_class(key) FLASH_CLASSES.fetch key.to_sym, key end def user_facing_flashes flash.to_hash.slice &quot;alert&quot;, &quot;notice&quot;,&quot;warning&quot; endend 在welcome的index测试flashes 4.1.3 gem ‘devise’ 安装devise 1234gem &apos;devise&apos;rails g devise:installrails g devise userrake db:migrate 注册、登录、退出 12345678910111213141516app/views/common/_navbar.html.erb- &lt;li&gt; &lt;%= link_to(&quot;登入&quot;, &apos;#&apos;) %&gt; &lt;/li&gt;+ &lt;% if !current_user %&gt;+ &lt;li&gt;&lt;%= link_to(&quot;注册&quot;, new_user_registration_path) %&gt; &lt;/li&gt;+ &lt;li&gt;&lt;%= link_to(&quot;登入&quot;, new_user_session_path) %&gt;&lt;/li&gt;+ &lt;% else %&gt;+ &lt;li class=&quot;dropdown&quot;&gt;+ &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;+ Hi!, &lt;%= current_user.email %&gt;+ &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;+ &lt;/a&gt;+ &lt;ul class=&quot;dropdown-menu&quot;&gt;+ &lt;li&gt; &lt;%= link_to(&quot;登出&quot;, destroy_user_session_path, method: :delete) %&gt; &lt;/li&gt;+ &lt;/ul&gt;+ &lt;/li&gt;+ &lt;% end %&gt; js加入//= require bootstrap/dropdown 4.1.4 gem ‘simple_form’ 12gem &apos;simple_form&apos;rails generate simple_form:install --bootstrap 4.1.5 gem ‘font-awesome-rails’ 1gem &apos;font-awesome-rails&apos; 1@import &quot;font-awesome&quot;; 123&lt;%= link_to(content_tag(:i, &apos;登入&apos;, class: &apos;fa fa-sign-in&apos;), new_user_session_path) %&gt;&lt;%= link_to(content_tag(:i, &apos;登出&apos;, class: &apos;fa fa-sign-out&apos;), destroy_user_session_path, method: :delete) %&gt; 4.2、上架后台CRUD 使用者必须要是 admin 才能登入 http://localhost:3000/admin/products 商品栏位必须要有 title, description, quantity, price admin 后台 products 完整的 CRUD 1、R：admin::products 2、M：想到views里会用到栏位title/description/quantity/price ​ 3、C：new和create 4、V：new页面，最简单的就好 ​ 5、C：index 6、V：index页面，最简单一个栏位就好 ​ 7、C：edit和update，顺便把destroy加上 8、V：edite页面 4.3、admin 可以登录后台 管理者（商家）必须先登录网站才能进入（商店）后台 管理者必须有 admin 权限才能进入后台 后台用layout ‘admin’自定义页面样式 1、before_action :authenticate_user!、before_action :admin_required 2、C：def admin_required 3、M：def admin? 4、栏位：add_is_admin_to_user，boolean 5、 12345678910db/seeds.rbu = User.newu.email = &quot;admin@test.com&quot; # 可以改成自己的 emailu.password = &quot;111111&quot; # 最少要六码u.password_confirmation = &quot;111111&quot; # 最少要六码u.is_admin = trueu.save ​ 6、C：layout “admin” 7、V：app/views/layouts/admin.html.erb 4.4、上传图片 可以上传图片、且是剪切过的图片（gem ‘carrierwave’、gem ‘mini_magick’） 图片文件夹加入.gitignore中 设定 localhost:3000 为商品首页 商品index、show展示 重构后台各个views，加入图片 1、 12gem &apos;carrierwave&apos;gem &apos;mini_magick&apos; rails g uploader image 2、栏位：add_image_to_product 3、 1234app/models/product.rbclass Product &lt; ApplicationRecord+ mount_uploader :image, ImageUploaderend 4、 12345678910include CarrierWave::MiniMagick+ process resize_to_fit: [800, 800]+ version :thumb do+ process resize_to_fill: [200,200]+ end+ version :medium do+ process resize_to_fill: [400,400]+ end 5、C：params中加入image栏位 6、V：new表单加入上传图片&lt;%= f.input :image, as: :file %&gt; 7、V：edit表单加入现有图片&lt;% if @product.image.present? %&gt;，以及上传图片&lt;%= image_tag(@product.image.thumb.url) %&gt; 8、public/uploads加入.gitignore ​ 9、C：product的index 10、V：index页面，并修改首页路径。页面显示图片、标题、价格，当没有图片是用http://placehold.it/200x200&amp;text=No Pic ​ 11、C：show 12、V：show页面&lt;%= image_tag(@product.image.medium.url) %&gt;，当没有图片是用http://placehold.it/400x400&amp;text=No Pic ​ 13、前后台navbar加入product 14、美化后台product的index页面如下： 5、购物车实做5.2 Step 1 : 建立加入购物车的 action 先做按钮和flashes 1、R：路由add_to_cart 2、V：按钮及路径 3、C：先做find_and_do的find，直接返回redirect_to :back 5.3 Step 2: 购物车设计 Part 1 cart、cart_item、product 实作add_product_to_cart(@product) rails c 下测试功能 效果：current_cart.add_product_to_cart(@product) 1、M：新增cart和cart_item，并设置两者的关联 2、栏位：cart_item加入cart_id、product_id、quantity, default: 1 3、M：cart中定义add_product_to_cart(product) 123456+ def add_product_to_cart(product)+ ci = cart_items.build+ ci.product = product+ ci.quantity = 1+ ci.save+ end 4、rails c中测试可否执行add_product_to_cart(product)，如下： 12345Cart.createcart = Cart.firstcart.add_product_to_cart(product)cart.cart_itemsexit 5.4 Step 3: 购物车设计 Part 2 显示购物车内物品数量 实作current_cart rails c下测试功能 效果：我们的目的是为了每个进店的客户（不管是否有登入，都准备一台购物车）。然后消费者随时可以察看购物车的产品数量。 1、V：显示车的icon，显示车的数量&lt;%= current_cart.products.count %&gt; 2、C：定义current_cart 123456789101112131415161718app/controllers/application_controller.rb+ helper_method :current_cart+ def current_cart+ @current_cart ||= find_cart+ end+ private+ def find_cart+ cart = Cart.find_by(id: session[:cart_id])+ if cart.blank?+ cart = Cart.create+ end+ session[:cart_id] = cart.id+ return cart+ endend 3、C：补齐add_to_cart的定义，即current_cart.add_product_to_cart(@product) 5.5 Step 4 : 显示购物车明细 carts的index 1、R：路由加入carts 2、V：navbar的购物车按钮及链接 3、V：index页面 注意：为什么这里不用在controller里定义index？？——因为没有用到@carts，不用拿它来做@carts.each do |cart|。 5.6 Step 5 : 计算总价 先在views里做，测试ok后重构到helper和model中 1、V：测试运算&lt;% sum = sum + cart_item.quantity * cart_item.product.price %&gt; 2、helper：把步骤1的逻辑重构helper，测试运算。 3、M：用def total_price，把步骤2的运算重构到model中 6、购物车实做（解答）6.1 购物车练习作业 （解答） 请设计一个功能，可以一键清空购物车内所有的商品 1、R：路由collection，clean 2、V：按钮加入路径 3、C：定义clean，出现clean！ 4、M：定义clean!，用cart_items**.destroy_all 某商品突然不想买了，我可以在购物车内删除它 1、R：路由cart_item 2、V：按钮加入路径 3、C：cart_item里定义destroy 已经加入购物车的商品，不能重复被加入 1、C：在add_to_cart的action里，用if !current_cart.products.include?(@product)判断 可以更改购物车内购买的商品数量(原本预设数量都是1) 1、V：加入&lt;%= f.select :quantity, [1,2,3,4,5] %&gt; 2、C：cart_item的update的action 库存为 0 的商品不能购买 1、V：&lt;% if @product.quantity &gt; 0 %&gt; 2、C：update的action，if @cart_item.product.quantity &gt;= cart_item_params[:quantity].to_i 在购物车新增数量时，不能更新超过原有库存的商品数量 1、V：&lt;%= f.select :quantity, 1..cart_item.product.quantity %&gt; 8、订单实做8.1 Step 1 : 建立结帐页 按下「确认结帐」按钮后，可以显示结帐明细order页，并且可以让消费者输入寄送地址 1、R：路由加入checkout 2、V：改views里按钮的路径 3、C：checkout的action里新建一个order表单 4、V：点击checkout发现页面没变化，console里提示缺少checkout页面。——新建checkout.html.erb（需调用cart_item的商品信息、制作填表用上order栏位） 5、M：加入order所需栏位total、user_id、billing_name/address、shipping_name/address。并设置与user关系。 6、R：路由加入order 7、C：生成订单需要order的create的action。 8.2 Step 2 : 建立购买明细 有时候商品会下架、价格会变，新建product_list的model 订单create时的购买明细缓存 购买明细show页面 效果：用produst_list代替cart_item存储已下单的商品信息，达到订单里的商品信息不随商品更新而改变的目的。 问题、为什么要新建product_list的model ？——order和product_list的model，相当于是把cart和cart_item的商品信息转移过来。在购物车cart里商品会随着管理员产品信息更新而更新，而在订单order里商品的信息不再改变，已经单独储存在product_list中。 1、M：①新建product_list的model；②加入栏位order_id、product_name、product_price、quantity；③设置与order关系 2、C：订单creat的action中建立product_list的缓存信息 3、C：订单建立后会进入详情页即show，于是设置show的action 4、V：show的views，因为要用order和product_list来替代cart和cart_item，所以这里用order和product_list调用信息。 8.3 Step 3 : 将网址改为秘密 token 效果：订单号乱序显示 1、栏位：新建add_token_to_order 2、M：定义generate_token的action（SecureRandom.uuid），并加入before_create 3、C：修改order里的id调用，比如redirect_to order_path(@order)改成redirect_to order_path(@order.token)，find改成find_by_token 9、订单实做（解答）9.1 订单练习作业（解答） 使用者可以在 /account/orders/ 看到过去所有订单 使用者在下拉式选单可以看到过去所有的订单 订单排序 1、R：路由加入 2、C：order的index，并按时间排序 3、V：index页面，并在navbar中加入链接。token报错，进入rails c，输入Order.where(token: nil).destroy_all 10、支付订单与寄信10.1 Step 1 : 消费者可以针对订单付款 使用 is_paid（boolean 属性）判断是否已付费 使用 payment_method 判断，实际付款渠道为：微信、支付宝 已付款过的订单不可以再付 效果：用is_paid判断是否付费，用payment_method判断支付方式。 1、R：路由加入pay_with_alipay、pay_with_wechat 2、V：加入支付的按钮并链接路径 3、C：定义pay_with_alipay和pay_with_wechat的action 4、栏位：add_payment_method_to_order，string 5、M：定义set_payment_with!(method)、和 pay! ，用到上一步新建的栏位。这里的用法是self.update_columns(栏位: 设定的值 ) ​ 6、栏位：add_is_paid_to_order，boolean 7、V：加入if判断显示支付按钮，还是显示“订单已完成付款” 10.2 Step 2 : 寄送订单确认通知信 使用者在下单后会收到一封订单确认信，rails g mailer OrderMailer gem ‘letter_opener’，并在console下测试信件预览 在订单建立时寄通知信 1、rails g mailer OrderMailer，产生mailer相关文件 2、app/mailers/application_mailer.rb，设置寄信人邮箱 3、app/mailers/order_mailer.rb，设置寄信表头内容（完整代码见下面11章） 1234 def notify_order_placed(order) @user = order.user mail(to: @user.email , subject: &quot;xxx&quot;)end 4、V：notify_order_placed.html.erb，生成订单后的寄信内容（如果没有页面会在rails s报错） 5、 gem &#39;letter_opener&#39;, group: :development * config/environments/development.rb设置`config.action_mailer.delivery_method = :letter_opener` 6、rails c 中测试自动发送信件，OrderMailer.notify_order_placed(Order.last).deliver! 7、C：在order的create的action中加入清空购物车、发送邮件 11、后台出货订单操作11.1 情境和 Model 准备效果：「有限状态机」这个架构去做后台订单切换状态。 1、aasm的github摘抄如下内容 gem ‘aasm’ 12345678910111213141516171819202122class Job include AASM #载入 aasm do state :sleeping, :initial =&gt; true #初始状态 state :running #状态2 state :running #状态3 event :run do #定义run的动作，可以在controller中用run!调用 transitions :from =&gt; :sleeping, :to =&gt; :running #状态由sleeping转换为running end event :clean do transitions :from =&gt; :running, :to =&gt; :cleaning end event :sleep do transitions :from =&gt; [:running, :cleaning], :to =&gt; :sleeping #当有多种状态时用[] end endend 下面这几个用到after_commit 123456789101112131415event before_all_transactionsevent before_transactionevent aasm_fire_event (within transaction)event after_commit (if event successful)event after_transactionevent after_all_transactionsaasm do state :sleeping, :initial =&gt; true state :running event :run, :after_commit =&gt; :notify_about_running_job do transitions :from =&gt; :sleeping, :to =&gt; :running endend 2、增加栏位：add_aasm_state_to_order， :string, default: “order_placed”，目的是设置初始值 3、六个状态state注意是状态： 已下订（order_placed） 已付款（paid） 卖家发货中（shipping） 已交货（shipped） 取消订单（order_cancelled） 退货（good_returned） 4、五种个model里的动作，即五种状态切换 注意：这里是model的动作，常常会在controller的action行为下调用，因为在后面加!所以可以同名 make_payment（付款） ship卖家发货（货物离开启运地或者发货人交运给承运人） deliver交货（货物到达目的地或者交付收货人） return（退货） cancel（取消订单） 4、C：- @order.pay!，然后+ @order.make_payment! 5、M：修改有限状态机 1event :make_payment, after_commit: :pay! do 6、测试：重新操作订单新建到付款，rails c，Order.last，看aasm_state是否显示为转换后的状态paid 11.2 订单状态切换 建立 admin/orders 可以看到系统内所有订单 admin 的 order 列表应要能显示订单状态 使用者可以“申请取消订单” 使用者“申请取消订单”后，管理员应该要收到“申请通知信” 后台管理员可以“取消订单”、“出货” 后台管理“出货”后，系统应该寄出通知信 后台管理员“取消订单”后，系统应该寄出通知信 1、R：路由加入admin::order 2、C：index，按id排序 3、V：index页面，用order调用信息：订单号、创建人、创建时间、订单状态 ​ 4、C：show，显示product_lists 5、V：show页面，用product_lists和@order调用信息 6、helper：render_order_paid_state(order)，显示已付款、未付款 7、V：调用 ​ 后台操作： 8、V：app/views/admin/orders/_state_option.html.erb，用case..when语法罗列6种订单状态，然后分别在各种状态下列出需要出现的操作按钮，发现总共需要4种按钮、2种状态： 已下订（order_placed）——申请取消订单cancel 已付款（paid）——申请取消订单cancel+卖家发货ship 卖家发货中（shipping）——交货deliver 已交货（shipped）——退货 取消订单（order_cancelled）——状态：订单已取消 退货（good_returned）——状态：已完成退货 123456789101112131415161718192021222324252627282930313233app/views/admin/orders/_state_option.html.erb&lt;% case order.aasm_state %&gt; &lt;% when \"order_placed\" %&gt; &lt;%= link_to(\"取消订单\", cancel_admin_order_path(order), class: \"btn btn-default btn-sm\", method: :post) %&gt; &lt;% when \"paid\" %&gt; &lt;%= link_to(\"取消订单\", cancel_admin_order_path(order), class: \"btn btn-default btn-sm\", method: :post) %&gt; &lt;%= link_to(\"出货\", ship_admin_order_path(order), class: \"btn btn-default btn-sm\", method: :post) %&gt; &lt;% when \"shipping\" %&gt; &lt;%= link_to(\"设为已出货\", shipped_admin_order_path(order), class: \"btn btn-default btn-sm\", method: :post) %&gt; &lt;% when \"shipped\" %&gt; &lt;%= link_to(\"退货\", return_admin_order_path(order), class: \"btn btn-default btn-sm\", method: :post) %&gt; &lt;% when \"order_cancelled\" %&gt; &lt;span class=\"label label-default\"&gt;订单已取消&lt;/span&gt; &lt;% when \"good_returned\" %&gt; &lt;span class=\"label label-default\"&gt;已退货&lt;/span&gt; &lt;% end %&gt; 9、R：路由加入4种动作ship、shiped、return、cancel 10、C：设置4种动作的find_and_do，其中do的部分已经在11-1的aasm..do里设置过，可以直接调用 1234567891011121314151617181920212223def ship @order = Order.find(params[:id]) @order.ship! redirect_to :backenddef deliver @order = Order.find(params[:id]) @order.deliver! redirect_to :backenddef cancel @order = Order.find(params[:id]) @order.cancel! redirect_to :backenddef return @order = Order.find(params[:id]) @order.return! redirect_to :backend 11、V：show里加入刚刚步骤8做的页面 &lt;%= render &quot;state_option&quot;, order: @order %&gt; ​ 前台用户操作： 12、R：加入用户取消订单动作apply_to_cancel 13、V：申请取消订单的按钮附上链接，加条件&lt;% if @order.order_placed? || @order.paid? %&gt; 14、C：定义apply_to_cancel ​ 寄信设置： 15、C：分别加入寄信OrderMailer.notify_ship(@order).deliver! 前台用户，apply_to_cancel申请取消订单apply_cancel(@order) 后台，ship卖家已发货notify_ship(@order) 后台，cancel订单已取消notify_cancel(@order) 16、修改OrderMailer的表头 123456789app/mailers/order_mailer.rbdef apply_cancel(order) @order = order @user = order.user @product_lists = @order.product_lists mail(to: &quot;admin@test.com&quot; , subject: &quot;[JDStore] 用户#&#123;order.user.email&#125;申请取消订单 #&#123;order.token&#125;&quot;)end V：加入寄信页面，几个页面内容一样，可以用partial 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172app/views/order_mailer/apply_cancel.html.erb&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-12&quot;&gt; &lt;h2&gt; 订单明细 &lt;br&gt; &lt;small&gt; &lt;%= link_to(&quot;订单连结&quot;, order_url(@order.token)) %&gt; &lt;/small&gt; &lt;/h2&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=&quot;70%&quot;&gt;商品明细&lt;/th&gt; &lt;th&gt;单价&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小记&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% @product_lists.each do |product_list| %&gt; &lt;tr&gt; &lt;td&gt; &lt;%= product_list.product_name %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.product_price %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.quantity %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.quantity * product_list.product_price %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;% end %&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;total group clearfix&quot;&gt; &lt;h4 class=&quot;pull-right&quot;&gt; 总计 &lt;%= @order.total %&gt; CNY &lt;/h4&gt; &lt;/div&gt; &lt;hr&gt; &lt;h2&gt; 寄送资讯 &lt;/h2&gt; &lt;table class=&quot;table table-striped table-bordered&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; 订购人 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;%= @order.billing_name %&gt; - &lt;%= @order.billing_address %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 收件者 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;%= @order.shipping_name %&gt; - &lt;%= @order.shipping_address %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt; 17、在rails c中测试，OrderMailer.notify_order_placed(Order.last).deliver! 12、部署到 Heroku （七牛云）12.1 本章学习指南12.2 一些安全概念 (本节只需要看，不需要实作)12.3 使用七牛云（用来存储图片）12.4 使用 Figaro 管理密码12.5 将JDStore部署到Heroku12.6 JDStore 商店创意大赛（第二季）参赛指南12.7 使用SendCloud服务发送邮件12.8 Rails 环境架构12.9 如何在 Heroku 上 Debug13-部署到 Heroku (海外用户方案)13.1 本章部属指南13.2 申请AWS S3（用来储存图片）13.3 使用 Figaro 管理密码13.4 将JDStore部署到Heroku13.5 泄漏 S3 密钥的处理方式","categories":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"Atom","slug":"Atom","permalink":"http://yoursite.com/tags/Atom/"}],"keywords":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}]},{"title":"Atom 编辑器系列视频课程","slug":"atom_video_lesson","date":"2017-01-11T16:10:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/d3902ab9/","link":"","permalink":"http://yoursite.com/posts/d3902ab9/","excerpt":"此课程为 Atom 编辑器系列课程，主要介绍了 Atom 的高效开发技巧以及必备插件。","text":"此课程为 Atom 编辑器系列课程，主要介绍了 Atom 的高效开发技巧以及必备插件。 课程列表 Atom编辑器系列课程 #1 - Atom简介 Atom编辑器系列课程 #2 - 设置简介 Atom编辑器系列课程 #3 - 快速格式化代码插件 atom-beautify [#4 - 即将更新] 优酷播单地址 关注 讲师微博 @Parry 获取第一时间更新提醒。视频版权为 新浪微博 @Parry 所有。您可以随意下载、分享视频内容，不过请勿用于商业行为，我们保留追究所有法律责任的权利！","categories":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}],"tags":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/tags/视频教程/"},{"name":"Atom","slug":"Atom","permalink":"http://yoursite.com/tags/Atom/"}],"keywords":[{"name":"视频教程","slug":"视频教程","permalink":"http://yoursite.com/categories/视频教程/"}]},{"title":"Ionic 2 官方示例程序 Super Starter","slug":"ionic_super_starter","date":"2016-12-28T09:00:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/543ad9c1/","link":"","permalink":"http://yoursite.com/posts/543ad9c1/","excerpt":"本文分享了 Ionic 2 官方示例程序 Super Starter 的简要介绍与安装运行的方法，最好的学习示例代码，项目共包含了 14 个通用的页面设计，如：引导页、主页面详情页面、登录注册、设置、国际化（多语言）、API、增删改查、预览等页面，供参考。","text":"本文分享了 Ionic 2 官方示例程序 Super Starter 的简要介绍与安装运行的方法，最好的学习示例代码，项目共包含了 14 个通用的页面设计，如：引导页、主页面详情页面、登录注册、设置、国际化（多语言）、API、增删改查、预览等页面，供参考。 1. 环境配置与更新安装 Ionic 2 的开发环境即可，这部分内容可以参考之前的 Q&amp;A 文章。完整的安装命令为：npm install -g cordova ionic。 如果不是最新版本的 Ionic 2，建议执行命令进行更新到最新版本，对于学习与体验该程序都是应该的。更新命令如下。 注意所有的命令前为了避免权限问题最好添加 sudo。 2. Super Starter 的安装执行下面的命令进行安装，注意国内的网络环境最好翻墙执行，处理网络问题可以参考之前的博文。 3. 运行在建立的项目目录中执行 sudo ionic serve 命令启动项目即可看到 Super Starter 的项目运行情况。或者部署到 iOS 或者 Android 设备中体验学习。项目共包含了 14 个通用的页面设计，如：引导页、主页面详情页面、登录注册、设置、国际化（多语言）、API、增删改查、预览等页面。项目源代码地址：https://github.com/driftyco/ionic-starter-super","categories":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}],"tags":[{"name":"Hybrid App","slug":"Hybrid-App","permalink":"http://yoursite.com/tags/Hybrid-App/"},{"name":"Ionic","slug":"Ionic","permalink":"http://yoursite.com/tags/Ionic/"},{"name":"Ionic 入门与实战","slug":"Ionic-入门与实战","permalink":"http://yoursite.com/tags/Ionic-入门与实战/"}],"keywords":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}]},{"title":"Ionic2 下处理 Android 设备下返回按钮的事件","slug":"ionic2_android_handling-the-hardware-back-buttons","date":"2016-09-25T08:06:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/5f54aa31/","link":"","permalink":"http://yoursite.com/posts/5f54aa31/","excerpt":"本文分享了 Ionic2 下处理 Android 设备下返回按钮的事件，供参考。","text":"本文分享了 Ionic2 下处理 Android 设备下返回按钮的事件，供参考。 代码中我分享了如何捕捉 Ionic2 项目在 Android 设备下返回按钮事件，并在捕捉到的事件中可以灵活根据需求编写相关业务逻辑，如退出、返回等。详细的逻辑处理参见下面代码即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import &#123;Component&#125; from '@angular/core';import &#123;Platform, ionicBootstrap&#125; from 'ionic-angular';import &#123;StatusBar&#125; from 'ionic-native';import &#123;TabsPage&#125; from './pages/tabs/tabs';import &#123;App, NavController&#125; from 'ionic-angular';import &#123;ViewChild&#125; from '@angular/core';@Component(&#123; template: '&lt;ion-nav #rootNavController [root]=\"rootPage\" #content swipe-back-enabled=\"false\"&gt;&lt;/ion-nav&gt;'&#125;)export class MyApp &#123; @ViewChild('rootNavController') nav: NavController; private rootPage: any; constructor(private platform: Platform) &#123; this.rootPage = TabsPage; platform.ready().then(() =&gt; &#123; // Okay, so the platform is ready and our plugins are available. // Here you can do any higher level native things you might need. StatusBar.styleDefault(); //退出按钮重写******开始****** document.addEventListener('backbutton', () =&gt; &#123; let activeVC = this.nav.getActive(); let page = activeVC.instance; if (!(page instanceof TabsPage)) &#123; if (!this.nav.canGoBack()) &#123; console.log('检测到在根视图点击了返回按钮。'); return platform.exitApp(); &#125; console.log('检测到在子路径中点击了返回按钮。'); return this.nav.pop(); &#125; let tabs = page.tabs; let activeNav = tabs.getSelected(); if (!activeNav.canGoBack()) &#123; console.log('检测到在 tab 页面的顶层点击了返回按钮。'); return platform.exitApp(); &#125; console.log('检测到当前 tab 弹出层的情况下点击了返回按钮。'); return activeNav.pop(); &#125;, false); //退出按钮重写******结束****** &#125;); &#125;&#125;ionicBootstrap(MyApp);","categories":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}],"tags":[{"name":"Hybrid App","slug":"Hybrid-App","permalink":"http://yoursite.com/tags/Hybrid-App/"},{"name":"Ionic","slug":"Ionic","permalink":"http://yoursite.com/tags/Ionic/"},{"name":"Ionic 入门与实战","slug":"Ionic-入门与实战","permalink":"http://yoursite.com/tags/Ionic-入门与实战/"}],"keywords":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}]},{"title":"Ionic 入门与实战之第二章第一节：Ionic 环境搭建之开发环境配置","slug":"ionic_chapter_2_install","date":"2016-04-26T12:56:00.000Z","updated":"2018-01-12T02:37:02.000Z","comments":true,"path":"posts/fdbc7bb9/","link":"","permalink":"http://yoursite.com/posts/fdbc7bb9/","excerpt":"本文是「Ionic 入门与实战」系列连载的第二章第一节，主要对 Ionic 的开发环境配置做了简要的介绍，本文介绍的开发环境为 Mac 系统，Windows 系统基本类似，少许差别请查阅相关文档即可。","text":"本文是「Ionic 入门与实战」系列连载的第二章第一节，主要对 Ionic 的开发环境配置做了简要的介绍，本文介绍的开发环境为 Mac 系统，Windows 系统基本类似，少许差别请查阅相关文档即可。 1. Ionic 环境的安装1.1 Node.js 与 npm 介绍Node.js 与 npm 是 Ionic 环境的基础，这里我们做一下简要介绍。Node.js 是基于 Chrome’s V8 JavaScript engine 构建的一个JavaScript runtime （一般翻译为 JavaScript 运行时），特点是事件驱动、非阻塞等。npm 是 Node.js 中的 JavaScript 包管理。目前已经是最大的开源组件库，使用起来非常方便，也非常值得学习。以上两个组件，只需要安装 Node.js 即可。 Mac 系统中，下载 pkg 安装； Windows 系统中，下载对应的 msi 安装，注意 32 位和 64 位版本的区别。 下载地址：https://nodejs.org/en/download/安装后，可以通过 node -v 查看当前版本，确认是否安装成功或者查看当前的 Node.js 版本。 Ionic 推荐安装 Node.js 的版本为 v4.0+，即高于 4.0 的版本即可。 1.2 Ionic 的安装这里使用最新的 v2.0 beta 版本进行学习，而且 2.0 版本对于 1.0 版本的所有功能都进行了兼容，所以项目如果从 1.0 转成 2.0，也是可以平滑过渡的。安装 Ionic，使用以下命令即可。 1$ npm install -g ionic@beta 如果需要安装 Ionic 1.0 版本，使用如下命令即可。 1$ npm install -g ionic 2.初始化空项目并体验安装了 Ionic 后，使用如下命令初始化一个空项目，名称为 ionicdemo。 1$ ionic start ionicdemo --v2 ionic start 命令默认采用 tabs template 作为初始化项目的模板，如果需要其他的模板，那么在项目名称后面添加上对应的模板名称即可，如要使用 tutorial template 作为模板，那么命令如下。 1$ ionic start ionicdemo tutorial --v2 其他的模板列表参见这里。 注意这里的 --v2 参数，因为 ionic 命令是和 1.0 版本公用的，所以添加 --v2 参数明确了使用2.0 版本去初始化项目。此过程主要安装了必要的 npm modules，并且安装依赖的 Cordova 组件。这里还有一个技巧，就是如果想使用 TypeScript，那么只要在命令后面添加 --ts 参数即可。 进入项目目录。 1$ cd ionicdemo 运行，在浏览器中查看效果。 1$ ionic serve 当需要在浏览器中模拟 iPhone 下的 UI 展示，需要选择对应的模拟设备，刷新即可。 这里的原理是 Chrome 修改了对应的 User-Agent，Ionic 根据此进行了对应的 UI 呈现。在控制台中可以看到。 使用浏览器进行开发调试是非常方便的方案，不需要频繁连接真机，并且可以方便直观地借助 Chrome 控制台进行样式、JavaScript 等调试。如果需要在模拟器上运行，那么 iOS 设备执行下面的命令即可。 1$ ionic run ios 如果是 Android 设备，那么执行下面的命令。 1$ ionic run android 这样就可以在对应的模拟器上运行了，至于详细的 iOS/Android 的环境配置，我们在下面的章节将有详细地讲解。","categories":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}],"tags":[{"name":"Hybrid App","slug":"Hybrid-App","permalink":"http://yoursite.com/tags/Hybrid-App/"},{"name":"Ionic","slug":"Ionic","permalink":"http://yoursite.com/tags/Ionic/"},{"name":"Ionic 入门与实战","slug":"Ionic-入门与实战","permalink":"http://yoursite.com/tags/Ionic-入门与实战/"},{"name":"书籍连载","slug":"书籍连载","permalink":"http://yoursite.com/tags/书籍连载/"}],"keywords":[{"name":"App 开发","slug":"App-开发","permalink":"http://yoursite.com/categories/App-开发/"},{"name":"Hybrid App","slug":"App-开发/Hybrid-App","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/"},{"name":"Ionic","slug":"App-开发/Hybrid-App/Ionic","permalink":"http://yoursite.com/categories/App-开发/Hybrid-App/Ionic/"}]},{"title":".NET 性能调优之一：ANTS Performance Profiler 的使用","slug":"DotNet_Performance_Tuning_ANTS_Performance_Profiler","date":"2013-01-03T17:29:00.000Z","updated":"2018-01-12T03:13:47.000Z","comments":true,"path":"posts/79a87a16/","link":"","permalink":"http://yoursite.com/posts/79a87a16/","excerpt":"在使用 .NET 进行快速地上手与开发出应用程序后，接下来面临的问题可能就是程序性能调优方面的问题，而性能调优有时候会涉及方方面面的问题，如程序宿主系统、数据库、网络环境等等，而当程序异常庞大复杂的时候，性能调优将变得更加无从下手。本系列文章主要会介绍一些 .NET 性能调优的工具、Web 性能优化的规则（如 YSlow ）及方法等等内容。","text":"在使用 .NET 进行快速地上手与开发出应用程序后，接下来面临的问题可能就是程序性能调优方面的问题，而性能调优有时候会涉及方方面面的问题，如程序宿主系统、数据库、网络环境等等，而当程序异常庞大复杂的时候，性能调优将变得更加无从下手。本系列文章主要会介绍一些 .NET 性能调优的工具、Web 性能优化的规则（如 YSlow ）及方法等等内容。 ANTS Performance Profiler 的基本使用ANTS Performance Profiler 是 RedGate 旗下强大的性能调优产品，官方产品页面在 这里 。先来看一下软件的基本使用。使用下面这段代码进行简单的测试。这是一个控制台应用程序，程序很简单，先进行 10000 次循环，输出和，再使用 LINQ 在 list 里找出 1000 的值输出。12345678910111213141516171819static void Main()&#123; var list = new List&lt;int&gt;(); var sum = 0; for (var i = 0; i &lt; 10000; i++) &#123; sum += i; list.Add(i); &#125; Console.WriteLine(sum); //find the value use linq: 1000 var result = list.Where(p =&gt; p.Equals(1000)); foreach (var i in result) &#123; Console.WriteLine(i); &#125; Console.ReadKey();&#125; 编译程序后，启动 ANTS Performance Profiler ，会自动弹出向导页面，在此页面中，可以看到软件支持多种 .NET 程序的性能监控，如 EXE，web，Windows Service 等等。而在 Performace Counters 中可以根据需要选择多种计数器，IO，内存分配，处理器等等。针对测试 DEMO，选择编译后的 exe 文件路径，因为刚才是 debug 编译，所以选择程序文件夹下 \\bin\\Debug\\ 里面的exe 即可。在 Profiling Mode 里可以选择监控的级别，基本就是监控信息的多少与速度的权衡，默认选择「最详细」即可。其他的详细设置可以参考帮助文档。点击「Start Profiling」，启动程序。 分析结果的查看与分析软件的基本工作原理是在 .NET 编译出的 IL 代码里放入钩子用来记录时间，然后通过直观的界面显示出哪部分代码耗能最大。所以这是性能调优最直接的方法，针对最耗时的代码段进行优化即可。点击「Start Profiling」后启动之前编译的程序，软件开始执行，如果是其他交互程序如 winform、web 等，操作完需要进行性能调优的功能后，在顶部的运行时间轴里用鼠标选定需要查看的时间段即可，一般有性能问题的时间段会出现一个波峰，选定那个时间段即可。 选定后可以立即在下面的结果窗口中看到最耗时的方法，比如上面的 DEMO，当然性能都消耗在了 Main 函数上。 软件提供了多种度量值查看性能损耗，有百分比和多种时间格式，这里选定「秒」作为度量单位。 再选择要查看的函数，软件强大之处就显现出来了。 右侧的红色标线，点击可以快速定位到最耗能的代码，颜色越深表示那段代码越耗能。 左侧可以看到行号，此段代码执行的次数（Hit Count），平均执行时间，总的执行时间，当然还可以同时看到代码供分析使用。 至于 DEMO 里这段代码为什么第一次执行 Console.WriteLine 如此耗能，我想如果你认真看了《CLR via C#》的第一章就应该能知道答案了。 当然你还可以点击层次结构图标，查看更加直观的性能损耗，就像下面这样。这样的层次结构图还有一个好处就是可以看到 .NET Framework 的内部实现。当进行一些决策，比如是用原生的功能还是第三方组件时，这个功能会变得非常好用，因为通过它能比较直观的地看到内部实现的性能瓶颈在哪里。 结语ANTS Performance Profiler 是我性能调优时最先使用也是最喜欢使用的工具，所以放在了第一篇文章里来分享给大家，希望能给各位带来点帮助。它非常的直观、强大，因为手头复杂的项目不适合用来做 DEMO，所以只是写了段简单的代码作演示，它的强大之处还待你真正遇到性能问题使用它时去好好体会。文章有所疏漏和要补充的，请留言一起讨论，也请关注后续的相关文章。","categories":[{"name":".NET","slug":"NET","permalink":"http://yoursite.com/categories/NET/"}],"tags":[{"name":".NET","slug":"NET","permalink":"http://yoursite.com/tags/NET/"},{"name":"ASP.NET","slug":"ASP-NET","permalink":"http://yoursite.com/tags/ASP-NET/"},{"name":"Winform","slug":"Winform","permalink":"http://yoursite.com/tags/Winform/"},{"name":"性能调优","slug":"性能调优","permalink":"http://yoursite.com/tags/性能调优/"}],"keywords":[{"name":".NET","slug":"NET","permalink":"http://yoursite.com/categories/NET/"}]}]}