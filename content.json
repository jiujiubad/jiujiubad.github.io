{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"www-核聚编程-第五讲:记忆的原理","slug":"www-核聚编程-第五讲:记忆的原理","date":"2018-01-18T06:10:00.000Z","updated":"2018-01-26T21:45:33.000Z","comments":true,"path":"posts/aa1a3b17/","link":"","permalink":"http://yoursite.com/posts/aa1a3b17/","excerpt":"","text":"2017年被记忆虐了无数遍，虐到怀疑人生，把那些感悟整合到核聚篇来。 看完第四讲，最大的困惑就是：背句子，背完第二句后要一二句连起来背，以此类推，同样的看视频教程也要不忘前边的重复观看。但是时间的安排就相当困难了，比如第一看四小时，第二天如果花四小时复习，就没有时间学习新的知识。接着，我发现可以用视频倍速播放的方法，如果能用两倍速观看，第二天只要花两小时复习，剩余两小时可以学习新知识。——但是继续往下算，第三天复习三小时学习一小时，第四天复习三个半小时学习半小时，不到一星期就已经没有时间学习新知识。 这一讲的提问里，就有回答我上边的疑问，老师说只有不明白法则的人才有这样的疑问。一个知识点并不是一个知识点，而是成千上万个知识点，记住一个知识点是记住成千上万个知识点，同样的忘记一个知识点也是忘记成千上万个知识点。 正确的做法是随时随地地复习，①不断重复，②讲故事。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"核聚编程","slug":"核聚编程","permalink":"http://yoursite.com/tags/核聚编程/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"tool-stackoverflow-玩转 Stack Overflow 之提问篇【转发】","slug":"6 tool-xx工具/tool-stackoverflow-玩转 Stack Overflow 之提问篇【转发】","date":"2018-01-17T16:10:00.000Z","updated":"2018-01-18T08:24:07.000Z","comments":true,"path":"posts/69cdcaf0/","link":"","permalink":"http://yoursite.com/posts/69cdcaf0/","excerpt":"","text":"参考资料本文转发自，玩转 Stack Overflow 之提问篇 Stack Overflow是世界上最大的编程类问答网站， 大多数程序员或多或少和它有所接触： 即使你从来没有在它上面提问或回答过， 别忘了， 在搜索很多技术问题的时候， 结果的第一页往往就有几条链接到Stack Overflow的问题。 很多人对于Stack Overflow的第一印象是： 很多编程问题都能在上面找到专业的答案， 太牛了。 但当问题没有找到合适答案, 而去上面提新问题的时候， 可能有人会发现自己的问题被残忍的 downvote，甚至被关闭、最后被删除。更有甚者， 发现自己被禁言了， 不允许再问问题。 这是Stack Overflow的另一面： 在一定程度上它对新手是很不友好的。 我个人是Stack Overflow的活跃用户（这个就是我）， 目前 reputation 超过 80K， 参与过很多的关闭/删除问题的投票（关闭问题需要5个rep超过3K的用户投票 ， 删除问题需要3个或更多rep超过10K的用户投票 ）。写这篇文章， 是为了分享一下我的经验， 讲讲如何有效的在Stack Overflow上问问题。 可以问什么样的主题大家都知道 Stack Overflow是编程类的问答社区， 但还真有人把它当成通用的问答社区了， 问些完全无关的问题。 其实， Stack Overflow 是有一系列兄弟网站的（目前已经有100+)， 统称 Stack Exchange， 涵盖很多主题， 比如数学、物理、化学等科学类， 服务器管理、Latex、数据库等计算机类， 中文、俄文、日文等语言类， 详细的列表看这里， 不要让好问题问错地方哦。 允许的主题包括： 具体的编程问题、软件算法相关、通常只有程序员用的软件工具相关等。 有些主题是比较容易弄错的， 比如一般的电脑操作问题， 应该去Super User(热门的 Linux/Unix, 和Ubuntu还有独立的站点）， 专业的服务器问题， 应该去Server Fault。这些都不属于编程类的问题， 尽管不少程序员的日常工作也有涉及（想一想“怎么修电脑？”属于编程问题么）。 再举个例子， 同样是编辑器， Vim/Emacs/Atom相关的问题是可以的，因为基本只有程序员会用这些工具， 而 Word/记事本相关的一般就不可以。 什么样的问题应该避免问编程相关还不够， Stack Overflow 要求问题必须是 「practical, answerable questions based on actual problems that you face」。 这是什么意思呢？ 首先， 开放式的问题是不允许的，比如“你为什么喜欢PHP?”， 隔壁Quora会是更合适的对象。 其次， 问题应该不需要很长的篇幅来回答， 如果一个问题期待的回答足够写一本书， 那很可能会被关闭的。 各种寻求资源的问题应该避免，如 “要完成某某工作， 有什么Python的库可以用”， 或者“学习C++应该选择哪本书？”等， 因为答案会主观， 也容易吸引广告。 最后， 问题不要基于凭空的假设，要基于实际的难题。 需要注意的是，你很可能见过一些违反上面规定的问题还在，而且浏览量很大， 尤其是一些寻求资源的问题， 和非编程相关的计算机问题等。 这是什么原因呢？ 原来，早期的Stack Overflow的规则还比较松，也没有Super User之类的站点。 这些问题往往是08/09年问的，大多数现在已经被关闭了。 上面的规则如果遵守， 你的问题应该问对地方了。 下面继续说说内容上具体需要注意的。 直入主题Stack Overflow不是论坛， 它的目标是希望成为编程类问答的一个超级数据库， 所以每个问题都不止是为了帮助提问者本人， 更重要的是希望将来能够帮助到每一个遇到同样问题的人。 所以， 和问题无关的内容都被认为是一种噪音， 包括： 打招呼（比如 Hi, Hello， Good afternoon， Dear Coders等)， 表示感谢（比如 Thanks, Any help would be appreciated等)， 没必要的背景（比如 I’m a newbie in C#等)， 你的签名 等。 可能有人会不理解为什么这样规定， 尤其是不要表示感谢这点。 Stack Overflow社区的理由是， 对愿意阅读并尝试解答你问题的人来说， 最好的表达感谢的方式是upvote有帮助的回答， 以及选择其中一个作为答案。 每一句和问题无关的内容都增加了额外的阅读时间， 而一个问题可能会被大量的人阅读。 更多的相关讨论可以参见这里和这里。 同样道理， 当有人回答你的问题之后， 也不要去添加无用的评论， 比如单纯的表达感谢的话， “+1”， 或者闲聊等。 评论的唯一用处是用来澄清疑问。 英语作为一个英语社区， 不论提问、回答还是在评论中和别人互动， 都是要用英语的。 除非英语水平真的很糟糕， 语法其实并不是最需要担心的，因为并不需要做到完美。Stack Overflow是允许自由的编辑其他人的问题/回答的（编辑者如果rep不到2K，需要经过评审才会生效）。 有很多人会热情的对问题进行编辑的， 包括修复可能的语法错误。 我想说的一点是， 要尽可能的保证单词拼写是正确的。 即使对英语不够好的人来说， 这也只需要多花一点时间检查就可以做到， 但它代表着对阅读你问题的人的尊重。 甚至很多英语母语的人在拼写上也不注意， 会把I’m 写成im, 把 want to写成 wanna之类的非正式英语， 这些都会降低问题被回答的概率。 内容在发问题之前， 问自己几个问题： 你做过足够的研究么？ 有的人连入门指南都没读上10分钟就去提问， 问的问题能有多少价值呢？ 你尝试过搜索么？ 至少要试过Google和站内搜索， 很可能相同的问题已经有答案了 你试过debug么？ 把你的想法或调试过程写在问题里，否则很可能会看到几条评论“Have you tried anything?”或“We don’t do your homework”之后问题就被downvote得惨不忍睹了。 因为大多数人是拒绝回答没有努力尝试的提问者的。 标签： 一个问题可以加1~5个标签， 大多数问题是和某种具体的编程语言相关的， 这个语言的标签通常是必须的， 否则相关语言的关注者们很可能根本见不到问题。 起一个好标题： 一般来说， 标题应该尽量用简介的语言描述具体的问题。 比如 C# number confusion就是个反例， 如果改成 Why does using float instead of int give me different results when all of my inputs are integers? 就要具体多了。 提供代码对于编程类问题，的确有问题不需要代码也能表达清楚的， 但大多数问题都需要代码才能清晰的表达。“我声明了一个变量， 调用了几个函数， 然后它的值就变了， 为什么呢？” 这样的问题， 鬼才知道答案。 提供代码要注意： 不要贴截图， 难道你要回答者去照着截图敲键盘复现你的问题？ 也不要只贴站外的链接， 如果站外链接能够提供一些额外的方便功能， 也要在贴代码的基础上附上该链接。 对于提供什么样的代码， Stack Overflow给出了一个可参考的标准： MCVE， 即Minimal, Complete, and Verifiable example Minimal: 最小的， 也就是尽可能的去掉和问题无关的部分。 如果你贴了一个几百行的代码， 很少有人愿意花时间去仔细看。 构造最小化例子的过程本身也是debug的过程。 Complete: 完整的， 一个简单的判断是：别人看到问题， 可以通过复制你提供的代码复现出问题吗？ Verifiable: 可验证， 描述问题尽可能具体， “the code doesn’t work”这样的描述就很不好。 如果编译不过， 要加上编译错误信息； 如果运行报错， 也同样要加上具体的错误信息； 如果结果和你的预期不一致， 要说清楚你的预期结果是什么， 为什么会这样想。 格式Stack Overflow的编辑器是Markdown格式的， 如果你还不熟悉， 建议去学一下， 因为Markdown真的是一个只要10分钟就可以学会的语言。 大多数的格式问题都是出在贴代码的地方， 如果你发现你的代码是普通文本， 而没有语法高亮等功能， 那你很可能是格式搞错了。 最方便的方法就是选择所有代码， 然后按键盘Ctrl + K 即可。 交流有可能你的问题几分钟内就会有人回答， 也有可能有人对问题有疑问， 在评论中要求你解释。 可以评论@他们解释， 如果问题确实不够清晰， 编辑你的问题吧。 最后， 如果你自己发现了解答方法， 而还没人给出， 那就自己回答自己的问题吧。 自问自答是被鼓励的行为。 结语看完上面我的唠叨， 是不是也感觉到Stack Overflow对新手的不友好了呢？ 但这是保持高质量内容的代价之一， 必须有一定的机制让低质量的问题不会泛滥， 才会有更多的人愿意花时间回答好的问题。 希望大家都能得到自己问题的答案， 有机会再讲讲如何回答问题。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"stackoverflow","slug":"stackoverflow","permalink":"http://yoursite.com/tags/stackoverflow/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-function-导出excel/导出csv/导入csv","slug":"ror-function-导出excel:导出csv:导入csv","date":"2018-01-17T15:30:00.000Z","updated":"2018-01-18T08:24:07.000Z","comments":true,"path":"posts/a86e36c0/","link":"","permalink":"http://yoursite.com/posts/a86e36c0/","excerpt":"","text":"一、转出csv1、app/controllers/admin/product_controller.rb 123456789101112131415161718require &apos;csv&apos;class Admin::ProductsController &lt; ApplicationControllerdef index @products = Product.all respond_to do |format| format.html format.csv &#123; @products = @products.reorder(&quot;id ASC&quot;) csv_string = CSV.generate do |csv| csv &lt;&lt; [&quot;id&quot;, &quot;title&quot;, &quot;description&quot;, &quot;price&quot;, &quot;quantity&quot;] @products.each do |p| csv &lt;&lt; [p.id, p.title, p.description, p.price, p.quantity] end end send_data csv_string, :filename =&gt; &quot;products-#&#123;Time.now.to_s(:number)&#125;.csv&quot; &#125; endend 2、app/views/admin/products/index.html.erb 1&lt;%= link_to &quot;汇出 CSV&quot;, admin_products_path(:format =&gt; :csv), :class =&gt; &quot;btn btn-danger&quot; %&gt; 二、转出excel1、gemfile，bundle并重启rails s 123gem &apos;rubyzip&apos;gem &apos;axlsx&apos;gem &apos;axlsx_rails&apos; 2、app/views/admin/products/index.html.erb 1&lt;%= link_to &quot;汇出 Excel&quot;, admin_products_path(:format =&gt; :xlsx), :class =&gt; &quot;btn btn-danger&quot; %&gt; 3、app/controllers/admin/product_controller.rb 1format.xlsx 4、app/views/admin/products/index.xlsx.axlsx 1234567wb = xlsx_package.workbookwb.add_worksheet(name: &quot;Buttons&quot;) do |sheet| sheet.add_row [&quot;id&quot;, &quot;title&quot;, &quot;description&quot;, &quot;price&quot;, &quot;quantity&quot;] @products.each do |p| sheet.add_row [p.id, p.title, p.description, p.price, p.quantity] endend 三、导入csvlib/tasks/dev.rake 123456789101112131415161718192021222324require &apos;csv&apos;namespace :dev do task :import_csv =&gt; :environment do success = 0 failed_records = [] CSV.foreach(&quot;#&#123;Rails.root&#125;/tmp/products.csv&quot;) do |row| product = Product.new( :title =&gt; row[1], :description =&gt; row[2], :price =&gt; row[3], :quantity =&gt; row[4]) if product.save success += 1 else failed_records &lt;&lt; [row, product] end end puts &quot;总共汇入 #&#123;success&#125; 笔，失败 #&#123;failed_records.size&#125; 笔&quot; failed_records.each do |record| puts &quot;#&#123;record[0]&#125; ---&gt; #&#123;record[1].errors.full_messages&#125;&quot; end endend Bug第二次导入，或数据库有数据，就会报错。原因是id重复导入，其实不用加id的系统会自动加，删除这一行就可以重复导入:id =&gt; row[0],。123 ✘ apple@apple ⮀ ~/rails/jdstore005 ⮀ ⭠ test± ⮀ rake dev:import_csvrake aborted!ActiveRecord::RecordNotUnique: SQLite3::ConstraintException: UNIQUE constraint failed: products.id: INSERT INTO &quot;products&quot; (&quot;id&quot;, &quot;title&quot;, &quot;description&quot;, &quot;quantity&quot;, &quot;price&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES (?, ?, ?, ?, ?, ?, ?)","categories":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}],"tags":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/tags/ror功能/"}],"keywords":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}]},{"title":"ror-function-random()随机商品","slug":"ror-function-random()随机商品","date":"2018-01-17T15:10:00.000Z","updated":"2018-01-18T08:24:07.000Z","comments":true,"path":"posts/f790badf/","link":"","permalink":"http://yoursite.com/posts/f790badf/","excerpt":"","text":"一、避免bug的写法Step1 先在model定义随机的scope，不同环境分开，否则服务端会报错12345if Rails.env.production? #远端 scope :random8, -&gt; &#123; limit(8).order(&quot;RAND()&quot;) &#125;elsif Rails.env.development? #本地 scope :random8, -&gt; &#123; limit(8).order(&quot;RANDOM()&quot;) &#125;end Step2 然后在controller#index调用1@suggests = Product.random8 Step3 在views显示，复制index的，用suggests来做each循环。1234567891011121314&lt;h2 style=&quot;margin-top:700px;&quot; class=&quot;text-center&quot;&gt;随机推荐8个&lt;/h2&gt;&lt;% @suggests.each do |product| %&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;%= link_to product_path(product) do %&gt; &lt;% if product.photos.present? %&gt; &lt;%= image_tag(product.photos[0].avatar.thumb.url, class: &quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt; &lt;% end %&gt; &lt;%= link_to(product.title, admin_product_path(product)) %&gt; ¥ &lt;%= product.price %&gt; 元 &lt;/div&gt;&lt;% end %&gt; 二、bug服务器报错RANDOM does not exist123Completed 500 Internal Server Error in 21ms (ActiveRecord: 1.8ms)ActionView::Template::Error (Mysql2::Error: FUNCTION rails_recipes.RANDOM does not exist: SELECT `products`.* FROM `products` ORDER BY RANDOM() LIMIT 8): 参考资料Random in mysql2 for rails 4 app https://code.i-harness.com/zh-CN/q/29fee7，提到在**Rails 4和5中 ，使用PostgreSQL或SQLite ，使用RANDOM() 。大概同样适用于使用RAND() MySQL**。 解决办法：Step1处，把开发环境、产品环境分开12345if Rails.env.production? #远端 scope :random8, -&gt; &#123; limit(8).order(&quot;RAND()&quot;) &#125;elsif Rails.env.development? #本地 scope :random8, -&gt; &#123; limit(8).order(&quot;RANDOM()&quot;) &#125;end","categories":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}],"tags":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/tags/ror功能/"}],"keywords":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}]},{"title":"www-核聚编程-第四讲:杠铃法则","slug":"www-核聚编程-第四讲:杠铃法则","date":"2018-01-16T14:10:00.000Z","updated":"2018-01-26T21:45:26.000Z","comments":true,"path":"posts/9f4c5077/","link":"","permalink":"http://yoursite.com/posts/9f4c5077/","excerpt":"","text":"五拍每秒，二百五十拍。 十拍每秒，三百一十五。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"核聚编程","slug":"核聚编程","permalink":"http://yoursite.com/tags/核聚编程/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"www-核聚编程-第三讲:目标法则","slug":"7 www-xx心得/www-核聚编程-第三讲:目标法则","date":"2018-01-15T04:10:00.000Z","updated":"2018-01-26T21:45:51.000Z","comments":true,"path":"posts/716eb504/","link":"","permalink":"http://yoursite.com/posts/716eb504/","excerpt":"","text":"一生唯一的战略：指数增长→必须要走一系列S曲线 十岁有五十美元，35岁挣到一百万，年复合增长率是多少？ 一、目标模型1、巴菲特1）保持年复合增长率61%。 2、纽波特店2.1 法则1）必须每天把目标放在心上； 2）我每天一起床脑子里就想着要去改进些什么，我一直被一种想要追求卓越的渴望驱策着； 3、孙正义1、一天中学习以外的时间只有5分钟。 4『总结』4.1 目标法则有了目标之后，一定是先苦后乐的。 1）明确的目标 2）君子无所不用其极。——《礼记·大学》 3）取得成果，得到认知升级。 『没有目标，对生活、工作是无感的麻木的』。有了目标才有感觉，哪怕是失败，也是反复的失败、明确的失败，比麻木强。 4.2 目标是什么？1）目标：眼睛看的到的指示杆。 比如什么叫好的工作，不知道。 2）99%的人根本没有目标 3）99.99%的人败在了目标上 4）目标的要素SMART Goals： ①、具体 ②、可测量 ③、兴奋 ④、现实可行的 ⑤、时效 二、心流模型（与刻意练习是孪生）聪明目标+行动=忘我的愉悦（心流） 1、必须有挑战性。高度的辛苦，同时忘我的愉悦。 2、跟能力匹配 （短时间内）一万次练习=明确的过程目标 （短时间内）一万次练习=巨大的奖赏 三、问答1、举例的这些，在常人身上不容易实现？1）建议读书《遥远的救世主》 2）什么叫神一般的存在？他们就是按一般的法则去做，做到那个效果让你感觉不可思议，可是你去分解他们整个过程，这个过程没有神奇之处，都是平凡的道理，背后都有『详实的知识和模型』作为依据的。 3）所以，当你感觉到神奇的时候，就去看他们做的每一个环节，每一个环节都能做到的。 2、关于学习技能，怎么才是可测量的？1）核聚高考时意识到只有用进步本，才能每天踏踏实实进步。每天定量记录8-15页，记录搞明白的问题、吸取到的知识，记完本子把它们记到脑子。——这是定量的，每天多少页就是多少页，目标非常明确。 2）如果今天10页完成了，那明天11页行不行，每一步的目标都是清晰的，而且每天的目标都是清晰的。 3）『大丈夫一日定成败，成就是成，败就是败』（或用数字衡量今天是否大于1）。 这样的话，成就是轰轰烈烈地成，败就是明确地败，是明明白白地败。 这样的话，无论成败，你的认知都会升级的。比如『对知识』的认知，『对自己能力』的认知，『对自己时间管理』的认知，『对自己体能』的认知，都会因为目标达成或没有达成，回顾过程而得到新的认知。 3、学习的时候总想着多做点多做点，结果陷入了赶进度，舍不得时间复习的窘境（整理电脑、收藏夹、手机文件也是同理）？1）根本原因就是：你的目标是什么？你想要什么？ 2）你的选择： 你要的是进度吗？看起来做了很多东西，做了很多题目、看了很多文章，实际上这只是看起来好的一种感觉，或是比起别人来觉得有面子，或是满足自己的虚荣内心。 还是要的是实实在在的进步、实实在在的分数？ 3）你必须要做抉择的，这个问题非常明确，你究竟要的是什么？做了抉择之后，你就知道你必须要做什么了。 比如，不复习，学过就忘记了，那时间全都浪费掉了。 4、核聚老师的目标是怎么制定的？1）案例 比如，高中时候每天进步本的页数就是我的目标。一年写下6400页的进步本笔记。 比如，当教练的时候，我要拿冠军，我跟运动员说： 无论任何大小比赛，你的目标只有一个，就是冠军。不要再花时间琢磨这个问题了。我也如此。 2）怎么分解目标？ 我要成为这个项目的专家，研究24000张图片。 3）比如，做公众号，怎么设立目标？ 按照日增量，是1%还是2%，按每天1%增长率一年翻37倍，那2%、3%呢？可以倒推的，一个星期、一个月的日增长率是可以算出来的。这就是目标。 5、人生目标是什么？1）想大了，大家不要想这些事情，想不清楚的。 2）把眼前的事情想清楚了，你如果眼前一天的目标都想不清楚，还想什么定个月计划或年计划那都是荒唐的。 眼前的小事，比如我们学个英语、做个项目，一天的目标都定不下来，还能想那些大的问题吗？ 6、定了目标，但是对失败没有感觉是什么原因，即便自己失败了也没有很痛苦？如何才能有这种定了目标必须完成的信念呢？1）答案是简单的，就是：你究竟想要什么？还有就是你的责任，你要保护的人遇到困难的时候你能不能保护他们？ 7、在职的人要怎么使用进步本？1）在职是在做实际项目，一定涉及相关的知识、你对项目的认知、对自己的认知。这些背后都是有经验教训的，比如装修用什么材料用什么颜色，把这些经验以及你查到的资料一个个记下来。 2）你对未来有更好的期望，你要去学习那些知识，记下来，跟朋友分享互换知识。 8、学习过久，心态焦虑怎么调整？1）原因还是目标，如果目标定的明确，全力以赴去做的话，你都没有时间去考虑焦虑，你都没有心思去焦虑。 2）从一天一小时做起，比如一天记一小时单词你要记多少个。或是以进步本，记录多少页为目标。 3）目标可以反复迭代，比如从一天一小时变成两小时。不管怎样，每天都必须要有目标。 9、孙正义的成功是不是偶然？1）我不去思考这些，对我们成长没有意义。 2）人生下来本来就是最大的偶然，同样的元素为什么不是一棵树、一只鹿而是一个人呢。 3）任何人都活在偶然性之中，关键是你怎么运用法则去把握必然性。 10、目标时间怎么衡量？倒推。你拿一天、半天、或一小时给自己设定目标，去打成它。然后按着这种感觉这种认知经验去设定更长时间的目标。 11、SMART Goals其中的“现实”要怎么判断？1）“现实”就是要你能查到怎么一步一步做到的，比如孙正义去做发明，他要是查专利的书籍，这都是非常明确的，所以他搞发明就是一个现实的目标。 2）凡是你能够找到明确途径的这些，都是现实目标。 考研、工资翻倍、好工作、待遇翻倍，这些现实的路径太多了，在别人的案例上都可以看到。所以这些并不难 12、课程规律总结：系列课中的后一节课都是前一节课的具体分析操作，接下来改变要具体定下这些计划了。课程的特点环环相扣，都是指向操作的，目标是实现效果，实现指数增长。大家赶紧把这些认知，这些模型作为参考，来制定自己具体的行动目标。 四、99梳理1、认知错误1.1 目标、总结、学习、睡觉哪个更重要？1）一直都搞错方向了，在一天里，最最最最重要的事情，既不是学习也不是做项目，而是目标。一个月最重要的事情，也是目标。 2）睡觉可以保证复习总结、以及学习知识/做项目的效果，所以排第二。 3）学一个单词并不是学一个，而是会用上千次，所以学习的重要性除了次于目标外，还要次于复习总结。 即每日目标&gt;复习总结&gt;学习知识/做项目。 能学习更多的知识自然是好事，但一定要留的住，如果留不住那今天既不是1.02也不是1，而是负增长。 1.2 制定目标不是随随便便地拍脑袋1）每个人现有资源、能力不同，要先按小时、按每天测试，认知自己的体能、时间管理、学习新知识的能力。 2）根据大目标，计算日复合增长率。 3）根据测试结果，以及计算出的增长率，制定v1.0计划。 4）检查v1.0计划是否符合SMART Goals五元素。 5）不断迭代计划。 所以，制定目标不是简单地说我想要在3月31日找到、&gt;5000的、编程工作。这个计划看起来好像很具体，实则漏洞百出。 ——正确的目标是：要『评估』认知自己现有的能力、『计算』增长率看自己差距多大，要提高增长率要多做什么事、制定的v1.0计划还要对照SMART Goals『检查』、还要不断『迭代』。 2、时常出现的不良状态1）游离，一晃神几小时过去了。就像前文说的，『没有目标，对生活对工作都是麻木的、无感的』。 2）走神，内心世界混乱，就跟电脑里的资料一样，做这件事情会闪过其他事情的念头，本来想做项目的做着做着就去大博客了。 3）记不住，学习中心的内容看的时候有仔细练几遍，那几天很熟了，想着过几天拿出来复习，几天后想着现在手头这么多知识要学，要不一周后，一放就是一个月甚至几个月，早就忘光光。反复学反复忘，忘到怀疑人生，别人一年前就在做的事情，我一年后还搞不清楚。 4）混乱的周遭，内心也容易混乱。混乱的微信好友、电脑文件、桌面、收藏夹、手机照片文件、云盘，混乱的md文章和文件夹。看到这些混乱局面就有不想看要逃避的念头，不是不想整理，而是常年堆积下来，压根整理不动，如果按每天花20分钟整理当天的文件夹，365*20=7300分钟，即121小时，这个量级哪是几个小时就能搞定的？ 3、测试目标：按小时一小时做小程序页面 一小时想小程序逻辑 一小时看小程序视频 一小时做web功能：2.5小时做一个跳转逻辑。2小时随机商品页面，及购物车页面。 一小时看核聚视频 一小时整理文件 一小时看rails guides多少页 一小时看ruby基础教程多少页 一小时做rails tutorial多少页 一小时看面试贴 一小时看ruby on rails实战圣经视频 遇到bug是最花时间的，写求助帖花时间、发布和等待花时间、测试也花时间。但是求助是一种必须培养的能力。 ransack搜索其他model、random的bug、搜索searchkick的bug 4、倒推目标：3月31日前上班，工资&gt;50001）小程序 2）酷米仕 3）官方rails、官方ruby 4）学习中心和ruby on rails实战圣经 核聚用进步本，我用typora，他用页来评估，我用字数？ 5、制定的目标是否对应到SMART Goals元素？6、年复合增长率是什么？达到61%是什么程度？如果现在有0元，每月能存2000，到35岁挣到100万，年复合增长率要多少？","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"核聚编程","slug":"核聚编程","permalink":"http://yoursite.com/tags/核聚编程/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"tool-hexo-hexo主题篇之Asnippet","slug":"6 tool-xx工具/tool-hexo-hexo主题篇之Asnippet","date":"2018-01-12T16:10:00.000Z","updated":"2018-01-18T07:59:40.000Z","comments":true,"path":"posts/8d89ee75/","link":"","permalink":"http://yoursite.com/posts/8d89ee75/","excerpt":"","text":"序开始之前，先强调几点： hexo几篇文章看的顺序：有基础的直接按『主题篇Asnippet』做；没有基础的可以先快速浏览一遍『hexo视频篇』然后按『主题篇Asnippet』做；遇到问题可以在『主题篇Next』搜索（因为第一次是折腾Next主题所以很多问题写在这一篇）。 关于博客如何分类、md格式文章怎么写，可以看『hexo常用篇』。 hexo博客搭建到能用的程度，非常简单。但是主题等细节配置会有各种坑，如果纠结其中，可能三五天才能配置完。因此推荐用Asnippet主题，简单搭建能用就好，以免浪费太多注意力。 ！！不要想着用git，项目直接错乱掉！！不要想着拷贝别人的项目，重定向问题！！不要想着从github上面clone下来，包括自己的博客，clone下来不能用的！！以上每一个问题，都足够折腾一天而没有结果，心中早已千万只草泥马奔腾。hexo的路上，最讨厌的就是有时同样的操作，现在能生效，等下又不能生效，非常反人类。遇到的bug1）hexo g时报错，因为md文章内出现不支持的字符，比如大小括号最好放在多行代码内，放在文字中可能会报错。 关于备份1）github的test分支只是用来预防万一文章丢失，不要考虑把它克隆下来，试过克隆不能运行。而且私人文章不便在上边发布。 2）所以，主要备份在谷歌硬盘、百度云盘。这样就有了两手准备。 序1、hexo三篇教程怎么用？ 先快速过一遍视频篇，然后按Snippet篇做，遇到问题在Next篇查。 2、主题怎么选？ 选手机电脑自适应的，因为手机绝逼主流。 Next是最多人用的，但99坚决不选Next，在Next篇踩了无数坑，最终还做不出来什么效果。受够了这个主题。 进去github看看，选那些一年内还有在更新的。选这类主题更有可能挑到配置简单粗暴的，而且坑会少因为有些插件已经被淘汰。 一、从头开始用Asnippet主题1、安装hexo及主题1）按hexo视频篇安装hexo及主题 2）『Asnippet主题』必须安装的组件，也可详见https://github.com/shenliyang/hexo-theme-snippet 123npm install hexo-renderer-ejs --savenpm install hexo-renderer-less --savenpm install hexo-deployer-git --save 2、绑定github，改站点配置，然后hexo三兄弟123hexo cleanhexo ghexo d 3、绑定域名touch source/CNAME，填上域名jiujiubad.top。然后hexo三兄弟。 4、安装git！！测试发现只会追踪配置文件，所以没卵用，还不如用md文档记录123456git initgit remote add origin https://github.com/jiujiubad/jiujiubad.github.iogit checkout -b test //因为master要用来放静态网站，新建分支来放站点配置和主题配置文件。git add .git commit -m &quot;git init&quot;git push origin test //部署到github。 二、主题功能（主）开始前，一定要想清楚（前端套路深，不要瞎折腾）： 1、搭博客的目的是什么？『集合文档，写过的东西在博客里都能搜索到。极少机会可能分享一两篇给小伙伴』。 2、目的主要是让自己放文章、能搜索。那么最最必要的功能是：『搜索、代码高亮、置顶、文章链接唯一化』。 3、其他功能特别是只关乎前端显示的，不要碰！！等到把文章整理完成，有时间再做。 1、本地站内搜索1）安装插件 1npm i hexo-generator-json-content@2.2.0 -S 2）『主题配置』，把jsonContent下searchLocal: true 2、文章链接唯一化默认用时间/标题来做链接，如果时间/标题修改了，分享出去的链接就失效。 启用插件要求文章必须写开头标签title等，否则会因为abbrlink:0而导入失败。 1）安装插件 1npm install hexo-abbrlink --save 2）站点配置，修改permalink并增加abbrlink。配置完记得重启hexo s 123456permalink: posts/:abbrlink/ #原设置 :year/:month/:day/:title/permalink_defaults:# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 查看sources/_posts文件夹内文章开头标签里，会多一个abbrlink: xxxxxxx。 3、代码高亮1）该主题已自带，在markdown文件里的代码加在codeblock中间 1234&#123;% codeblock lang:objc %&#125;lang是指要代码的种类，比如htom、css、jd。这里写想要高亮的代码&#123;% endcodeblock %&#125; 2）字的样式太暗，用google检查找到样式。 atom搜索比如.post-content pre，把color改为#eee 4、置顶文章style=”background-color:#eee;margin-left:20px;margin-right:20px;” 12345678910111213&lt;body class=&quot;container-fluid&quot;&gt; &lt;%- partial(&apos;_partial/header&apos;) %&gt; &lt;%- partial(&apos;_partial/nav&apos;) %&gt; &lt;section class=&quot;content-wrap&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;main class=&quot;col-md-9 main-content &lt;%if(is_post())&#123;%&gt;m-post&lt;%&#125;%&gt;&quot;&gt; &lt;%- body %&gt; &lt;/main&gt; &lt;%- partial(&apos;_partial/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; 三、重要css修改后注意对比手机自适应 1） 2）主页左右空白间距。themes/snippet/layout/layout.ejs 123456789101112131415&lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;%- partial(&apos;_partial/header&apos;) %&gt; &lt;%- partial(&apos;_partial/nav&apos;) %&gt; &lt;section class=&quot;content-wra aa99&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;main class=&quot;col-md-9 main-content &lt;%if(is_post())&#123;%&gt;m-post&lt;%&#125;%&gt;&quot;&gt; &lt;%- body %&gt; &lt;/main&gt; &lt;%- partial(&apos;_partial/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; 用媒体监听控制大小屏幕两边距。themes/snippet/source/css/style.css 12345@media (min-width: 600px) &#123; .aa99 &#123; padding: 0 30px; &#125;&#125; 3）文章左右空白间距。themes/snippet/layout/post.ejs的&lt;article class=&quot;post&quot;&gt; 1&lt;article class=&quot;post pp99&quot;&gt; 用媒体监听控制大小屏幕左边距。themes/snippet/source/css/style.css 12345@media (min-width: 600px) &#123; .pp99 &#123; padding-left: 35px; &#125;&#125; 3）裁剪x方向多出的页面。themes/snippet/source/css/style.css 123body &#123; overflow-x: hidden; &#125; 4）改首页文章图片大小。themes/snippet/source/css/style.css 12 四、主题功能（次）不蒜子 比如，统计字数和阅读量 来必力评论 标签云 google分析或百度统计 导航 readme 设计文章命名规则：英文开头+xxx+要不要加时间 打赏二维码 修改完成后，打包到google硬盘 2、评论来必力！！失败了登录显示成功实际却没有登录1）官网注册https://livere.com/ 2）头像-管理页面-City版安装-填写网站链接、名称、类型-在一般代码一栏找到data-uid=&quot;*********&quot; 3）『主题配置』，livere_uid: **********","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-hexo-hexo视频篇之快速使用hexo搭建个人博客","slug":"6 tool-xx工具/tool-hexo-hexo视频篇之快速使用hexo搭建个人博客","date":"2018-01-10T16:10:00.000Z","updated":"2018-01-18T07:59:49.000Z","comments":true,"path":"posts/eea95795/","link":"","permalink":"http://yoursite.com/posts/eea95795/","excerpt":"","text":"参考资料快速使用 Hexo 搭建个人博客 Hexo官网中文站点 模板博客-好记性不如烂键盘 序开始之前，先强调几点： hexo几篇文章看的顺序：有基础的直接按『主题篇Asnippet』做；没有基础的可以先快速浏览一遍『hexo视频篇』然后按『主题篇Asnippet』做；遇到问题可以在『主题篇Next』搜索（因为第一次是折腾Next主题所以很多问题写在这一篇）。 关于博客如何分类、md格式文章怎么写，可以看『hexo常用篇』。 hexo博客搭建到能用的程度，非常简单。但是主题等细节配置会有各种坑，如果纠结其中，可能三五天才能配置完。因此推荐用Asnippet主题，简单搭建能用就好，以免浪费太多注意力。一、Hexo 框架介绍 二、框架的本地安装与运行1、安装命令12345npm install hexo-cli -g //安装hexo框架hexo init blog //注意：这里的blog是示例文件夹，可以改成自己想要的名称和位置cd blog //进入文件夹npm installhexo server 2、效果图 三、框架的基本结构与打包后的文件介绍1、框架的基本结构如下图 2、常用命令1）最最常用的如下，详见官方文档hexo-文档-命令https://hexo.io/zh-cn/docs/commands.html 12345hexo clean //删除网站，即删除public文件夹hexo g //生成网站，即生成public文件夹hexo s //运行hexo，打开网址http://localhost:4000/查看博客ctrl+c //停止hexo shexo d //部署到github，要先站点配置添加github地址 2）特别注意 『站点配置文件』（见上图）更改后，一定要重启hexo（先ctrl+c停止hexo s，再重新hexo s）才能生效。 『主题配置文件』（见上图）更改后，直接刷新http://localhost:4000/即可。 四、4 - Hexo 博客主题的安装与推荐1、官网主题见https://hexo.io/themes/1）点击主题图片可以预览，如http://haojen.github.io/ 2）点击标题进入主题的github，如https://github.com/haojen/hexo-theme-Anisina 2、主题的安装进入主题github，里边有详细的安装教程，主题安装基本都是下边两步： Step1、克隆主题1git clone https://github.com/Haojen/hexo-theme-Anisina.git themes/Anisina Step2、修改站点配置1）打开『站点配置文件』_config.yml，然后修改主题theme: Anisina。 2）重启hexo（ctrl+c，再hexo s），打开http://localhost:4000/，可以看到主题已更改。 五、如何自定义你的博客结构1）推荐白色背景主题，最好手机自适应：Light、Anisina 2）比如这个Light博客。分类、标签云、统计http://blog.parryqiu.com/ 六、如何开始写博客文章以及文章的分类与标签1、文章开头标签写法1）hexo官方文档hexo-文档-Front-matter，https://hexo.io/zh-cn/docs/front-matter.html 2）示例（标题、日期、分类、标签） 12345678910---title: hexo视频教程date: 2018-01-11 09:00categories:- 博客tags:- 视频教程- hexo- 博客--- 2、小技巧：1）用markdown写时要定义h1、h2、h3多级标题，主题会帮我们生成目录，提高阅读体验。 七、如何让代码在 Hexo 下显示的更加美观1、代码高亮如何写hexo官方文档hexo-文档-标签插件Tag Plugins，https://hexo.io/zh-cn/docs/tag-plugins.html Step1、在markdown文档里加入代码，如下 Step2、修改主题1）打开themes/主题文件夹/layout/_partial/head.ejs，引入css代码。 八、本地写作时图床的最佳解决方案1、七牛云1）效果跟ipic类似，复制图片或截图后，直接在typora粘贴会自动上传成图床网址。 2）但是，感觉七牛云需要管理麻烦。 2、ipic（99现用）1）截图，或复制网站上的图片后，shift+command+u上传 2）本地图片，点击后command+u上传 3）typora设置粘贴图片自动上传（编辑-图片工具-当插入本地图片时-使用ipic上传）。 如果需要备份本地图片，可以这样修改： ①、编辑-图片工具-当插入本地图片时-拷贝到文件夹 ②、当文章写好后，编辑-图片工具-使用ipic上传本地图片 4）图片用img标签，可以改大小&lt;img src=&quot;&quot; width=&quot;500&quot;&gt; 九、插件的安装与必备插件介绍1、统计字数/阅读数1）使用『不蒜子 不如』脚本http://ibruce.info/2015/04/04/busuanzi/ 2）修改themes/主题文件夹/layout/_partial/after-footer.ejs 2、更多插件1）hexo官方文档hexo-Plugins插件，https://hexo.io/plugins/ 2）比如： hexo-all-minifier，做全局html、css、js的压缩 hexo-cdnify，本地剪切板图片url上传到图床 hexo-disqus-prxoy，解决Disuqs国内不能访问时的代理 hexo-helper-qrcode，二维码 建议简洁，插件太多会影响博客加载。应该把主要精力放在提高文章质量上。 十、如何让你的博客接入评论系统1、Disqus国内被墙，国内用户看不到。 2、来必力支持微信、微信登录。 3、畅言需要博客备案。 『总结』：1）如果要用，推荐来必力。针对国外用户可用Disqus。 2）或干脆不用，打注意力用在写博客，交流放在微信、QQ。 十一、如何给你的博客增加搜索功能静态网站没有数据库，不能再后端写搜索功能。只能变相实现搜索： 1、标签云类似于分类的效果，不能做全文关键词检索。 2、swifttype收费。原理是把我们的文章上传到它的数据库，然后提供接口网址给我们使用。 3、百度/google的site语法比如搜索site: blog.parryqiu.com/。搜索结果取决于百度/google收录了多少你的文章。 4、本地站内搜索『总结推荐』1）加入标签云 2）用本地搜索 十二、多个博客统计系统的接入方案分析接入方案主要是js的部署，只要把统计平台的js部署到页脚就可以。 统计的重要性：流量来源、搜索关键字、阅读量。 1、友盟u-web热点图，用户点击最多的位置。 2、百度统计3、google统计十三、部署博客到 GitHub 的技巧1、Github pages是什么？1）每个github的项目，提供一个页面用来展示你的项目。 注意：github pages做个人主页只能用&lt;username&gt;.github.io，做项目主页是用&lt;usernmae&gt;.github.io/&lt;projectname&gt;。 详见『单个GitHub帐号下添加多个GitHub Pages的相关问题』http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/ 2）Github pages网址都是项目名.github.io。有自己的域名可以绑定，并配置CNAME。配置方法见『Github Page 绑定域名』http://justcoding.iteye.com/blog/1959736 2、也可以部署到自己的服务器十四、Hexo 其他资源的介绍与分享1、99文字版教程2、知乎关于hexo主题的帖子，99喜欢snippet","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"bug-random bug服务器报错**RANDOM does not exist","slug":"2 ror-tips:bug知识点/bug-random bug服务器报错**RANDOM does not exist","date":"2018-01-09T16:10:00.000Z","updated":"2018-01-18T07:31:49.000Z","comments":true,"path":"posts/2a0e357f/","link":"","permalink":"http://yoursite.com/posts/2a0e357f/","excerpt":"","text":"一、避免bug的写法Step1 先在model定义随机的scope，不同环境分开，否则服务端会报错12345if Rails.env.production? #远端 scope :random8, -&gt; &#123; limit(8).order(&quot;RAND()&quot;) &#125;elsif Rails.env.development? #本地 scope :random8, -&gt; &#123; limit(8).order(&quot;RANDOM()&quot;) &#125;end Step2 然后在controller#index调用1@suggests = Product.random8 Step3 在views显示，复制index的，用suggests来做each循环。1234567891011121314&lt;h2 style=&quot;margin-top:700px;&quot; class=&quot;text-center&quot;&gt;随机推荐8个&lt;/h2&gt;&lt;% @suggests.each do |product| %&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;%= link_to product_path(product) do %&gt; &lt;% if product.photos.present? %&gt; &lt;%= image_tag(product.photos[0].avatar.thumb.url, class: &quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt; &lt;% end %&gt; &lt;%= link_to(product.title, admin_product_path(product)) %&gt; ¥ &lt;%= product.price %&gt; 元 &lt;/div&gt;&lt;% end %&gt; 二、random bug服务器报错RANDOM does not exist123Completed 500 Internal Server Error in 21ms (ActiveRecord: 1.8ms)ActionView::Template::Error (Mysql2::Error: FUNCTION rails_recipes.RANDOM does not exist: SELECT `products`.* FROM `products` ORDER BY RANDOM() LIMIT 8): 参考资料Random in mysql2 for rails 4 app https://code.i-harness.com/zh-CN/q/29fee7，提到在**Rails 4和5中 ，使用PostgreSQL或SQLite ，使用RANDOM() 。大概同样适用于使用RAND() MySQL**。 解决办法：Step1处，把开发环境、产品环境分开12345if Rails.env.production? #远端 scope :random8, -&gt; &#123; limit(8).order(&quot;RAND()&quot;) &#125;elsif Rails.env.development? #本地 scope :random8, -&gt; &#123; limit(8).order(&quot;RANDOM()&quot;) &#125;end","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"tool-hexo-hexo常用篇/blog分类格式、标签格式、文件名格式","slug":"tool-hexo-hexo常用篇:blog分类格式、标签格式、文件名格式","date":"2018-01-09T16:10:00.000Z","updated":"2018-01-26T21:45:15.000Z","comments":true,"path":"posts/d16694c4/","link":"","permalink":"http://yoursite.com/posts/d16694c4/","excerpt":"","text":"一、文件名+标签+文件夹标签『转发』『常用』，标签根据自己需要继续添加。1、ror-system——ror系统 ==ror系统https://ws4.sinaimg.cn/large/006tNc79gy1fnfep1kp2qj30jk0dtwez.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- ror系统tags:- ror系统img: &apos;https://ws4.sinaimg.cn/large/006tNc79gy1fnfep1kp2qj30jk0dtwez.jpg&apos; 2、ror-tips——ror知识点==ror知识点https://ws1.sinaimg.cn/large/006tNc79gy1fnfwh0s580j305k050a9w.jpg 1234567title:date: &apos;2018-01- 00:10&apos;categories:- ror知识点tags:- ror知识点img: &apos;https://ws1.sinaimg.cn/large/006tNc79gy1fnfwh0s580j305k050a9w.jpg&apos; 3、ror-function——ror功能 ==ror功能https://ws3.sinaimg.cn/large/006tNc79gy1fnfvqdlgzej30d608s74i.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- ror功能tags:- ror功能img: &apos;https://ws3.sinaimg.cn/large/006tNc79gy1fnfvqdlgzej30d608s74i.jpg&apos; 4、web-page——web页面 ==web页面https://ws2.sinaimg.cn/large/006tNc79gy1fnfvej9iydj30ci08z3yo.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- web页面tags:- web页面img: &apos;https://ws2.sinaimg.cn/large/006tNc79gy1fnfvej9iydj30ci08z3yo.jpg&apos; 5、wx-function——微信基础、功能、页面 ==微信小程序1）wx-system，https://ws1.sinaimg.cn/large/006tNc79gy1fng5pmwdonj30cd08u0sx.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- 微信小程序tags:- 微信系统img: &apos;https://ws1.sinaimg.cn/large/006tNc79gy1fng5pmwdonj30cd08u0sx.jpg&apos; 2）wx-function，https://ws1.sinaimg.cn/large/006tNc79gy1fnfwxbwogcj30dy0ccwer.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- 微信小程序tags:- 微信功能img: &apos;https://ws1.sinaimg.cn/large/006tNc79gy1fnfwxbwogcj30dy0ccwer.jpg&apos; 3）wx-page，https://ws3.sinaimg.cn/large/006tNc79gy1fnfuf5yqi5j30di09sq34.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- 微信小程序tags:- 微信页面img: &apos;https://ws3.sinaimg.cn/large/006tNc79gy1fnfuf5yqi5j30di09sq34.jpg&apos; 7、bug——bug==ror知识点https://ws1.sinaimg.cn/large/006tNc79gy1fnfw7fgtkoj30dv0dh0sq.jpg 1234567title: date: &apos;2018-01- 00:10&apos;categories:- ror知识点tags:- bugimg: &apos;https://ws1.sinaimg.cn/large/006tNc79gy1fnfw7fgtkoj30dv0dh0sq.jpg&apos; 8、tool-vps/hexo——工具、vpa/hexo/atom ==工具1）tool-mac，https://ws2.sinaimg.cn/large/006tKfTcgy1fnfcwsitmgj30da08pjrg.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- macimg: &apos;https://ws2.sinaimg.cn/large/006tKfTcgy1fnfcwsitmgj30da08pjrg.jpg&apos; 2）tool-atom，https://ws4.sinaimg.cn/large/006tKfTcgy1fnfd8csp18j308506wdfq.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- atomimg: &apos;https://ws4.sinaimg.cn/large/006tKfTcgy1fnfd8csp18j308506wdfq.jpg&apos; 3）tool-hexo，https://ws3.sinaimg.cn/large/006tNc79gy1fng9zj56ukj30d909st8n.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- hexoimg: &apos;https://ws3.sinaimg.cn/large/006tNc79gy1fng9zj56ukj30d909st8n.jpg&apos; 4）tool-vps，https://ws4.sinaimg.cn/large/006tNc79gy1fnfdhnbgrrj308506bmx2.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- vpsimg: &apos;https://ws4.sinaimg.cn/large/006tNc79gy1fnfdhnbgrrj308506bmx2.jpg&apos; 5）tool-mobile phone，https://ws3.sinaimg.cn/large/006tNc79gy1fng6b0212hj30ce09mjre.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- 手机img: &apos;https://ws3.sinaimg.cn/large/006tNc79gy1fng6b0212hj30ce09mjre.jpg&apos; 6）typora，https://ws3.sinaimg.cn/large/006tNc79gy1fng7a0vzibj30bg08tdfn.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- typoraimg: &apos;https://ws3.sinaimg.cn/large/006tNc79gy1fng7a0vzibj30bg08tdfn.jpg&apos; 7）stackoverflow，https://ws3.sinaimg.cn/large/006tKfTcgy1fnktt0iujdj309y08cmx3.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 工具tags:- 工具- stackoverflowimg: &apos;https://ws3.sinaimg.cn/large/006tKfTcgy1fnktt0iujdj309y08cmx3.jpg&apos; 9、www——心得，orid-day/orid-week/orid-month/核聚编程/interview ==心得1）www-orid-day，https://ws2.sinaimg.cn/large/006tNc79gy1fnfy67kwelj30bt06874q.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 心得tags:- 心得- orid-dayimg: &apos;https://ws2.sinaimg.cn/large/006tNc79gy1fnfy67kwelj30bt06874q.jpg&apos; 2）www-orid-week，https://ws2.sinaimg.cn/large/006tNc79gy1fnfy9z9yw2j30hc0dcdfy.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 心得tags:- 心得- orid-weekimg: &apos;https://ws2.sinaimg.cn/large/006tNc79gy1fnfy9z9yw2j30hc0dcdfy.jpg&apos; 3）www-orid-month，自由发挥 https://ws1.sinaimg.cn/large/006tNc79gy1fngaymxphij30dq0aumx5.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 心得tags:- 心得- orid-monthimg: https://ws1.sinaimg.cn/large/006tNc79gy1fngaymxphij30dq0aumx5.jpg 4）www-核聚编程，https://ws1.sinaimg.cn/large/006tNbRwly1fnuq9oxzpaj306c055aa1.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 心得tags:- 心得- 核聚编程img: &apos;https://ws1.sinaimg.cn/large/006tNbRwly1fnuq9oxzpaj306c055aa1.jpg&apos; 5）www-interview，https://ws1.sinaimg.cn/large/006tNc79gy1fnfx150oqcj30nw0i6mxx.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 心得tags:- 心得- interviewimg: &apos;https://ws1.sinaimg.cn/large/006tNc79gy1fnfx150oqcj30nw0i6mxx.jpg&apos; 10、invest——搬砖，区块链==投资1）invest-搬砖，https://ws4.sinaimg.cn/large/006tNc79gy1fnfzg8vkijj3064064jra.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 投资tags:- 投资- 搬砖img: &apos;https://ws4.sinaimg.cn/large/006tNc79gy1fnfzg8vkijj3064064jra.jpg&apos; 2）invest-区块链，https://ws4.sinaimg.cn/large/006tNc79gy1fnfzk9lmhtj30ik0cnq3i.jpg 12345678title: date: &apos;2018-01- 00:10&apos;categories:- 投资tags:- 投资- 区块链img: &apos;https://ws4.sinaimg.cn/large/006tNc79gy1fnfzk9lmhtj30ik0cnq3i.jpg&apos; 即 1234567891011博客介绍：### 分类ror系统ror知识点ror页面ror功能微信页面微信功能工具（按标签分类，mac，atom，hexo，vps）心得（按标签分类，orid-day、orid-week、orid-month，inteview，核聚编程）投资","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"orid-month","slug":"orid-month","permalink":"http://yoursite.com/tags/orid-month/"},{"name":"常用","slug":"常用","permalink":"http://yoursite.com/tags/常用/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"tool-hexo-hexo常用篇/blog文章格式markdown","slug":"6 tool-xx工具/tool-hexo-hexo常用篇:blog文章格式markdown","date":"2018-01-09T16:10:00.000Z","updated":"2018-01-26T19:11:10.000Z","comments":true,"path":"posts/da6a027e/","link":"","permalink":"http://yoursite.com/posts/da6a027e/","excerpt":"","text":"一、逻辑清晰（目的是让目录更清晰）用上Step，注意序号1、2、3，无序*，步骤Step的不同使用逻辑要很清晰。 序号1、2、3、，1）2）3）用于罗列第一种第二种第三种，配合『总结』 无序*，用于小号标题1）2）3）下罗列第一种第二种第三种 Step1Step2，用于步骤，一般用三号字一定要加粗 二、补充说明 引用用于补充说明 包含元素： 1、标题。按本文格式写，用typora，或hexo博客查看，都能生成目录。 2、参考资料的链接。边查资料边附上，这样即便没有收藏也没关系。 3、gif动图，一些按步骤操作的东西，用gif更直观，也省得写一堆文字和截图还解释不清楚。 4、图片大小，&lt;img src=&quot;&quot; width=&quot;500&quot;&gt; 5、常用符号『内容加粗』。 6、列表，可以从excel拷贝过来。 其他，有时间的话，看下自定义css。 参考资料参考文档1 参考文档2 一、第一章1、第一次1.1 准备1）发扥打发动啊饭懂啊分懂啊分大森大森扥大噶将老夫大龄饭；阿帆额根据热囧啊劳烦大佬森懂啊劳烦东京老阿帆懂啊劳烦东京阿凯法撒旦扥将阿塞看饭懂啊分开东啊反动卡乐芙懂啊劳烦懂啊饭懂啊劳烦带高级ad老饭店啊精力放大赛分懂啊劳烦洞开阿发懂啊劳烦东拉夫懂啦房贷阿三发东拉夫懂啊另发动啊开分。 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大噶将老夫大龄饭；阿帆额根据热囧啊劳烦大佬森懂啊劳烦东京老阿帆懂啊劳烦东京阿凯法撒旦扥将阿塞看饭懂啊分开东啊反动卡乐芙懂啊劳烦懂啊饭懂啊劳烦带高级ad老饭店啊精力放大赛分懂啊劳烦洞开阿发懂啊劳烦东拉夫懂啦房贷阿三发东拉夫懂啊另发动啊开分。 1.2 然后1）发扥打发动啊饭懂啊分懂啊分大森大森扥大 发扥打发动啊饭懂啊分懂啊分大森大森扥大 非打死分懂啊放大撒发动啊 发动啊房东卡了发动机阿福懂啊发动啊 非打死 非打死饭懂啊分懂啊懂啊 噶森量阿三发动啊就反动啊反动啊 饭懂啊分懂啊力帆懂啊 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大 1.3 开始1）非打死分懂啊分懂啊分懂啊发动啊分大赛发动 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大 二、第二章2、第一次Step1 准备1）发扥打发动啊饭懂啊分懂啊分大森大森扥大 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大 3）发扥打发动啊饭懂啊分懂啊分大森大森扥大 Step2 然后1）发扥打发动啊饭懂啊分懂啊分大森大森扥大 发扥打发动啊饭懂啊分懂啊分大森大森扥大 非打死分懂啊放大撒发动啊 发动啊房东卡了发动机阿福懂啊发动啊 非打死 非打死饭懂啊分懂啊懂啊 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大 Step3 开始1）非打死分懂啊分懂啊分懂啊发动啊分大赛发动 2）发扥打发动啊饭懂啊分懂啊分大森大森扥大","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"orid-month","slug":"orid-month","permalink":"http://yoursite.com/tags/orid-month/"},{"name":"常用","slug":"常用","permalink":"http://yoursite.com/tags/常用/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"tool-mac-下载网站工具offline pages pro使用方法","slug":"6 tool-xx工具/tool-mac-下载网站工具offline pages pro使用方法","date":"2018-01-09T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/8f82da10/","link":"","permalink":"http://yoursite.com/posts/8f82da10/","excerpt":"","text":"5000页约1.1G，不够放，重新下载 二、99总结-建议自定义1、配置详解1）默认5个选项跟自定义5个选项，看起来像是一一对应的（实测结果也类似），除了第一项下载媒体文件没测试过。 2）下载页数，测试过可以一次性写多点如20000页。 以前担心写多了会帮我们乱下载，实测不会。 3）level只有website这个设置不限级，其他几个默认level1。 测试学习中心（正常有一两千页），levels1只下载83页。 4）Follow links to的三个选项：外父目录、其他子域、其他网站。 1）外父目录是最最重要的，一定要勾选。测试了1000页的Website，默认只勾选这一项，好像该有的网页都有。 2）其他子域，除非一些特定的文档或链接，一般小点的网站都没有用子域名。建议不勾选，下载前可以先看看域名，对个别域名不同的文档或链接单独下载。 3）其他网站，建议不勾选，下载其他网站的资源第一会很大，第二没必要因为可能压根就不会点进去看。 2、总结：直接按这样配置 再补充操作动图 一、下载的默认选项1、Page and Media，网页+媒体文件2、Page and Important Links，网页+重要链接3、Page and All Links，网页+所有链接4、Website(1000 Pages)，网页1000个5、Advanced，自定义按照下载链接分为 1）None，下载1000页，level第一级。不下载外父目录、其他子域、其他网站。 2）Intelligent，下载50页，level第一级。下载外父目录、其他子域、其他网站。 3）First Level，下载1000页，level第一级。下载外父目录、其他子域、其他网站。 4）Website，下载1000页，level不限级。下载外父目录，不下载其他子域、其他网站。 5）custom，自定义。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"},{"name":"下载","slug":"下载","permalink":"http://yoursite.com/tags/下载/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-function-搜索(大数据量)如elastic：gem searchkick","slug":"ror-function-搜索(大数据量)如elastic：gem searchkick","date":"2018-01-09T16:10:00.000Z","updated":"2018-01-14T11:04:07.000Z","comments":true,"path":"posts/c8b6f8d4/","link":"","permalink":"http://yoursite.com/posts/c8b6f8d4/","excerpt":"","text":"一、参考资料1、用gem elasticsearch-rails还是searchkick？1）searchkick有更多的基于个人用户的定制，gem elasticsearch-rails只是ElasticSearch团队的一个语言库。参考资料点击。 2、Ruby on rails 实战圣经ActiveReord: 加强搜寻 Ransack可以很快的针对ActiveRecord做出排序和复杂的条件搜寻。不过 ransack 并不太考虑效能问题，特别是文字模糊搜寻，这部份网站长大后会改用全文搜寻引擎，例如 ElasticSearch 3、Ruby on rails 实战圣经全文搜尋Full-text search engine 如果需要搜尋text欄位，因為資料庫沒辦法加索引，所以會造成table scan把資料表所有資料都掃描一次，效能會非常低落。這時候可以使用外部的全文搜尋伺服器來做索引，目前常見有以下選擇： Elasticsearch全文搜尋引擎和elasticsearch-rails gem Apache Solr(Lucenel)全文搜尋引擎和Sunspot gem PostgreSQL內建有全文搜尋功能，可以搭配 texticle gem或 pg_search gem Sphinx全文搜尋引擎和thinking_sphinx gem 二、搜索gem选哪个？1、结论1）效能要求较低，一万笔以内的数据，用gem ransack； 2）几万笔属于，用elasticsearch，其中最好用的是gem searchkick； searchkick建立在elasticsearch-transport和elasticsearch-api之上，详见gem elasticsearch-ruby的README的Usage。 二、searchkick实作gem ‘searchkick‘ Rails，ElasticSearch和SearchKick深入，进阶用法。 视频+代码教程Searchkick and Elasticsearch | Drifting Ruby 刘鲁鹏同学的blog elasticsearch部署linode 刘鲁鹏作品Pharmabook 视频例子 Ruby on Rails - Railscasts #306 Elasticsearch Part 1 gem ‘searchkick’搜索功能 by-毛尧吉 用searchkick来实现敏捷搜索 by-yammy 如何在linode服务器端，实现elasticsearch敏捷搜索 by-LIULUPENG Elasticsearch 實戰筆記 by-StevenTTuD 优先按刘鲁鹏，其次毛尧吉、yammy实作帖子 官网searchkick，以及transport和api 微信求助 一、失败！！第一次测试gem &#39;searchkick&#39; brew cask install caskroom/versions/java8，安装好久30分钟。 brew install elasticsearch，安装好久15分钟。 brew info elasticsearch，查看是否安装成功。 launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist，。。没有显示 二、开启elasticsearch后，看是否有数据http://localhost:9200/?pretty 1、第一次用Job.reindex 12345678 apple@apple-2 ⮀ ~/rails/job-listing1129 ⮀ ⭠ master± ⮀ rails cRunning via Spring preloader in process 3835Loading development environment (Rails 5.0.6)2.3.1 :001 &gt; Job.reindex Job Load (5.0ms) SELECT &quot;jobs&quot;.* FROM &quot;jobs&quot; ORDER BY &quot;jobs&quot;.&quot;id&quot; ASC LIMIT ? [[&quot;LIMIT&quot;, 1000]] Job Import (1808.1ms) &#123;&quot;count&quot;:998&#125; =&gt; true2.3.1 :002 &gt; exit 执行rake searchkick:reindex CLASS=Job报错，再次Job.reindex报错 1234567891011121314151617181920212223242526272829303132333435 ✘ apple@apple-2 ⮀ ~/rails/job-listing1129 ⮀ ⭠ master± ⮀ rails cRunning via Spring preloader in process 3905Loading development environment (Rails 5.0.6)2.3.1 :001 &gt; Job.reindex Job Load (3.7ms) SELECT &quot;jobs&quot;.* FROM &quot;jobs&quot; ORDER BY &quot;jobs&quot;.&quot;id&quot; ASC LIMIT ? [[&quot;LIMIT&quot;, 1000]] Job Import (892.0ms) &#123;&quot;count&quot;:998&#125;Elasticsearch::Transport::Transport::Errors::Forbidden: [403] &#123;&quot;error&quot;:&#123;&quot;root_cause&quot;:[&#123;&quot;type&quot;:&quot;cluster_block_exception&quot;,&quot;reason&quot;:&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;],&quot;type&quot;:&quot;cluster_block_exception&quot;,&quot;reason&quot;:&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;,&quot;status&quot;:403&#125; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:202:in `__raise_transport_error&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:319:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/http/faraday.rb:20:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/client.rb:131:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/namespace/common.rb:21:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/actions/indices/update_aliases.rb:43:in `update_aliases&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:70:in `promote&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:244:in `reindex_scope&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/model.rb:72:in `searchkick_reindex&apos; from (irb):1 from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console.rb:65:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console_helper.rb:9:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:78:in `console&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:49:in `run_command!&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands.rb:18:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `require&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `block in require&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:in `load_dependency&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `require&apos; from /Users/apple/rails/job-listing1129/bin/rails:9:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `load&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `block in load&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:in `load_dependency&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `load&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from -e:1:in `&lt;main&gt;&apos;2.3.1 :002 &gt; exit 2、删除commit重新操作，Job.reindex还是报错 12345678910111213141516171819202122232425262728293031323334 apple@apple-2 ⮀ ~/rails/job-listing1129 ⮀ ⭠ master± ⮀ rails cRunning via Spring preloader in process 4765Loading development environment (Rails 5.0.6)2.3.1 :001 &gt; Job.reindex Job Load (0.4ms) SELECT &quot;jobs&quot;.* FROM &quot;jobs&quot; ORDER BY &quot;jobs&quot;.&quot;id&quot; ASC LIMIT ? [[&quot;LIMIT&quot;, 1000]]Elasticsearch::Transport::Transport::Errors::Forbidden: [403] &#123;&quot;error&quot;:&#123;&quot;root_cause&quot;:[&#123;&quot;type&quot;:&quot;cluster_block_exception&quot;,&quot;reason&quot;:&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;],&quot;type&quot;:&quot;cluster_block_exception&quot;,&quot;reason&quot;:&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;,&quot;status&quot;:403&#125; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:202:in `__raise_transport_error&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:319:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/http/faraday.rb:20:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/client.rb:131:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/namespace/common.rb:21:in `perform_request&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/actions/indices/update_aliases.rb:43:in `update_aliases&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:70:in `promote&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:244:in `reindex_scope&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/model.rb:72:in `searchkick_reindex&apos; from (irb):1 from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console.rb:65:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console_helper.rb:9:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:78:in `console&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:49:in `run_command!&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands.rb:18:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `require&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `block in require&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:in `load_dependency&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in `require&apos; from /Users/apple/rails/job-listing1129/bin/rails:9:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `load&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `block in load&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:in `load_dependency&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in `load&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from -e:1:in `&lt;main&gt;&apos;2.3.1 :002 &gt; 12345Elasticsearch transport error 403, when Product.reindex in the localWhen &quot;Add data to the search index&quot;, I run &quot;Job. reindex&quot; in `rails c`, then return an error as follows.​ apple@apple-2 ⮀ ~/rails/job-listing1129 ⮀ ⭠ master± ⮀ rails cRunning via Spring preloader in process 4765Loading development environment (Rails 5.0.6)2.3.1 :001 &gt; Job.reindex Job Load (0.4ms) SELECT “jobs”.* FROM “jobs” ORDER BY “jobs”.”id” ASC LIMIT ? [[“LIMIT”, 1000]]Elasticsearch::Transport::Transport::Errors::Forbidden: [403] {“error”:{“root_cause”:[{“type”:”cluster_block_exception”,”reason”:”blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];”}],”type”:”cluster_block_exception”,”reason”:”blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];”},”status”:403} from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:202:in __raise_transport_error&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/base.rb:319:inperform_request’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/transport/http/faraday.rb:20:in perform_request&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-transport-6.0.0/lib/elasticsearch/transport/client.rb:131:inperform_request’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/namespace/common.rb:21:in perform_request&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/elasticsearch-api-6.0.0/lib/elasticsearch/api/actions/indices/update_aliases.rb:43:inupdate_aliases’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:70:in promote&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/index.rb:244:inreindex_scope’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/searchkick-2.4.0/lib/searchkick/model.rb:72:in searchkick_reindex&#39; from (irb):1 from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console.rb:65:instart’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console_helper.rb:9:in start&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:78:inconsole’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:49:in run_command!&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands.rb:18:in‘ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:in require&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:inblock in require’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:in load_dependency&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:293:inrequire’ from /Users/apple/rails/job-listing1129/bin/rails:9:in &lt;top (required)&gt;&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:inload’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in block in load&#39; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:259:inload_dependency’ from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies.rb:287:in load&#39; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:inrequire’ from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in require&#39; from -e:1:in‘2.3.1 :002 &gt;​1234I try to find solution in Google and stackoverflow, but did not find it.I am very new to be a coder. I use ruby on rails.I hope I didn&apos;t bring trouble to you.","categories":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}],"tags":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/tags/ror功能/"}],"keywords":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}]},{"title":"ror-system-百宝箱所有功能一览","slug":"1 ror-system系统/ror-system-百宝箱所有功能一览","date":"2018-01-08T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/5ee8c435/","link":"","permalink":"http://yoursite.com/posts/5ee8c435/","excerpt":"","text":"luccake最必要：13. Rich Editor，10嵌套表单+19多图 小鑫数据项目： 2. 自定义 Model 网址1）数字加文字ID、乱数token ID、用户自定义ID 3. 多语言设置4. 时区设置5. 格式化日期时间、时区6. 表单单选 UI 7. 表单单选 UI 和 Select2 Plugin 8. 表单多选 UI 和 Select2 Plugin 9. 嵌套表单(1-to-1) 10. 嵌套表单(1-to-many) 11. 选日期时间的 UI1、应用场景1）预约做蛋糕。 12. 拆开前后台的 CSS 和 JS1、应用场景1）项目开始时就可以做，拆分后后台代码不用让用户下载。 13. Rich Editor 图文编辑器之ckeditor1、应用场景1）图文编辑用于发布文章，支持输入html。 2）商品详情页发布商品图文信息。 14. 批次编辑 (Bulk Editing)1、应用场景1）后台编辑多笔资料，通过核选框批量删除、批量修改。 15. 自订列表顺序1、应用场景1）后台商品、分类修改id进行排序，可以加入ajax拖动排序效果。 16. 多步骤表单1、应用场景1）用户注册时，要填写信息量过多而拆分。 2）购物流程，第一步选票种/系统ubuntu，第二部填收货人/套餐或线路。 3）报名表单。 17. 显示资料验证错误讯息1、应用场景1）填写表单格式不符时，提示错误。 18. 资料筛选、搜索1、应用场景1）选择不同的标签、或核选方块筛选资料。 2）模糊搜索ransack。如果数据量上万笔，用Elasticsearch。 19. 多档案上传1、应用场景（配合10的嵌套表单UI）1）商品详情页小图片。 2）商品详情页描述。 20. 图表数据分析1、应用场景1）数据分析。 21. 软删除和版本控制1、应用场景1）回收站功能，上线的网站要用。 22. 数据导出CSV/EXCEL1、应用场景1）资料转移、备份。 23. 用户权限控管1、应用场景1）用户管理。编辑用户权限、设置管理员权限。 2）活动/商品管理。 多角色、多权限管理用gem pundit 和 gem cancancan 24. 本地 E-mail 寄送1、应用场景1）本地测试用即用gem letter_opener。 25. 数据导入1、应用场景1）用rake导入多笔数据，再用CSV.parse解析 26. 异步处理任务1、应用场景1）导入或导出上万笔资料时，让这个进程在后台处理。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"tool-vps-科学上网ss接入指南","slug":"6 tool-xx工具/tool-vps-科学上网ss接入指南","date":"2018-01-08T16:00:00.000Z","updated":"2018-01-18T08:02:08.000Z","comments":true,"path":"posts/2baabef/","link":"","permalink":"http://yoursite.com/posts/2baabef/","excerpt":"","text":"科学上网SS接入指南一、安装SS客户端1、SS手机端/平板端：1）安卓：shadowsocks-nightly-4.2.5 点击下载 2）苹果：Potatso Lite 先登陆一个非大陆apple ID 提供一个：m2c9642s@icloud.com / Xiaoming88 如果失效了，上淘宝搜索香港apple id 租用，大概 ￥2。 搞定ID后，点击下载 2、SS电脑端：1）Mac: ShadowsocksX-NG-1.6.1 点击下载 或官网的githubhttps://github.com/shadowsocks/ShadowsocksX-NG/releases/ 2）Windows: Shadowsocks-4.0.6 点击下载 二、开始接入：1、手机客户端SS按下图：1.1、扫描二维码后会在ss里自动载入配置，比如图片里的443一行。 1.2、选中刚刚载入的这行配置，左侧变成绿色如图。 1.3、点击右下角的按钮启动。OK了，可以科学上网！！！别着急，再设置步骤1.4会更好。 PS：以后重复第1.2、1.3步就可以科学上网。 1.4、更好地配置（以安卓机为例）。这一步可以避免登录淘宝、知乎等平台，手机提示ip是外国ip，并且避免国内网站访问速度因为SS而变慢。 ①、如上图，打开第四步的铅笔图标进入设置； ②、如下图，把功能设置里的『路由』，改为『绕过局域网及中国大陆网址』。 搞定了！！！这样上国内网站就不会受SS的影响了，所以设置完就可以保持SS一直打开。 注意：部分手机可能没有路由的配置，请找一下有没『自动代理模式』，直接选择『自动代理模式』。 2、电脑端SS选择服务器，以及PAC自动模式。2.1、点击SS，选择『扫描屏幕上的二维码』。 ！！！注意：电脑上的二维码要放大一点，否则扫描时可能会识别不到。 2.1、点击服务器一行，在弹出窗口上勾选我们刚刚扫描添加的服务器。比如我的443（后面对应的是ip地址）。 2.3、选择PAC自动模式。OK！！！开始科学上网！！ OK！！！试试 www.google.com 三、注意，重要提示：1）你的端口是独享的，不要分享到群里，人多容易被墙。不要分享不要分享。 2）电脑端SS，平时都是用『PAC自动模式』。 PAC模式的意思是，局域网和中国大陆的网址不通过SS上网，只有国外网址才会通过SS上网。 如果选择『全局模式』，中国大陆网址会变得超慢。 3）电脑端SS，只有在个别网站使用SS后仍无法访问（被墙）时，才切换为『全局模式』，浏览完记得切回『PAC自动模式』。 对于只有『全局模式』才能访问的网站，如果需要经常访问，可以加在SS的白名单中，以后就可以在『PAC自动模式』下访问这个被墙的网站了。如下：","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"科学上网","slug":"科学上网","permalink":"http://yoursite.com/tags/科学上网/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-vps-科学上网vps服务端（比如vultr）","slug":"6 tool-xx工具/tool-vps-科学上网vps服务端（比如vultr）","date":"2018-01-08T15:30:00.000Z","updated":"2018-01-18T08:02:19.000Z","comments":true,"path":"posts/abf78efa/","link":"","permalink":"http://yoursite.com/posts/abf78efa/","excerpt":"","text":"购买vultr直接看“Vultr搭建vpn教程”部分配置科学上网直接看“方法三”配置加速及vultr备份看“进阶一/二/三”在linux里，移动光标可以边按住左或右键，边按ctrl或shift，实现光标快速移动。 关键词：“ vps搭建vpn被墙 ” pinginfoview for mac superping pro mac 单位换算：1Gbps=1000Mbps，1000Mbps/8=宽带125兆宽带（比如vultr的1Gbps），10Mbps/8=1.25兆宽带（比如DGCHost） 【问题1】一个主流的vps，5美元每月，搭建的vpn可以多少个人一起用？是不是独立ip？——独立ip应该只有一个，可以用端口来共享。 【问题2】买virmach，还是digitalocean，还是？——最好的三家是vultr、linode、digitalocean。digitalocean同等配置的运存最少；linode输入带宽40G输出带宽1G，输入带宽比其他家多很多，日本的近； 【问题3】除了服务器影响vpn速度，vps的配置会不会影响？——服务器地址影响最大，最好选香港、新加坡、日本的，其次vps的带宽影响多用户数据传输量。 【问题4】防DDOS有没有必要，除了virmach、1ozoom其他的有没有防？——不清楚，好像也只有virmach有提到，既然三大家都没提这回事，就不管了。 【问题5】500G每月够不够用？——测试virmach，十多个人用一个月才用了25G，但是速度真心慢。 【问题6】ubuntu和centos哪个搭建vpn好？——ubuntu好，据说比较人性化。centos在配置多用户端口后，还要把创建的端口加入防火墙的白名单，否则其他端口不能科学上网。 【问题7】加密方式哪种好aes-256-cfb、aes-256-gcm、rc4-md5？用的最多的是aes-256-cfb，直接从众吧。 【问题8】加速用谷歌BBR还是锐速？——两个要自己测试。锐速有内核不匹配的问题，谷歌加速安装简单。 linode平、下载、上传：16、2.02Mbps、1.99 ubuntu1127平、下载、上传：17、2.06、1.92 Virmach，用达拉斯 vultr，日本140，新加坡220-400，硅谷280，洛杉矶350， linode，350 hostens，年29.32欧元，231元，优惠吗bookworm DigitalOcean，月5——有学生优惠 virmach，SSD512含DDOS，优惠码LEB30，年17.5，人民币116元。SSD256，优惠码zhujiceping25，9.37USD，即62元。 vultr，只剩每月5 搬瓦工，只剩每月5，年47，有一个V3是年28，优惠码 digitalocean，月5 hostUS，月2，年16是普通的不是KVM host1plus，月6 AlphaRacks，月5差 pzea，月10 linode，月5 iozoom，月5——答主在用 Vultr搭建vpn教程现有 5$配置降价为 2.5$每月的正确做法： 1.后台新建一个快照2.将当前 IP 进行保留3.将 5$机器删除4.重新开一台 2.5$机器，系统选择刚创建的快照， IP 选择刚保留的 IP ，最后删除预留 IP5.大功告成，数据没有丢失， IP 没有变化，简单省事。详情见：Vultr:原5$套餐降级2.5$的正确做法 Vultr保留IP 套餐降级的方法 所用配置：电脑Mac pro 2015，Vultr日本服务器，开了两台主机分别测试ubuntu14.04 X64系统安装谷歌BBR加速、 centos7系统安装锐速加速 参考教程： Vultr优惠链接https://www.vultr.com/?ref=7272972 Vultr官网 登录后 注意： ①、Vultr的消费方式，是先充值后消费，至少充值10美元。每月月结日（好像是月底）扣费。 ②、paypal支持储蓄卡、信用卡，相当于是中国的支付宝，很多购物网都可以用。 ③、Vultr都是按小时计费。如果选的是$5每月的服务器，搭建主机后按0.007$/小时计费，每月最多消费0.007*30*24 ≈ $5 ④、搭建主机后，停用、或启用都会扣费，只有把主机删除了才停止扣费。 ⑤、删除主机后，可以随意重装cenos、ubuntu等系统，重新选择机房服务器地址。 ⑥、搭建多个主机，计费会按每台主机0.007$/小时累加。这里要特别注意，废弃的主机一定要删掉，不然会继续计费。 点击pay with paypal后进入官网，点击“创建账户”，然后填写个人信息。 付款完成后，会跳转到以下页面。或者点击左侧Billing，然后点击加号。 配置主机，这里选择Centos系统。 点击Deploy Now后，如果显示账号没有验证，会出现下图。点击Click here to send a verification e-mail，然后到注册邮箱去验证。 等待系统安装，大约2-5分钟（我的用了2分钟），安装完成后，Status栏会显示为绿色的Running 点击你的主机名字如99-one，进入下图，会用到的参数有IP Address、Password ssh root@45.76.104.195，用root权限连接主机 如果输入后没有反应，可能是连接超时，可以在终端里输入ping 你的ip看有没有time= 多少 ms出现，如果没有很有可能这个ip被墙了，要删掉主机，需要删除主机重新安装。 注意：Vultr的主机新建5分钟后才能删除。 方法一（1-6步）：失败了，在多用户配置的时候失败ssh root@207.246.102.156 提示是否继续，输入yes 接着在Vultr复制密码粘贴过来 1、VPS可以先升级，约5分钟1yum -y update 2、有些VPS 没有wget，这种要先装1yum -y install wget 3、 安装进入远程服务器后，按顺序依次执行下面的命令（注意一条一条执行，不要一次性全复制进去）。第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令。 以下，完成了服务器端Shadowsocks的安装，并将其加入开机启动。 wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh chmod +x shadowsocks-go.sh ./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log 按任意键，会自动开始安装ss，安装完如下图。 注意：用文档保存、或图片保存下图信息。 4、客户端设置打开客户端效果图如下：把第4步提供给你的服务器地址密码等信息填入即可，注意address后面冒号后是端口号。 配置后即可科学上网。 5、进阶：多用户配置 vi /etc/shadowsocks/config.json 然后按键盘上的i，即可进入编辑模式。 修改后，按下esc，然后键盘输入:wq保存文件并退出vi 。 PS：如果输入:q!，是不保存文件并退出vi 单用户配置 {“server”:”207.246.102.156”,“server_port”: 5566,“local_port”:1080,“password”:”Qq112233”,“method”:”aes-256-cfb”,“timeout”:600} 多用户配置。其中&quot;13839&quot;:&quot;abcde1&quot;，13839是端口，abcde1是密码。 1234567891011121314&#123; &quot;server&quot;:&quot;207.246.102.156&quot;， &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;: &#123; &quot;8381&quot;: &quot;foobar1&quot;, &quot;8382&quot;: &quot;foobar2&quot;, &quot;8383&quot;: &quot;foobar3&quot;, &quot;8384&quot;: &quot;foobar4&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false &#125; 6、设置防火墙yum install net-tools，安装提示时输入y netstat -antu，可以查看各个端口的运行情况 用以下方法，把我们自定义的端口加入防火墙白名单： 123456firewall-cmd --zone=public --add-port=9001/tcp --permanent # 开23331 TCP端口firewall-cmd --zone=public --add-port=9001/udp --permanent # 开23331 UDP端口firewall-cmd --zone=public --add-port=9002/tcp --permanent # 开23333 TCP端口firewall-cmd --zone=public --add-port=9002/udp --permanent # 开23333 UDP端口firewall-cmd --reload # 重载配置iptables -L -n # 查询防火墙规则 Vultr最新促销活动：推特关注送3刀，蚊子再小也是肉啊操作非常简单，只需4步即可，你获得赠送后如果觉得不爽，可以随时取消关注嘛，还是那句话，蚊子再小也是肉啊，能省一块是一块。。。。 点击网址：https://my.vultr.com/promo/ 验证您的Twitter帐户并获得1美元的信用 - 验证将允许访问其他Twitter宣传！ 在Twitter上关注@Vultr并获得$ 1的信用！ 关于Vultr，并获得$ 1的信用！ 依次点击网址及Vultr上的三个推特操作按钮即可，是不是很简单呢？！就这样3美元到手了，还不赶紧试试看啊！效果如下： 【bug】使用Vultr的Server Reinstall，重启主机后报错——解决ssh登录Host key verification failed使用SSH登录某台机器，有时因为server端的一些变动，会出现以下信息： @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host is50:e6:cb:58:bc:b7:a3:f6:e8:8f:46:a7:c1:5f:c2:df.Please contact your system administrator.Add correct host key in /home/cobyeah/.ssh/known_hosts to get rid of this message.Offending key in /home/cobyeah/.ssh/known_hosts:7RSA host key for 192.168.0.4 has changed and you have requested strict checking.Host key verification failed. （此处先不提及原理，只讲处理方法，需要了解原因的请留言或找其他资料） 这时候的处理方法，有3种： 删除提示信息中，对应的行数，例如上例，需要删除vi /home/cobyeah/.ssh/known_hosts文件的第7行。 删除整份/home/cobyeah/.ssh/known_hosts文件。 修改/etc/ssh/ssh_config文件的配置，以后则不会再出现此问题StrictHostKeyChecking noUserKnownHostsFile /dev/null 【bug】vi /etc/shadowsocks.json打开文件，用i进行编辑后，不能删除、而且上下键打出来变成A和B按住esc+shift，连续按两下z，可以退出vi模式。 sudo apt-get install vim，因为缺省是安装的不完全vim，用这条命令补全。 方法二：失败了，单用户科学上网失败ssh root@45.77.183.251 12345678&#123; &quot;server&quot;:&quot;45.77.183.251&quot;, &quot;server_port&quot;:5566, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;Qq112233&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; ！！失败了，教程地址：http://hunao.info/2016/05/30/%E6%95%99%E4%BD%A030%E5%9D%97%E8%BD%BB%E6%9D%BE%E6%90%9E%E5%AE%9A%E4%B8%80%E5%B9%B4%E7%9A%84vps%E5%92%8Cshadowsocks/?nsukey=eF8UUR%2BbN3WQCywYoNqb%2Fj9ojBpgiayFKkF4U7f%2F7QXUgM1%2FshY8doiDbvadPOqtsDocFicB6sHsEG5zwnEd8V8l%2FwXlp8KAD4rpBeA1%2BHIc3sFILDXhdvgD2BmEOFfWXpG%2FV5i3rL28oXmtqApTv%2FPRjGB1%2FtKqF1nsSVPiX8jFZrHznYa6tKg26fPzyIO%2FFcH1I87jsC%2FZO8iGJ%2FbVbQ%3D%3D方法三：成功，ubuntu16.04 X64和centos7多用户配置科学上网！！成功了多用户https://teddysun.com/342.html系统支持：CentOS 6，7，Debian，UbuntuShadowsocks 服务端大体上有 4 种版本，按照程序语言划分，分别为 Python ，libev ，Go ， Nodejs ，目前主流使用前 3 种。 日期：2017 年 11 月 28 日 默认配置： 服务器端口：自己设定（如不设定，默认为 8989）密码：自己设定（如不设定，默认为 teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-gcm）备注：脚本默认创建单用户配置文件，如需配置多用户，安装完毕后参照下面的教程示例手动修改配置文件后重启即可。 2017.12.17新get到的点：系统：只推荐Ubuntu 16.04 x86_64 在linux如果编辑文件遇到报错，无需纠结，按E键继续编辑。 Ctrl+Insert，从VPS里复制文字出来到你的电脑。mac的insert是fn+enter。 Shift+Insert，把你电脑里的文字粘贴进入VPS里。 极力推荐端口：80、443 端口官方文档用8381、8382、8383、8384 协议推荐：auth chain b，非ios或macos设备则用auth chain d 加密推荐：chacha20-ietf 混淆推荐：tls1.2_ticket_auth 1、使用方法：ssh root@你的ip地址，使用root用户登录 一条一条运行，以下3个命令，第3个命令要等5分钟左右： 12345wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 安装完成后，脚本提示如下： 12345678Congratulations, Shadowsocks-python server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_methodWelcome to visit:https://teddysun.com/342.htmlEnjoy it! 卸载方法（这里不需要执行）：使用root用户登录，运行以下命令： 1./shadowsocks.sh uninstall 2、单用户配置文件示例（2017 年 11 月 28 日修正）：配置文件：`vi /etc/shadowsocks.json`` 只需修改password。 修改文件后重启shadowsocks：/etc/init.d/shadowsocks restart，即可科学上网。 12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:443, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;Qq112233&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf&quot;, &quot;fast_open&quot;:false&#125; 补充：vi常用命令：删除：用ctrl+u，可以一行一行删 编辑：键盘i 保存并退出（两种方法）：①、按一下esc，输入:wq，回车；②、按住esc+shift，再按两下z 不保存退出：按一下esc，输入:q!，回车 3、多用户多端口配置文件示例（2017 年 11 月 28 日修正）：①、安装vim（vi模式下可以编辑，否则无法输入，按方向键会变成A、B字幕）：sudo apt-get install vim ②、配置文件：vi /etc/shadowsocks.json，最好先在其他文档上编辑好再粘贴进去。 只需修改port_password，即端口和密码即可，代码如下。 ③、修改文件后重启shadowsocks：/etc/init.d/shadowsocks restart 注意：重启后，一开始是不能科学上网的，要稍等3-10分钟，配置才会生效。（等待时间可以先配置好下面下载的shadowsocks客户端） 12345678910111213141516171819&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:443, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;80&quot;:&quot;123456&quot;, &quot;443&quot;:&quot;123456&quot;, &quot;8381&quot;:&quot;123456&quot;, &quot;8382&quot;:&quot;123456&quot;, &quot;8383&quot;:&quot;123456&quot;, &quot;8384&quot;:&quot;123456&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf&quot;, &quot;fast_open&quot;:false, &quot;protocol&quot;:&quot;auth_chain_b&quot;, &quot;obfs&quot;:&quot;tls1.2_ticket_auth&quot;&#125; ③、如果是Centos系统，配置多用户端口后，还要在防火墙开放端口（每个端口如下贴两行代码），才能科学上网。ubuntu系统无视这一步。123456firewall-cmd --zone=public --add-port=9001/tcp --permanent # 开9001 TCP端口firewall-cmd --zone=public --add-port=9001/udp --permanent # 开9001 UDP端口firewall-cmd --zone=public --add-port=9002/tcp --permanent # 开9002 TCP端口firewall-cmd --zone=public --add-port=9002/udp --permanent # 开9002 UDP端口firewall-cmd --reload # 重载配置iptables -L -n # 查询防火墙规则 补充：shadowsocks常用命令：启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status 4、用http://ip111.cn/测试vps状态是否科学上网，谷歌网站一行有出现ip就是可以科学上网参考网站：[https://shadowsocks.be/1.html 更多版本 Shadowsocks 服务端一键安装脚本： shadowsocks常见问题 ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）CentOS 下 Shadowsocks-libev 一键安装脚本Debian 下 Shadowsocks-libev 一键安装脚本Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu） CentOS下pip和shadowsocks的安装使用 进阶1：vultr怎么备份？用快照snapshots参考教程https://www.duoluodeyu.com/2481.html 1）进入主机，选择Snapshots栏，点击Add Snapshots按钮，输入名字新建备份。 2）如果当前ip不满意或被墙，点击新建一个ip主机，在选择页面的Server Type不是选ubuntu或centos了，而是选择Snapshot，选择上边做的那个备份，即可把旧主机的数据迁移到新主机。 进阶1：fast_open、重启自动启用shadowsocks进阶2：加速器☞ubuntu安装谷歌RRS参考网站 http://yangteng.me/blog/2017/05/03/cj879gh7m000cy2tgojdcogpz/ https://www.mostxw.com/rj/3699.html【Most图文】 https://www.youtube.com/watch?v=oYyUkkIF1p4【Most视频】 谷歌 TCP BBR先来简单说一下这个东西吧，就是Google开发的新的拥塞控制算法，据说是用在YouTube上，并且在去年9月开源并且现在已经集成到Linux 4.9-rc8之后版本 的内核中。官方论坛官方Start Guide 因此，我们这次很重要的一项步骤就是更换Linux的内核。这里要提醒的是，如果你的VPS使用的是OpenVZ的虚拟技术，是不能使用BBR的。并且，系统要求在 CentOS 6+，Debian 7+，Ubuntu 12+。 开始前先说一声，我使用的系统是Ubuntu Server 14.04 x86-64，并且使用root用户操作 1、更换Linux内核按照惯例我们先更新一下apt源：①、ubuntu系统 1apt-get update ②、如果是 CentOS 系统，执行如下命令即可升级内核： 1yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel ​ CentOS 6 的话，执行命令： 1sed -i &apos;s/^default=.*/default=0/g&apos; /boot/grub/grub.conf ​ CentOS 7 的话，执行命令： 1grub2-set-default 0 然后我们要下载Ubuntu的内核，在谷歌内核库，找到我们需要的内核文件，先下载到 /tmp 文件夹中，下面是一个指令 12cd /tmpwget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.4/linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb 然后执行安装 文件名你可以只输入前几个字母然后按tab键自动补齐 1dpkg -i linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb 装完以后，我们查看一下已安装的内核列表1dpkg -l | grep linux-image 如果列表中出现了你刚才安装的内核，那么证明已经安装成功了。 然后我们执行内核更新，完成后重启。12345update-grub## 等待输出 done 后重启系统reboot ##完成后重启，这里操作后会退出root权限需要重新登录`ssh root@你的ip地址` 重启以后，我们检查一下系统内核是否正确切换1uname -a 如果输出的结果是你刚才安装的系统内核，则表示安装成功了。 2、开启BBR分别执行下面这两条脚本 12echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf 保存生效 1sysctl -p 执行脚本 1sysctl net.ipv4.tcp_available_congestion_control 如果刚才的保存和执行脚本结果都有 bbr 那么代表你的内核已经开启了BBR 执行脚本 1lsmod | grep bbr 如果结果中有tcp_bbr ，则说明bbr已经启动。 3、检查BBR启动1、检查核心 uname -r 检查内核是不是4.10，检测后看到的是”4.10.5-1.el6.elrepo.x86_64”。 2、sysctl net.ipv4.tcp_available_congestion_control 执行后看看返回”net.ipv4.tcp_available_congestion_control = bbr cubic reno” 3、sysctl net.ipv4.tcp_congestion_control 看到返回值”net.ipv4.tcp_congestion_control = bbr” 4、sysctl net.core.default_qdisc 查看返回值”net.core.default_qdisc = fq” 5、lsmod | grep bbr 然后可以看到有BBR信息。说明安装成功了。 这样，在安装完毕BBR之后，我们去建站等用途的时候，应该是速度有提高的。 3.进阶3：加速器☞centos安装锐速破解版！！失败，以下方法提示“没取到锐速版本”3.1更换CentOS内核(Debian跳过此步骤): 1rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force 查看是否成功: 1rpm -qa | grep kernel 重启: 1reboot 查看当前内核: 1uname -r 3.2 安装锐速 1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh 可能会提示内核版本问题，选择一个最接近的版本即可 如需要卸载锐速: 1chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f ！！成功——以下方法，一条命令搞定参考链接： https://github.com/91yun/serverspeeder 特别说明另外：重要的事情说三遍！！！ 锐速不支持Openvz！！！锐速不支持Openvz！！！锐速不支持Openvz！！！ 你可能需要： 如果你不知道你的机子到底是不是Openvz，请食用《教程：一键检测VPS是Openvz还是KVM还是Xen》 如果你的内核不对，是Centos的话请食用《教程：CentOS更换内核，提供锐速可用的内核下载》。debian和ubuntu我不熟，暂时还没一键包，请自行百度google。。 如果你嫌麻烦，只是想找个好用的SS，嫌麻烦又不想花太多钱，你可以和我合租我的自用精选线路。。。想租SS的进 如果你想知道一些服务器是否适合你，请食用 各种评测报告。我每天都会把我尝试的一些vps评测报告发出来，大家可以收藏好本站，及时关注。 锐速破解版安装方法：——！！一条命令搞定1wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh 锐速破解版卸载方法：1chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f 锐速破解版功能： 如果内核完全匹配就会自动下载安装。 如果没有完全匹配的内核，会在界面提示可选内核，可以手动选个最接近的尝试 自动下载授权文件 自动修改配置文件 已chattr +i /serverspeeder/etc/apx*禁止修改配置文件，可以不用加hosts了 目前只支持CentOS，ubuntu和debian。如果有其他系统支持，可以到91yun.org我的博客手动下载其他系统的安装包 进阶：重装系统 测速1、命令测速1curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python - ①、centos+锐速的方案速度很慢， 用深圳罗湖图书馆的烂网络，下载124Mbit/s，上传78Mbit/s 用联通4G，下载301Mbit/s，上传166Mbit/s ②、ubuntu+谷歌BBR的方案速度很快， 用深圳罗湖图书馆的烂网络，下载2228Mbit/s，上传2008Mbit/s 用联通4G，下载2585Mbit/s，上传1802Mbit/s ③、centos重装成ubuntu，还没安装加速器： 用深圳罗湖图书馆的烂网络，下载287Mbit/s，上传160Mbit/s 安装谷歌BBR加速器后，速度变慢： 用深圳罗湖图书馆的烂网络，下载6Mbit/s，上传146Mbit/s 2、视频测速https://www.youtube.com/watch?v=ss7EJ-PW2Uk&amp;t=1288s 以下全部用联通4G手机卡测试，mac电脑，vultr，自动、晚上10：30测试、vultr的日本服务器： 500（virmach） 3500，掉线一次（linode） 1000-1600、1100、1500（ubuntu） 1200、1000-1800、1200（centos） 480p、晚上12点测试、vultr的日本服务器： 1000（virmach） 10000（linode） 3500、2000（ubuntu） 650（centos） 480p、晚上01:30点测试、vultr的日本服务器：ubuntu安装谷歌BBR后 500（virmach） 5000（linode） 14000（ubuntu） 3000（centos） 480p、晚上02:00点测试、vultr的日本服务器：centos安装锐速后 500（virmach） 9000（linode） 17000（ubuntu） 17000（centos） 1128： 480p、晚上21点测试、vultr的日本服务器： 150（virmach） 2000（linode，ping450） 2000（ubuntu，ping450） 3500（centos，ping500）","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"科学上网","slug":"科学上网","permalink":"http://yoursite.com/tags/科学上网/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"wx-page-循环wx:for一行显示两个商品的wxml和css","slug":"5 微信小程序wx-xx/wx-page-循环wx:for一行显示两个商品的wxml和css","date":"2018-01-07T16:10:00.000Z","updated":"2018-01-14T08:19:19.000Z","comments":true,"path":"posts/f342d2d/","link":"","permalink":"http://yoursite.com/posts/f342d2d/","excerpt":"","text":"一、案例1成功wxml 1234567&lt;view class=&quot;items&quot;&gt; &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot;&gt; &lt;image src=&apos;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&apos;&gt;&lt;/image&gt; &lt;view&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt; &lt;view&gt;&#123;&#123;item.price&#125;&#125;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; js 123456789.items &#123; display: flex; flex-flow: row wrap; justify-content: center;//可删，用于居中&#125;.item &#123; width:49%; margin: 0 auto;//可删，用于居中&#125; 二、案例2失败——不能用scroll-view把案例1最外层的view改成scroll-view，纵向scroll-y或横向scroll-x 1234567&lt;scroll-view class=&quot;items&quot; scroll-y&gt; &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot;&gt; &lt;image src=&quot;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text&gt;&#123;&#123;item.price&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/scroll-view&gt; 分析：如果按案例1的做法，应该用scroll-x，但是view和scroll-view原理不同，同样设置wrap多行，可能view的多行是往下堆砌，而scroll-x是往右堆砌、scroll-y是向下堆砌但又只能显示一列。 所以，scroll-x和scroll-y都没法实现『按行排列+多行排列』，即flex-flow: row wrap;或分开写flex-direction: row; flex-wrap:wrap; 。 三、案例3——能不能在wx:for上加一层navigator1、失败123456789&lt;view class=&quot;items&quot;&gt; &lt;navigator url=&apos;../p_goods/p_goods&apos; &gt; &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot;&gt; &lt;image src=&quot;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text&gt;&#123;&#123;item.price&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/navigator&gt;&lt;/view&gt; 2、成功-改变class=”items”的位置1234567&lt;navigator class=&quot;items&quot; url=&apos;../p_goods/p_goods&apos;&gt; &lt;view class=&quot;item&quot; wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot;&gt; &lt;image src=&quot;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text&gt;&#123;&#123;item.price&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/navigator&gt; 3、失败-改变wx:for的位置123456789&lt;view class=&quot;items&quot;&gt; &lt;navigator url=&apos;../p_goods/p_goods&apos; wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot;&gt; &lt;view class=&quot;item&quot; &gt; &lt;image src=&quot;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text&gt;&#123;&#123;item.price&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/navigator&gt;&lt;/view&gt; 总结以上三个案例：1、用view，而不要用scroll-view。 2、要用navigator，如果有wx:for循环，则把navigator放在第二层盒子即产品盒子上&lt;navigator class=&quot;item&quot; url=&quot;../../goods/goods/id?=&quot; wx:for=&quot;&quot;&gt;，最外层大盒子用&lt;view class=&quot;items&quot;&gt;。 3、wx:for的同个标签内放商品盒子class=&quot;item&quot; PS：如果实在搞不定，也可以先用float:left。","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信页面","slug":"微信页面","permalink":"http://yoursite.com/tags/微信页面/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-system-微信小程序(视频)案例精讲-电商类：仿京东购物微信小程序（第七集）","slug":"wx-system-微信小程序(视频)案例精讲-电商类：仿京东购物微信小程序（第七集）","date":"2018-01-05T16:10:00.000Z","updated":"2018-01-17T14:47:10.000Z","comments":true,"path":"posts/24e38dd5/","link":"","permalink":"http://yoursite.com/posts/24e38dd5/","excerpt":"","text":"参考资料视频——微信小程序案例精讲-电商类：仿京东购物微信小程序（第七集） 微信小程序案例精讲（基础+菜谱精灵+今日头条+爱鲜蜂+淘票票+酷狗音乐+京东购物+拉勾网+猿题库） 对于页面布局，先用图片、文字写死，再通过js去改成变量。 好的案例视频要反复看、反复练几遍。 这个课的css命名，从布局到功能都很清晰。 一、需求描述及交互分析见课件百度附件。 二、设计思路和相关知识点1）tabbar 2）基本组件 3）wx.setStrorageSync，存储数据。 4）wx.getStorageSync，获取数据。 5）wx.navigateTo、wx.navigatoBack，导航跳转。wx.setNavigationBarTitle，新页面标题。 6）swiper 三、搜索商品首界面页面设计 1、常用css1）解决问题：如何一行放两个或三个商品？——重新整理见《循环一行显示两个商品》 width:47%;（宽度常用百分比） height:100rpx;（高度常用rpx） margin:0 auto;（居中，好像比text-align适用范围更广） 2）搜索框的文字上下位置 line-height:80rpx;（用行高能达到padding的效果） 四、搜索商品逻辑设计 1、常用css1）外边的view常用css display:flex; flex-direction:row; padding:10px;（撑开空白间隙，很好用） 2）推荐热词换行css。推荐设置好右边距、宽度，然后用float。——重新整理见《循环一行显示两个商品》 margin-right:10px; padding:1%;（或者padding-left:10px; padding:right:10px;）——如果定义宽度width，字数较多时会跑出来。 float:left;（因为微信有rpx，所以用float也能大小屏幕自适应） 也可以先设置右边距、宽幅，然后用 display: flex; flex-flow: row wrap;（相当于flex-direction:row; flex-wrap:wrap;） 3）新的view要清除浮动才会换行，不然会跟着上面的float clear:both; 4）hr透明度 opacity:50%; 2、逻辑1）对输入值，在系统的关键词数组里检索，看哪些是匹配的 123456for (var i = 0; i &lt; goods.length; i++) &#123; var good = goods[i]; if (good.indexOf(name) &gt; -1) &#123; result.push(good); &#125;&#125; var good = goos[i];，拿到当前系统关键词 good.indexOf(name)，0是关键词匹配，1是不匹配。 result.push(good)，如果输入词与系统关键词匹配，把系统关键词加入到result数组最右侧。 五、购物车页面设计1）布局元素都会给里外两层，外层定位如flex、margin+定总外形如height，里层定形如width、height。 六、购物车逻辑设计——重点1、初始页面时计算总价123456789101112onLoad:function()&#123; this.loadGoods();&#125;,loadGoods:function()&#123; var goods = wx.getStorageSync(&quot;goods&quot;); var totalPrice=0; for(var i=0;i&lt;goods.length;i++)&#123; var good = goods[i]; totalPrice += good.price * good.count; &#125; this.setData(&#123;goods: goods, totalPrice: totalPrice&#125;);&#125;, 1）拿到产品数组，然后计算总价。 2、单选框checkbox逻辑123456789101112131415161718checkboxChange:function(e)&#123; var ids = e.detail.value; //ids数组如[0,1,2] if(ids.length==0)&#123; this.setData(&#123;selectedAll:false,totalPrice:0&#125;); &#125;else&#123; var goods = wx.getStorageSync(&quot;goods&quot;); var totalPrice = 0; for (var i = 0; i &lt; goods.length; i++) &#123; var good = goods[i]; for (var j = 0; j &lt; ids.length; j++) &#123; if (good.id == ids[j]) &#123; totalPrice += good.price * good.count; &#125; &#125; &#125; this.setData(&#123; selectedAll: true, totalPrice: totalPrice &#125;); &#125; &#125;, 1）如果ids数组长度为零。 全选框是false，且总价为零。 2）如果ids数组长度不为零。 拿商品good做循环，对比ids数组看id是否相同，相同则计算该商品价格。通过+=依次循环合计出总价。 3、全选框checkAll逻辑12345678910checkAll:function(e)&#123; var selected = this.data.selected; var result = selected==true?false:true; //如果状态为true，点击后变为false。反之变true。 this.setData(&#123;selected:result&#125;); if (result==false)&#123; this.setData(&#123;totalPrice:0&#125;); &#125;else&#123; this.loadGoods(); &#125;&#125;, 1）全不选。 总价0。 2）全选。 重新计算，计算方法同第一步的初始计算总结。 4、加一1234567891011121314addGoods:function(e)&#123; var id = e.currentTarget.id; var goods = wx.getStorageSync(&quot;goods&quot;); var addGoods = new Array(); for(var i=0;i&lt;goods.length;i++)&#123; var good = goods[i]; if(good.id == id)&#123; good.count = good.count + 1; &#125; addGoods.push(good); &#125; wx.setStorageSync(&quot;goods&quot;, addGoods); this.loadGoods();&#125;, 1）拿到产品id，如果产品id等于当前点击位置的产品id，则数量count加一/减一 2）替换缓存数组goods，把点击位置的产品push进去 3）按步骤一的方法重新计算总价 5、减一1234567891011121314151617minusGoods:function(e)&#123; var id = e.currentTarget.id; var goods = wx.getStorageSync(&quot;goods&quot;); var addGoods = new Array(); for (var i = 0; i &lt; goods.length; i++) &#123; var good = goods[i]; if (good.id == id) &#123; var count = good.count; if(count &gt;= 2)&#123; good.count = good.count - 1; &#125; &#125; addGoods.push(good); &#125; wx.setStorageSync(&quot;goods&quot;, addGoods); this.loadGoods();&#125; 1）跟加一唯一的不同是，多了一个if判断，当产品数量大于2才执行减一。 七、我的订单页面设计八、优惠券设计1、逻辑1）用currentTab来控制点击标签改变颜色，先设定三个标签的currenTab的值分别为0、1、2。 1class=&quot;&#123;&#123;currentTab==0?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; 2）点击标签时，触发事件，在js改变currenTab的下标值index，此时currentTab=index实现标签变色。 3）点击时，js也改变优惠券数组，由loadCoupons(0)变成loadCoupons(index)。 2、问题：wxml中的data-current=”0”有什么用？3、两种返回数据的方法1）this.satData({}) 2）result = []; return result; 【一】套路总结：1、js放置测试初始数据； 2、wxml布局； 3、wxss添加一点样式； 4、js写变化逻辑；——即『拿数据』 5、把wxss里的测试数据，替换成js里的变量——即『显示数据』 其中，第四步，js逻辑即拿数据是核心。而且除了逻辑设计外，还隐藏后端api设计这一步。 所以，有时看起来好像很简单，但是『后端api设计+前后端数据连接+js逻辑设计』经常比预想要多花几倍时间。 因此，css不能纠结，更多时间应该花在练习刚刚提到的『』。 一开始做，担心代码重复很丑，担心css命名不好辨认或重复，担心做某一部分时功能做的不全，一系列担心。但是2018.01.04真正进入状态后，发现根本就没有资格担心这些东西，因为最最重要的事情是把东西做出来，这样才会有干劲。 这篇教程的『小刚老师』也是，『吉米』也是，『从0到1的作者』也是，都是『先wxml框架、再wxss穿衣服、最后来点js动作』，也就是说，先把静态页面先做出来，图片、图标全部不考虑变量直接粘贴现成的，把作品做出样子后，就能专注于去改每一部分，吉米做的网站搭建教程就是一个最好的例子，简单的现成静态图片却能搭建出成熟网站的样子。 【二】魔改练习法： 如果看完不做第二天甚至当天就会全部忘记。 如果看完按照教程做会自己为搞懂逻辑，而实际上自己离开这个案例就不会用了。 魔改的好处： ①、按照教程代码，在自己的作品上立即呈现效果，有成就感； ②、按照教程练习逻辑，理一理思路； ③、根据自己的需求去改，这时才会根据自己的需要去思考怎么修改这个功能，过程中就能看清楚自己真正看懂的是哪部分代码，看不懂的又是哪一部分。 #【三】问题 1、数据传递方法1）同个js页面，不同function的数组变量传递 最常用的是this.data.xx，传递变量。如果代码结构相同，重新执行function可以用page.function()。 2）不同js页面，传递数组、传递散列对象 数据页，关键代码JSON.stringify(this.data.testData) 12345678data: &#123; testData:&#123;name:&apos;我是name&apos;, extra:&apos;我是extra&apos;&#125; &#125;, next: function(e)&#123; wx.navigateTo(&#123; url: &apos;/pages/test/test?extra=&apos;+JSON.stringify(this.data.testData) &#125;) &#125; 接收页，关键代码JSON.parse(e.extra) 12345678910data:&#123; testData: null &#125;, onLoad:function(e)&#123; console.log(&quot;接收到的参数是obj=&quot;+e.extra);//此处打印出来的仅仅是字符串 需要解析，解析如下 var testData = JSON.parse(e.extra);//解析得到对象 this.setData(&#123; testData: testData &#125;)&#125; 3）拿到api回调函数返回的数据。（success function等回调函数是不能return返回数据的，可以通过缓存的方法） 在success function里用wx.setstorageSync，在api请求外调用wx.getstorageSync，做一些js算法运算输出新数组。详见luccak项目，p_search的loatTips()、loadTitles()两个加载数据的函数。 123456789101112131415161718192021loadTips:function(e)&#123; var that = this; var word = []; wx.request(&#123; url: &apos;https://luccake.top/api/v1/products&apos;, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; wx.setStorageSync(&apos;word&apos;,res.data.data) &#125; &#125;) var word = wx.getStorageSync(&apos;word&apos;); var out = []; for(var i=0; i&lt;10; i++)&#123; var temp = (Math.random()*word.length)&gt;&gt;0; out.push(word[temp]); &#125; this.setData(&#123;out: out&#125;) console.log(&apos;cccfd&apos;,out)&#125;, 4）wxml页面拿到js页面的数据，特别是动态改变的数据？ ①、实测发现，必须在data里定义变量a，才能在wxml调用。 ②、用同步this.setData()，或异步that.setData()，把变量a由初始值改为新值。 12345678910Page(&#123; data:&#123; dynamic_name: &apos;&apos;, //『重要步骤』data的初始值，可用来给wxml提供初始状态。 &#125;, dynamicInput:function(e)&#123; var name = e.detail.value; //根据具体案例，拿到动态输入的文字 var dynamic_name = &apos;&apos; //引入dynamic_name this.setData(&#123;dynamic_name: name&#125;) //『重要步骤』把dynamic_name由初始值改为新值 &#125;&#125;) 5）wxml传数据如id等给js。 在标签里加上data-id=”“。 2、wx:for循环怎么控制个数在wxml用wx:if=&#39;false&#39; 123&lt;view wx:for=&quot;&#123;&#123;word&#125;&#125;&quot; wx:if=&apos;&#123;&#123;index&lt;10&#125;&#125;&apos; class=&quot;tip&quot; &gt; &#123;&#123;item.title&#125;&#125;&lt;/view&gt; 3、typeof()检测数据类型console.log(&#39;类型1&#39;, typeof (utf)) 4、一般情况下，小程序的utils这个文件夹下，我们可以把本地的数据写进去，封装成.js文件，提供对外暴露的接口，然后读取本地数据，这些在上一篇博客中有详细介绍。我们最后说到写好的本地数据可以另一个页面读取：5、wx:for怎么写在js？js拿api数组？wx.request异步请求不能返回数据，怎么处理？异步接口怎么返回数据给其他函数？ 微信小程序 wx.request(接口调用方式)详解及实例，有require写法。但不能解决当前问题。 好像js里返回api数组不是很容易实现。。 用缓存 1&lt;view bindtap=&apos;yy&apos;&gt;测试测试&lt;/view&gt; 12345678910111213141516171819202122tt:function(e)&#123; var that = this; //保存this的数据 wx.request(&#123; url: &apos;https://luccake.top/api/v1/products&apos;, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; that.setData(&#123; goods: res.data.data, &#125;) wx.setStorageSync(&apos;e&apos;,res.data.data) &#125; &#125;)&#125;,test:function()&#123; this.tt(); var goods = wx.getStorageSync(&apos;e&apos;); console.log(&apos;测试&apos;,goods); var qq = goods.title; console.log(&apos;qq&apos;,qq)&#125;, 12 把缓存数据，用for循环和setData输出，return返回 1&lt;view bindtap=&apos;test&apos;&gt;测试测试&lt;/view&gt; 123456789101112131415161718192021222324test:function(e)&#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/products&apos;, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; &#125;, success: function (res) &#123; that.setData(&#123; goods: res.data.data, &#125;) wx.setStorageSync(&apos;e&apos;,res.data.data) //最最关键的一步，保存到缓存 &#125; &#125;) var goods = wx.getStorageSync(&apos;e&apos;); //从缓存拿数组 var titles = []; for (var i = 0; i &lt; goods.length; i++) &#123; //循环api数组拿到titles数组 var title = goods[i].title; titles.push(title); &#125; this.setData(&#123; titles: titles &#125;) //保存titles数组 console.log(&quot;测试&quot;,goods) return titles //返回titles &#125;, 12 6、微信小程序中使用Promise进行异步流程处理 【四】魔改1、搜索页1.1 正在做1）把检索关键词的功能先拿开，bindblur=”searchGoods” 123456789101112131415161718loadGoods: function () &#123; var goods = [&apos;奶粉成人&apos;, &apos;奶粉3段&apos;, &apos;奶粉1段&apos;, &apos;奶粉2段&apos;, &apos;奶粉京东自营&apos;, &apos;奶粉4段&apos;, &apos;奶粉盒&apos;, &apos;咖啡机&apos;, &apos;咖啡杯&apos;, &apos;咖啡豆&apos;, &apos;咖啡伴侣&apos;, &apos;咖啡机家用&apos;]; return goods;&#125;,searchGoods: function (e) &#123; var name = e.detail.value; var goods = this.loadGoods(); var result = new Array(); if (name != &apos;&apos;) &#123; for (var i = 0; i &lt; goods.length; i++) &#123; var good = goods[i]; if (good.indexOf(name) &gt; -1) &#123; result.push(good); &#125; &#125; &#125; this.setData(&#123; result: result &#125;);&#125;, 2）拿掉以前做的wxml搜索框和css。 3）搜索结果想要有返回按钮，所以创建新的pages/p_result。把wxml和css转移过去，并navigateTo跳转。 4）p_search传递cakes数组给p_result？用JSON.stringfy(arr)和JSON.parse(arr)。 5）p_search输入框复制到p_result，并引用js和wxss。 【问题】引用js失败，暂时复制search的js。 6）p_search传数据给p_result，把原来传递数组cakes，改成传递输入名称inputValue。搜索功能直接放在p_result页面做。 7）p_result增加所有、价格、时间排序按钮及功能。 8）想把p_result整合到p_search。包含五个模块： ①、输入框name；②、历史name；③、热词tips④、下拉匹配结果result；⑤、显示商品； 1234567①一直显示if 输入为空name=&apos;&apos; 显示②③else 输入不为空!name=&apos;&apos;（当①输入name、或②③④改变name） 显示④ 按回车后，显示⑤end ！！！不用那么复杂 1、②③④⑤都是靠wx:for循环显示出来的，如wx:for=”“只要在js页把cakes数组清空，wxml就不会显示。 2、用&lt;block wx:if=&quot;false&quot;&gt;来判断是否显示，其他几个同理。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;block wx:if=&quot;&#123;&#123;result.length &gt; 0&#125;&#125;&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;result&#125;&#125;&quot;&gt; &lt;view class=&quot;item&quot;&gt; &lt;view class=&quot;name&quot; bindtap=&quot;clickTitle&quot; data-title=&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt; &lt;view class=&quot;hr&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;/block&gt;&lt;/block&gt;&lt;block wx:else&gt; &lt;block wx:if=&quot;&#123;&#123;cakes != &apos;&apos;&#125;&#125;&quot;&gt; &lt;view class=&apos;tab&apos;&gt; &lt;view class=&quot;&#123;&#123;currentTab==0?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; data-id=&quot;0&quot; bindtap=&apos;switchAll&apos;&gt;所有&lt;/view&gt; &lt;view class=&quot;&#123;&#123;currentTab==1?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; data-id=&quot;1&quot; bindtap=&apos;switchPrice&apos;&gt;价格&lt;/view&gt; &lt;view class=&quot;&#123;&#123;currentTab==2?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; data-id=&quot;2&quot; bindtap=&apos;switchTime&apos;&gt;时间&lt;/view&gt; &lt;view class=&quot;&#123;&#123;currentTab==3?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; data-id=&quot;3&quot; bindtap=&apos;switchTest&apos;&gt;筛选&lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;hr&quot;&gt;&lt;/view&gt; &lt;scroll-view class=&apos;p_search-body&apos; scroll-y&gt; &lt;navigator url=&apos;../p_goods/p_goods&apos; wx:for=&quot;&#123;&#123;cakes&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&apos;p_search-box&apos;&gt; &lt;image src=&quot;&#123;&#123;item.photos[0].avatar.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;view class=&apos;p_search-post&apos;&gt; &lt;text class=&apos;title2&apos;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text class=&apos;description&apos;&gt;&#123;&#123;item.description&#125;&#125;&lt;/text&gt; &lt;text class=&apos;price&apos;&gt;¥ &#123;&#123;item.price&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/navigator&gt; &lt;/scroll-view&gt; &lt;/block&gt; &lt;block wx:else&gt; &lt;view class=&quot;hotSearch&quot;&gt; &lt;view class=&quot;title&quot;&gt; &lt;view class=&quot;left&quot;&gt;热门搜索&lt;/view&gt; &lt;view class=&quot;right&quot;&gt;换一批&lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;tips&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;word&#125;&#125;&quot; bindtap=&apos;clickTip&apos; data-id=&quot;&#123;&#123;item.id&#125;&#125;&quot; data-title=&quot;&#123;&#123;item.title&#125;&#125;&quot;&gt; &lt;view wx:if=&apos;&#123;&#123;index&lt;10&#125;&#125;&apos; class=&quot;tip&quot; &gt; &#123;&#123;item.title&#125;&#125; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/block&gt;&lt;/block&gt; 9）p_search排序 10）p_search历史输入name，数组顺序颠倒用arr.reverse() 11）p_search换一批。 js随机输出数组的方法： 12345678910111213aaa:function(e)&#123; //原数组 var arr = [0,1,2,3,4,5,6,7,8,9,10,11]; //输出数组 var out = []; //输出个数 var num = 5; while(out.length &lt; num)&#123; var temp = (Math.random()*arr.length) &gt;&gt; 0; out.push(temp); &#125; console.log(&apos;ccc&apos;,out)&#125;, 12）p_search按钮-清除输入历史 13）p_search按钮-✘，清除输入框并退回到初始页面 14）p_search边输入文字边匹配词库的bindinput效果。 js如何监听回车键搜索事件？——官方文档bindinput键盘输入时触发事件。以及bindconfirm按下回车键/点击完成按钮触发事件。 123456&lt;block wx:if=&quot;&#123;&#123;name == &apos;&apos;&#125;&#125;&quot;&gt; &lt;view class=&quot;btn1&quot; bindtap=&quot;resetSearch&quot;&gt;取消&lt;/view&gt;&lt;/block&gt;&lt;block wx:else&gt; &lt;view class=&quot;btn1 btn2&quot; bindtap=&quot;searchTitle&quot; data-name=&quot;&#123;&#123;name&#125;&#125;&quot;&gt;搜索&lt;/view&gt;&lt;/block&gt; 12345.btn2&#123; background-color: red; border-color: red; color: #fff;&#125; 逻辑设计，不要在脑子里空想，越想越乱。 如下，整理出来，再去atom写。 12345678910111213141516171819202122问题1：不管有没有匹配，都只执行匹配，不执行搜索？问题2：执行搜索后，只显示匹配结果，不显示搜索结果？一、动态输入逻辑，所有条件都不执行搜索。if name为空 返回else name不为空 计算result数组 if result为空 返回 else result不为空 显示匹配的关键词，即this.setData(&#123;result:result&#125;) endend二、搜索逻辑if name为空 返回else name不为空 保存历史搜索记录 搜索、并清空热门搜索匹配resutl=&apos;&apos; 显示推荐商品（不管是否有搜索结果）end 15）【错误混乱的例子】按钮✘在input有输入时不出现的bug。 用has_input=’’或等于1，来控制按钮是否隐藏。在不同的函数里做相应的setData。 为input输入框绑定bindfocus事件，当光标聚焦时，如果name不为空则显示按钮。 12345if has_input=&apos;&apos; 隐藏按钮else has_input != &apos;&apos; 显示按钮end 16）【错误混乱的例子】p_search按钮-取消/搜索，同位置两按钮。 跟步骤15的has_input一样，直接在wxml加上has_input的判断。 17）【错误混乱的例子】按钮-搜索，点击可以搜索。想通过input框的bindconfirm功能得到搜索结果，但是点击按钮发现没有数据传递怎么办？ 在dropdown的函数即bindinput对应的函数里先定义wx.setstorageSync，拿到输入的数据e，然后在input的bindtap事件上引入数据，调用input框的函数。 18）【错误混乱的例子】按钮-取消，点击可以返回搜索的产品页面。 1234567891011拿到步骤17中定义的输入值缓存e在wxml页if name=&apos;&apos; 显示按钮else当按下按钮时，拿到步骤17设置的输入缓存eif name=&apos;&apos; this.setData(&#123;result:&apos;&apos;, cakes:&apos;&apos;&#125;)end 19）【15-18逻辑重新整理】【问题】三个按钮搞不清楚逻辑，分不清楚哪些逻辑在wxml判断，哪些在js判断。。。。 案例用的主要变量：name输入内容、result匹配输入内容、cakes商品、searchData历史搜索、out热门搜索。 1、在输入框bindinput的函数里，按问题1数据传递4的方法（wxml调用js），设置 12345678910Page(&#123; data:&#123; dynamic_name: &apos;&apos;, //『重要步骤』data的初始值，可用来给wxml提供初始状态。 &#125;, dynamicInput:function(e)&#123; var name = e.detail.value; var dynamic_name = name; this.setData(&#123;dynamic_name:dynamic_name&#125;) &#125;&#125;) 2、在wxml用dynamic_name是否为空，判断三个按钮的显示 3、搜索按钮、✘按钮，设置成鼠标点击时显示。输入框加入bindfocus=”showIcon” 123showIcon:function(e)&#123; this.setData(&#123;dynamic_name:1&#125;)&#125;, 12 4、三个按钮js事件，分别设置this.setaData，修改name、result、cakes、searchData、out，这些wxml调用的数据，看是否设置为空。 20）p_search显示商品，切换样式的按钮？（用true_or_false判断，点击按钮，变量值!反转） 显示/隐藏的切换，定义一个变量x，值是true或false来判断。在js里写法this.setData({x: !x}) 21）循环商品，一行显示两个的css？——我以为我会写了，结果。。而且有两个参考模板在手，就是写不出来（注意检查是否受最外层css如小程序的page或web端的body影响）见《循环一行显示两个商品》 22）p_search价格两种排序（用true_or_false判断，点击按钮，变量值!反转） wxml 1&lt;view class=&quot;&#123;&#123;currentTab==1?&apos;select&apos;:&apos;default&apos;&#125;&#125;&quot; data-id=&quot;1&quot; bindtap=&apos;switchPrice&apos;&gt;价格&lt;/view&gt; js 12345678switchPrice:function(e)&#123; var price = this.data.price //重要的一步 this.setData(&#123;price: !price&#125;) if(price==true)&#123; var aa = &apos;price+asc&amp;q%5Btitle_or_description_cont%5D=&apos; &#125;else&#123; var aa = &apos;price+desc&amp;q%5Btitle_or_description_cont%5D=&apos; &#125; 23）p_search价格排序对应图标？ 1234567&lt;view class=&quot;&#123;&#123;currentTab==1?&apos;select&apos;:&apos;default&apos;&#125;&#125; price common1&quot; bindtap=&apos;switchPrice&apos;&gt; 价格 &lt;view class=&apos;img-pri&apos;&gt; &lt;view class=&quot;&#123;&#123;currentTab==1&amp;price==1?&apos;up&apos;:&apos;ping&apos;&#125;&#125; img1&quot;&gt;▲&lt;/view&gt; &lt;view class=&quot;&#123;&#123;currentTab==1&amp;price==0?&apos;down&apos;:&apos;ping&apos;&#125;&#125; img2&quot;&gt;▼&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 说明：class要同时满足currentTab==1&amp;price==1，才会显示up的样式。其中currentTab是触发“价格”两个字的颜色用的js变量，price是在步骤22用来判断价格是升序还是降序的变量。 25）搜索时显示随机商品推荐。要后端做api？还是在js随机？还是在wxml随机？ 26）8号welcome首页重做。 27）下拉刷新 app.json全局设置如下。dark的配置是为了下拉时显示三个点。 1234&quot;window&quot;:&#123; &quot;backgroundTextStyle&quot;:&quot;dark&quot;, &quot;enablePullDownRefresh&quot;: true&#125;, index.js 123456onPullDownRefresh: function () &#123; wx.showNavigationBarLoading();// 显示导航栏loading this.onLoad();// 调用接口加载数据 wx.hideNavigationBarLoading();// 隐藏导航栏loading wx.stopPullDownRefresh();// 当处理完数据刷新后，停止当前页面的下拉刷新 &#125;, 28）上拉加载更多http://blog.csdn.net/michael_ouyang/article/details/56846185 http://www.mntuku.cn/index.php/article/show/id-7581 第五点：下拉的逻辑，将页数设置为一，并清空msgList 内容，定位距顶部0px，最后调用加载数据的方法。第六点：上滑的逻辑，直接调用。因为定位点在scorll方法中已经赋值。 29）修改标题在json文件增加&quot;navigationBarTitleText&quot;: &quot;商品详情&quot;, 【问题】js模块化，that.setData或this.setData会报错，而且测试发现this是模块化页面的this。 30）9号完成详情页css。 item.avatar.medium.url 按钮置底导航置底http://www.wxapp-union.com/article-1029-1.html ① 、添加按钮 1234567&lt;button bindtap=&quot;add&quot; type=&quot;primary&quot; class=&quot;address-add&quot;&gt;添加&lt;/button&gt;/*添加地址按钮*/.product-btn &#123; position: fixed; bottom: 0; width: 100%;&#125; ②、给按钮上边的版块加marginbottom 123.product-detail &#123; margin-bottom: 46px;&#125; 31）随机商品api 暂时解决办法：先用products的api，在小程序的js里随机。 坏处是：对小程序影响不大，只是bug不解决在web端就没法用随机商品功能。 32）后端问题二：搜索，怎么在product里搜索category。 暂时解决办法：现在先用筛选分类的网址。 坏处是：点击首页分类图标可以进入搜索页，但是因为url不同不能排序。 32）搜索没有结果显示提示图标。7小时 逻辑：所有的显示/隐藏基本都是同理，在wxml设置条件某位为0或1，然后在js定义。 这里有点绕，多梳理几次。 123当没有搜索结果时，即cakes==[] 给一个参数cakes_data，值是0或1。在wxml当值为1时显示图标。 在js的searchTitle的函数里，获取cakes的同时设置cakes_data为1（意思是有搜索就会显示icon，同时受限于上边给的条件cakes==[]，所以只会在搜索且搜索结果为[]时显示）。 32）▲▲▲-★搜索推荐商品、详情页最后推荐商品 一开始以为如果搜索为空，用js循环为空，所以最好接api。 更好的办法，用products的api在js随机。 ①、js定义random_8函数（同loadTips函数） ②、在搜索函数searchTitle加入 ③、wxml显示 33）▲▲▲-★★首页、详情页各种按钮接入跳转链接 直接用navigator标签搞定 34）▲▲-★★资讯页面 35）▲-★★名片页的设计，参考潘鹏作品浮起的css、二维码、电话、地址 35）▲-★★★加入购物车的逻辑http://blog.csdn.net/michael_ouyang/article/details/70755892 36）▲-★★★上拉加载更多，一种是在api做好分页（分页能做但是小程序不知道怎么做），一种是按论坛教程做 37）▲-★★★收藏功能 其他1）整理手机图片等 其他2）整理小程序功能 其他3）整理浏览器收藏 1.2 待优化1）p_search页。搜索框用的search的js，和tips热门词最后用的search几乎相同，怎么写可以合并成一个。 2）p_result页。也是复制search function，去掉其中的navigateTo。 3）历史输入searchData的缓存，在四个function写入同样的代码。clickTip()、clickTitle()、searchTitle()、clickSearchData()。 整理教程跟着它分类http://blog.csdn.net/michael_ouyang/article/details/55215104小程序发布与体验1、体验版生成1）在开发者工具点击上传-填写版本如v1.0，备注随意； 2）https://mp.weixin.qq.com/登录小程序后台，点击开发管理-开发版本-提交体验版。会生成一个二维码。 2、体验版给其他人使用1）小程序后台-用户身份-成员管理-添加成员。 添加后就可以在其他手机上体验未审核未上线的小程序啦。如果没有设置，会提示『没有体验权限』。","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"tool-mobilde phone-手机恢复出厂设置要备份什么？","slug":"6 tool-xx工具/tool-mobilde phone-手机恢复出厂设置要备份什么？","date":"2018-01-04T16:10:00.000Z","updated":"2018-01-14T07:39:07.000Z","comments":true,"path":"posts/74ddd2a3/","link":"","permalink":"http://yoursite.com/posts/74ddd2a3/","excerpt":"","text":"##1、通讯录、短信、通话记录 备份在qq同步助手 ##2、照片、视频（手机和微信）手机自带DCIM图片文件夹Tencent/MicroMsg/WeiXin是保存的微信图片和视频Tencent/MicroMsg/Download 3、微信聊天记录手机与mac连接同个wifi或热点，用mac端微信工具备份 4、app备份在qq同步助手，就知道以前用过哪些app 5、下载类UC浏览器、chrome浏览器百度云盘 ##6、音频音乐 网易云、酷狗、酷我、QQ音乐，下载的文件夹 7、出行百度地图收藏在账号 8、输入法登录备份自己的设置","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"手机","slug":"手机","permalink":"http://yoursite.com/tags/手机/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-atom-(视频)atom编辑器技巧","slug":"6 tool-xx工具/tool-atom-(视频)atom编辑器技巧","date":"2018-01-02T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/3c2bef84/","link":"","permalink":"http://yoursite.com/posts/3c2bef84/","excerpt":"","text":"atom在默认配置下， HTML, XML, HAML, CSS, SASS/SCSS, LESS, JavaScript, Python, Ruby 文件可以直接使用Tab键，而在其他类型文件中使用ctrl+e作为快捷键。 新标签打开未编辑的页面：双击一、atom的emmet输入怎么才能支持wxml文件？并设置快捷键。1、支持html以外的文件如wxml，设置如下：1）ctrl+,打开atom设置-packages-找到ement-settings-view code打开emmet的代码。 2）打开keymaps/emmet.cson，第二行的&#39;ctrl-e&#39;: &#39;emmet:expand-abbreviation&#39;默认快捷键是ctrl+e，可以改成`’tab’: ‘emmet:expand-abbreviation’等。 3）测试发现虽然tab方便，但是被占用后无法使用原来的功能。最后还是选用ctrl+e。 2、更简单粗暴的方法1）打开wxml等文件后，在atom的右下角改成用HTML模式编辑，就能正常使用emmet功能。 无需按上面的方法修改快捷键了。 二、快捷键：1）打开node_modules/emmet/lib/snippets.json，搜索html（大约第660行，第一次搜会搜不到，要打开其他文件再回来搜索一次），在snippets里加入自定义快捷键如下。 2）ctrl+q退出atom，重新打开测试是否生效。 注意：定义里不能用双引号，否则全部快捷输入会失效。 12345678910&quot;snippets&quot;: &#123; &quot;%&quot;: &quot;&lt;% | %&gt;&quot;, &quot;%%&quot;: &quot;&lt;%= | %&gt;&quot;, &quot;lt&quot;: &quot;&lt;%= link_to(&apos;XXXX&apos;, XXXX_path, class:&apos;btn btn-danger btn-lg&apos;) %&gt;&quot;, &quot;ltp&quot;: &quot;&lt;%= link_to(&apos;XXXX&apos;, XXXX_path, class:&apos;btn btn-danger btn-lg&apos;, method: :post) %&gt;&quot;, &quot;ltd&quot;: &quot;&lt;%= link_to(&apos;XXXX&apos;, XXXX_path, class:&apos;btn btn-danger btn-lg&apos;, method: :delete, data:&#123;confirm:&apos;确认删除？&apos;&#125;) %&gt;&quot;, &quot;ii&quot;: &quot;&lt;image src=&apos;&apos;&gt;&lt;/image&gt;&quot;, &quot;bb&quot;: &quot;&lt;button bindtap=&apos;&apos; type=&apos;&apos;&gt;&lt;/button&gt;&quot;, &quot;tt&quot;: &quot;&lt;text class=&apos;&apos;&gt;&lt;/text&gt;&quot;, &quot;vv&quot;: &quot;&lt;view class=&apos;&apos;&gt;&lt;/view&gt;&quot;, 三、快速格式化代码插件 atom-beautify1）复制别人代码的时候，快速格式化。 可以针对不同的编程语言，配置是否格式化，配置标点符号的处理、缩进等。 默认我们不去修改。 【问题】1）html文件快速格式化，每行会空两个Tab，怎么改成空一格Tab（即两个空格）？ 四、代码规范化检测插件 Linter1）先安装linter的框架。然后可以选择自己需要检测的文件类型，安装相应插件。 2）linter-eslint，是针对javascript的。 比如，针对js文件的逗号，设置是否提示报错，在写代码的过程中，如果哪行代码少了逗号，就会在行首用一个红点提示。 3）linter-其他 【问题】1）实测发现，下载的各种linter都不起作用？是不是都要手动配置？ 五、JavaScript 语法智能提示 atom-ternjs1）比如写$(this).的时候，会出现一些函数提示供选择。 2）打开任意js文件，点击工具栏的Packages-Atom-Ternjs-Configure project，需要注意的是 atom-ternjs是根据每一个项目来配置的。 因为每一个项目，想让它提示的东西可能是不一样的。 3）具体的配置选项： ecmaVersion默认6； libs一般选browser、jquery两个库； 其他配置如node、module、angular、commonjs 4）保存，点击最下边的save。 会在分支树里新建一个文件.term-project。 5）测试。 再回到js页面去写，就会出现详细的提示。非常方便。 六、快速书写代码的工具 emmet1）默认我不会做任何更改。 七、文件图标 file-icons 与行高亮 highlight-line1）file-icons，不同的文件类型，文件名前面加上不同类的图标。 可以设置only color when changed，当文件更改才显示图标颜色。 2）highlight-line，鼠标点击哪一行，就会高亮哪一行。 可以配置高亮的背景颜色。 八、代码中的颜色插件 pigments1）颜色的代码如#000、#fff，会显示出颜色。 九、对最新版本 JavaScript 的支持 language-babel1）主要是对es5、es6做一些语法的识别，做一些react.js课程的时候用到。它会对最新的js语法做高亮。 装完不用怎么过多配置。 十、更多插件与总结1）atom的编辑器插件，转到其他编辑器比如shell也是通用的。 2）可以看atom网站的下载排行。基本上我们把前面的都做了介绍。 十一、atom-wxml1）微信小程序要用到，可以让wxss文件、wxml文件代码高亮显示。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"bug-搜索gem ransack，用will_paginate分页后，输入为空时报错","slug":"2 ror-tips:bug知识点/bug-搜索gem ransack，用will_paginate分页后，输入为空时报错","date":"2018-01-02T16:10:00.000Z","updated":"2018-01-18T07:31:49.000Z","comments":true,"path":"posts/9207c6ea/","link":"","permalink":"http://yoursite.com/posts/9207c6ea/","excerpt":"","text":"[bug]搜索gem ransack，用will_paginate分页后，输入为空时报错123456789ArgumentError in Products#searchShowing /Users/apple/rails/jdstore1130/app/views/products/search.html.erb where line #19 raised:The @products variable appears to be empty. Did you forget to pass the collection object for will_paginate?Extracted source (around line #19): &lt;% end %&gt;&lt;%= will_paginate @posts %&gt; 原因：&lt;%= will_paginate @posts %&gt;位置放错。 解决办法：把&lt;%= will_paginate @posts %&gt;放在&lt;% if @products.blank?&gt;。。。&lt;% end %&gt;里面。 123456789101112131415161718&lt;% if @products.blank? %&gt; 输入为空&lt;% else %&gt; &lt;% @products.each do |product| %&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;%= link_to product_path(product) do %&gt; &lt;% if product.photos.present? %&gt; &lt;%= image_tag(product.photos[0].avatar.thumb.url, class: &quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt; &lt;% end %&gt; &lt;%= link_to(product.title, admin_product_path(product)) %&gt; ¥ &lt;%= product.price %&gt; 元 &lt;/div&gt; &lt;% end %&gt; &lt;%= will_paginate @posts %&gt;&lt;% end %&gt;","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"wx-system-蓝鸥系列《微信小程序全方位深度解析》基础知识补充","slug":"5 微信小程序wx-xx/wx-system-蓝鸥系列《微信小程序全方位深度解析》基础知识补充","date":"2018-01-02T16:10:00.000Z","updated":"2018-01-14T09:24:27.000Z","comments":true,"path":"posts/e81fc078/","link":"","permalink":"http://yoursite.com/posts/e81fc078/","excerpt":"","text":"取名字是最蛋疼的，连做视频的老师都这么说，所以更要想好每个模块class和变量命名套路。常用关键词：（定义模块）、拿到数据、显示数据 参考资料蛮牛教育、网易云课堂、百度传课，搜《微信小程序全方位深度解析》、《高级api视频教程》 蛮牛教育免费在线视频http://edu.manew.com/course/193/learn#lesson/2559，可1.5倍速。 网易云课堂免费在线视频，http://study.163.com/course/courseLearn.htm?courseId=1003283028#/learn/video?lessonId=1003973293&amp;courseId=1003283028，只有1倍速，含《高级api视频教程》。 一、视频目录组件部分从比较简单，从16课开始只记录重点。 1、小程序windows版本环境搭建2、小程序mac os版本环境搭建3、小程序入门4、目录结构及配置1）配置-debug，开发可以开着，在app.json加入&quot;debug&quot;: true 5、逻辑层注册程序、注册页面1）setData，用的非常多，把数据从逻辑层发送到视图层，同时改变this.data的值。 2）页面路由，navigator标签，或wx.navigateTo。 6、js作用域和模块化1）文件作用域。 2）js模块化，用的非常多，『用法见问题3』。 7、视图层8、数据绑定123456789101112131）wx:if，利用true和false的值做”显示“和”隐藏“的效果。**『用法见问题4』**。如果有多个用wx:if、wx:elsif、wx:else，或wx:if、wx:if、wx:if。2）hidden，利用true和false的值做”显示“和”隐藏“的效果。**『用法见问题4』**。3）this是指Page，常用的this.data就是Page里的data散列。4）三元运算`&lt;view hidden=&quot;&#123;&#123;bol? &quot;正&quot;:&quot;反&quot;&#125;&#125;&quot;&gt; Hidden &lt;/view&gt;`，如果bol是true显示”正“，false显示”反“。5）&#123;&#123;&#125;&#125;用法。做数学运算如&#123;&#123;3+5&#125;&#125;，做字符串连接如&#123;&#123;&quot;hello&quot;+id&#125;&#125;，做三元运算，配合wx:for做循环相当于ruby的each do，做数组组合如wx:for=&quot;&#123;&#123;[id,3,2,1]&#125;&#125;&quot;形成新的数组，wxml模板template的传参，6）wxml模板template，独立作用域，**『用法见问题5』**。&#123;&#123;…散列&#125;&#125;的写法，就不用一个个变量和值去写。 9、wx:for详解1）下标是index，值是item。自定义下标变量名wx:for-index=”i”、值的变量名wx:for=”j”。 2）for的嵌套做九九乘法表，『用法见问题6』。 10 、事件详解1）bind+tap相当于事件，可以对应到function。 2）冒泡事件和非冒泡事件详解，『实例见问题7』。 3）移动开发常用事件：touchstart、touchmove、touchcancel。比原生js多了两个事件，tap等价于桌面端的click即手指按下并抬起，longtap等价于桌面端的mousedown即手指按下。 事件参数：type事件类型，timeStamp触发时间，touches返回数组如果是多点触控就有多个数组，detail其他信息后面会用特别多。target（触发事件）和currentTarget（当前事件）返回值的结果是一样的。 target是事件触发事件的源对象，即罪魁祸首。currentTarget是所在组件。 比如『问题7中的冒泡事件』，点击inner同时触发inner、middle后，可以看两个事件的target即罪魁祸首都是inner，而middle的currentTarget所在组件是middle。 11、wxml中引用import、incloud详细『案例见问题8』。 12、wxssimport/incloud，『调用见问题9』。 全局样式app.wxss和局部样式，局部样式优先级比全局样式高。 13、view组件-flex布局flex:1相当于bootstrap中的col-md-xx。区别是col-md-12固定12格，而flex是根据我们设置的flex总数按比例显示，如下会按1/4、1/4、2/4显示。 14、view组件-scroll-view1）解决样式逸出/超出问题（子元素比父元素大会超出父元素，给父元素加个边框就能看清楚） 2）参数 scroll-y、scroll-x，滚动方向； upper-threshold距离顶部/左边多远(默认50)触发scrolltoupper 事件、lower-threshold距离底部/右边多远时触发scrolltolower 事件； scroll-top、scroll-left，滚动条的初始位置； scroll-into-view=”id标签”，比scroll-top/left好用，初始值在id的标签位置； bindscroll，滚动时触发事件； 3）滚动切换的『案例，见问题10』。 15、view组件-swiper15.1 轮播图swiper1）参数 indicator-dots=”true”，指示点； autoplay=”true”，自动切换，默认5秒； interval=”3000”，自动切换的时间3秒； duration=”3000”，滑动动画持续时间； current=”2”，初始图片第几张，不设置默认0； bindchange，current改变时会触发事件； 2）注意：swiper里只能放&lt;swiper-item/&gt;组件，否则会导致未定义的行为。 15.2 拓展：表单-滑动选择器&lt;slider/&gt;用slider标签做动态切换，『案例见问题11』。 ①、&lt;slider min=&quot;2000&quot; max=&quot;5000&quot;/&gt;，像播放器的进度条。 ②、参数 min，起点值； max，终点值； show-value，显示值； bindchange，滑动进度条触发事件； ③、&lt;slider/&gt;滑动选择器能用于： 动态修改轮播图切换时间； 动态修改轮播图动画持续时间； 动态修改范围内的数值； 小结：各种属性都可以作为数据，实现动态更改。 16、组件-基础内容1）icon type、size、color 2）text，特点是长按可以被选中。 3）proress进度条，percent进度百分之多少。用js制作进度条见视频。 17、组件-表单11）button上用form-type=”submit/reset”，配合&lt;form bindreset/bindsubmit=&quot;xx&quot;/&gt;，做点击重置或点击发送的功能。 18、组件-表单21）checkbox 2）input 19、组件-表单31）picker，用bindchange触发事件。 20、组件-表单41）radio，单选框。跟复选框checkbox非常像。 2）silder，滑动选择器。详见『15节讲解的问题11』。 3）textarea，多行文本。auto-height，输入框根据文字变大，不会出现滚动条。 21、api-界面-交互反馈常配合点击事件bindtap使用。 1）wx.request() 2）wx.showActionSheet()，显示操作菜单。 3）wx.showModal()，显示模态弹窗。 4）wx.showToast()，删除/加载数据时的提示框。 wx.hideToast()，隐藏提示框，放在setTimeout的function里可以提前隐藏。 22、api-导航、组件-导航1）组件&lt;navigator&gt;..&lt;/navigator&gt; 2）api的wx.navigateTo、wx.redirectTo、wx.switchTab 其他wx.navigateBack、wx.reLaunch 23、组件-媒体组件、api-音频组件控制1）组件audio，音频。 2）audio可配合api的音频组件控制wx.createAudioContext，控制播放/暂停。 3）组件image，mode对图片进行裁剪/缩放。 最长用mode=”aspectFill”，保持纵横比缩放图片，只保证图片的短边能完全显示出来。 4）组件video，视频。danmu-btn弹幕。 24、组件-地图、api-位置1）wx.getLocation，获取当前地理位置。 2）wx.openLocation，查看位置。 25、组件-画布canvas腾讯不允许发布游戏，但是可以用canvas做一些动画。 1）canvas，画布。 26、canvas动画实例二、问题实例（本教程实例）1、怎么把加载中、request请求api等function，封装到app.js中？2、app.js的全局函数app()怎么设置变量和调用？1）app.js设置变量 1234globalData: &#123; userInfo: null, pass: &quot;999&quot;&#125; 2）如在index.js定义pass2，app.js里拿到数据 123456var app = getApp() //获取到全局实例onLoad: function () &#123; this.setData(&#123; pass2: app.globalData.pass &#125;); 3）显示数据 1&lt;view&gt;密码是：&#123;&#123;pass2&#125;&#125;&lt;/view&gt; 3、js模块化怎么定义和调用？ 定义：模块化。可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 module.exports 或者 exports 才能对外暴露接口。 exports 是 module.exports 的一个引用，因此在模块里边随意更改 exports 的指向会造成未知的错误。所以更推荐开发者采用 module.exports 来暴露模块接口，除非你已经清晰知道这两者的关系。 用require调用（本机需安装nodejs才会生效） 。 1）根目录创建common/common.js，定义模块化数据，并暴露接口先定义function，如function sayHello(name){..}，然后在module.exports中暴露接口。 12345678910111213// common.jsconsole.log(&quot;我是common.js&quot;) //一样可以用console.log来测试数据function sayHello(name) &#123; console.log(`Hello $&#123;name&#125; !`)&#125;function sayGoodbye(name) &#123; console.log(`Goodbye $&#123;name&#125; !`)&#125;module.exports = &#123; //只有在module里暴露接口，才能被其他文件调用。 hello1: sayHello, //暴露接口sayHello，在其他文件上用common.hello1()来调用 goodbye1: sayGoodbye&#125; 2）调用js模块，拿到数据比如index.wxml 1&lt;button bindtap=&quot;say&quot;&gt;say hello!&lt;/button&gt; index.js，用require(模块js文件)引用js文件，然后用common.变量(参数)调用接口。 12345678910var common =require(&quot;../../common/common.js&quot;); //引入common.js文件所暴露的接口Page(&#123; data: &#123; motto: &apos;Hello World&apos;, name: &apos;999&apos; &#125;, say:function()&#123; common.hello1(this.data.motto); //点击按钮后输出Hello Hello World common.goodbye1(this.data.name); //点击按钮后输出Goodbye 999 &#125;, 测试：微信工具重新编译，可以看到console里出现”我是common.js“，单击按钮出现定义的结果。 3）进阶：用require可以引用其他的js依赖1）新建common/a.js 1console.log(&quot;我是common.js所依赖的a.js&quot;) 2）在common.js加入a.js 1require(&quot;a.js&quot;) 3）测试：微信工具重新编辑，console里出现”我是common.js所依赖的a.js“、”我是common.js“。 4、显示/隐藏功能？!取反方法一：wx:if=”Infinity“，推荐用！1）wxml增加按钮，以及要显示/隐藏的内容 12&lt;button bindtap=&apos;show&apos;&gt;点击显示/隐藏&lt;/button&gt;&lt;view wx:if=&quot;&#123;&#123;bol&#125;&#125;&quot;&gt;条件渲染显示&lt;/view&gt; 2）js初始化bol的值为true/fale，然后利用!bol即与bol的值相反，来实现显示/隐藏 123456789101112131415Page(&#123; data: &#123; motto: &apos;Hello World&apos;, userInfo: &#123;&#125;, hasUserInfo: false, canIUse: wx.canIUse(&apos;button.open-type.getUserInfo&apos;), bol: true &#125;, show:function(e)&#123; console.log(this.data.bol); var bol = this.data.bol //this.data.bol就是拿到Page的data散列中的bol值，即初始值 this.setData(&#123; bol: !bol //最关键的点，用!bol来实现true和false的切换 &#125;) &#125;, 方法二：hidden=”Infinity“，不推荐！测试发现，hidden只能在text文本使用，如果在view上是不生效的。 5、定义和调用wxml模板template？独立作用域？——同文件调用（跨文件调用见问题8）1）定义wxml模板，用template和name 12345&lt;template name=&quot;object&quot;&gt; &lt;!--name属性一定要写--&gt; &lt;view&gt;第一个对象&#123;&#123;a&#125;&#125;&lt;/view&gt; &lt;view&gt;&#123;&#123;b&#125;&#125;&lt;/view&gt; &lt;view&gt;&#123;&#123;name&#125;&#125;&lt;/view&gt;&lt;/template&gt; 2）wxml模板调用 ，用is和data 1&lt;template is=&quot;object&quot; data=&quot;&#123;&#123;a:1, b:2&#125;&#125;&quot;&gt;&lt;/template&gt; 123注意：模板template是独立作用域，只能使用这里的data传进来的数据。因此，即便js里的data有设置name的值，也跟template没有任何关系，所以在这里不会显示name的值。如果想使用js的data的name值，可以把传进template的数据写成`&lt;template is=&quot;object&quot; data=&quot;&#123;&#123;a:1, b:2, temname: name&#125;&#125;&quot;&gt;&lt;/template&gt;`。 6、九九乘法表（用wx:for和wx:if）？因为是嵌套wx:for，所以item可能会搞不清楚是哪一个wx:for的，这种情况建议自定义item的变量名。 1）用wx:for初步显示列表 12345&lt;view wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;i&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;j&quot; style=&quot;display:inline-block; width:50rpx;&quot;&gt; &#123;&#123;j&#125;&#125; &lt;/view&gt;&lt;/view&gt; 2）用wx:if判断输出具体列表 1234567&lt;view wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;i&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot; wx:for-item=&quot;j&quot; style=&quot;display:inline-block; width:150rpx;&quot;&gt; &lt;view wx:if=&quot;&#123;&#123;j&lt;=i&#125;&#125;&quot;&gt; &#123;&#123;i&#125;&#125;*&#123;&#123;j&#125;&#125;=&#123;&#123;i*j&#125;&#125; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 7、冒泡事件 和 非冒泡事件？1）冒泡示例 wxml 123456789&lt;view id=&quot;outter&quot; bindtap=&quot;outterTap&quot;&gt; outter view &lt;view id=&quot;middle&quot; bindtap=&quot;middleTap&quot;&gt; middle view &lt;view id=&quot;inner&quot; bindtap=&quot;innerTap&quot;&gt; inner view &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; js 123456789outterTap:function()&#123; console.log(&quot;触发了outter事件&quot;)&#125;,middleTap:function()&#123; console.log(&quot;触发了middle事件&quot;)&#125;,innerTap:function()&#123; console.log(&quot;触发了inner事件&quot;)&#125;, 测试：点击最里层的inner view，在console可以看到同时触发了inner view、middle view、outter view。 冒泡是怎么一回事？ 可以给outter view加一个红色边框style=&quot;border:1px solid red;&quot;，可以看到inner也是包含在outter边框里的。所以一点击就会触发三个事件。而且执行顺序是从里到外。 2）解决办法 把bindtap改成catchtap，就可以阻止冒泡。 123456789&lt;view id=&quot;outter&quot; bindtap=&quot;outterTap&quot;&gt; outter view &lt;view id=&quot;middle&quot; catchtap=&quot;middleTap&quot;&gt; middle view &lt;view id=&quot;inner&quot; catchtap=&quot;innerTap&quot;&gt; inner view &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 8、调用template文件import、include——跨文件调用8.1 import（拿template模板）1）import可在当前文件中使用目标文件定义的&lt;template/&gt;，而且只调用&lt;template/&gt;，其他内容忽略。 index文件夹新建item.wxml 1234&lt;view&gt;我是item.wxml&lt;/view&gt;&lt;template name=&quot;item&quot;&gt; &lt;text&gt;我是item.wxml里的&#123;&#123;name&#125;&#125;&lt;/text&gt;&lt;/template&gt; index.wxml 12&lt;import src=&quot;item.wxml&quot;/&gt;&lt;template is=&quot;item&quot; data=&quot;&#123;&#123;name: &apos;99&apos;&#125;&#125;&quot;/&gt; 测试：输出”我是item.wxml里的99“，没有出现”我是item.wxml“。 2）如果上边例子的item也调用了其他文件c.wxml。 结论是：不能嵌套调用。 c.wxml 123&lt;template name=&quot;c&quot;&gt; &lt;text&gt;我是c.wxml里的&#123;&#123;pass&#125;&#125;&lt;/text&gt;&lt;/template item.wxml 12345&lt;view&gt;我是item.wxml&lt;/view&gt;&lt;import src=&quot;c.wxml&quot;/&gt;&lt;template name=&quot;item&quot;&gt; &lt;text&gt;我是item.wxml里的&#123;&#123;name&#125;&#125;&lt;/text&gt;&lt;/template&gt; index.wxml 123&lt;import src=&quot;item.wxml&quot;/&gt;&lt;template is=&quot;item&quot; data=&quot;&#123;&#123;name: &apos;99&apos;&#125;&#125;&quot;/&gt;&lt;template is=&quot;c&quot; data=&quot;&#123;&#123;pass: &apos;12345&apos;&#125;&#125;&quot;/&gt; 测试：发现c.wxml没有生效。 8.2 include（拿 !template模板）1）可以将目标文件除了&lt;template/&gt;的整个代码引入。即与import相反。 index.wxml注解所有代码，新增 12&lt;include src=&quot;item.wxml&quot;/&gt;&lt;template is=&quot;item&quot; data=&quot;&#123;&#123;name: &apos;99&apos;&#125;&#125;&quot;/&gt; 测试：显示”我是item.wxml“，所有&lt;template/&gt;没有被调用。 9、调用wxss模块common/common.js 123.aaa&#123; background: blue;&#125; pages/index.index.wxss 1@import &quot;../../common/common.wxss&quot;; /*要写在文件最上面*/ index.wxml 1&lt;view class=&apos;aaa&apos;&gt;调用common.wxss的aaa&lt;/view&gt; 10、滚动切换，用scroll-into-view 1）wxml，因为scroll-into-view是调用id选择器的，所以相应的给a/b/c加上id。放的是数组，数组的值就是id的值，值的变化就相当于是id的变化。 123456 &lt;scroll-view scroll-y=&quot;true&quot; class=&apos;flex-wrap&apos; scroll-into-view=&quot;&#123;&#123;toView&#125;&#125;&quot;&gt; &lt;view id=&quot;a&quot; &gt;a&lt;/view&gt; &lt;view id=&quot;b&quot; &gt;b&lt;/view&gt; &lt;view id=&quot;c&quot; &gt;c&lt;/view&gt;&lt;/scroll-view&gt; &lt;button bindtap=&apos;tapChange&apos;&gt;切换&lt;/button&gt; 2）wxss 1234567891011121314151617181920.flex-wrap&#123; height: 400rpx;&#125;.flex-wrap view&#123; text-align: center; font-size: 40rpx; color: white;&#125;#a&#123; background-color: green; height: 100%;&#125;#b&#123; background-color: red; height: 100%;&#125;#c&#123; background-color: blue; height:100%;&#125; 3）js 123456789101112131415var order = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; //数组var index = 0; //初创下标值Page(&#123; data: &#123; toView:&quot;b&quot;, //给toView数组的默认值，在wxml上表现为id=&quot;b&quot; &#125;, tapChange:function()&#123; index++; if(index &gt; order.length-1)&#123; index = 0; &#125; this.setData(&#123; toView: order[index] &#125;) &#125;, 11、swiper动态切换1） wxml 123456&lt;swiper autoplay=&apos;true&apos; interval=&apos;&#123;&#123;inter&#125;&#125;&apos;&gt; &lt;swiper-item wx:for=&quot;&#123;&#123;imgUrls&#125;&#125;&quot;&gt; &lt;image src=&quot;&#123;&#123;item&#125;&#125;&quot; style=&apos;width:750rpx;&apos;&gt;&lt;/image&gt; &lt;/swiper-item&gt;&lt;/swiper&gt;&lt;slider bindchange=&quot;intervalChange&quot; show-value min=&quot;2000&quot; max=&quot;5000&quot;/&gt; 2）js 12345678910111213141516Page(&#123; data: &#123; inter:2000, //轮播切换时间初始值2秒 imgUrls: [ &apos;http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg&apos;, &apos;http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg&apos;, &apos;http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg&apos; ], &#125;, intervalChange:function(e)&#123; console.log(e) var sliderValue = e.detail.value; this.setData(&#123; inter: sliderValue &#125;) &#125;,","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-system-蓝鸥系列《微信小程序全方位深度解析》豆瓣电影实例：搜索功能、整个页面布局套路","slug":"5 微信小程序wx-xx/wx-system-蓝鸥系列《微信小程序全方位深度解析》豆瓣电影实例：搜索功能、整个页面布局套路","date":"2018-01-01T16:10:00.000Z","updated":"2018-01-14T08:19:19.000Z","comments":true,"path":"posts/67cf4ebd/","link":"","permalink":"http://yoursite.com/posts/67cf4ebd/","excerpt":"","text":"这是豆瓣电影的小项目，主要完成页面显示、搜索功能。参考资料蛮牛教育、网易云课堂、百度传课，搜《微信小程序全方位深度解析》、《高级api视频教程》 蛮牛教育免费在线视频http://edu.manew.com/course/193/learn#lesson/2559，可1.5倍速。 网易云课堂免费在线视频，http://study.163.com/course/courseLearn.htm?courseId=1003283028#/learn/video?lessonId=1003973293&amp;courseId=1003283028，只有1倍速，含《高级api视频教程》。四个页面：推荐电影页、搜索页、详情页、我的页 可以封装在app.js的组件（因为都是固定写法）：加载中的动画、request请求api、 零、初配置 app.json 12345678910111213141516171819202122232425262728293031&#123; &quot;pages&quot;:[ &quot;pages/index/index&quot;, &quot;pages/movie/movie&quot;, &quot;pages/search/search&quot;, &quot;pages/profile/profile&quot; ], &quot;window&quot;:&#123; &quot;backgroundTextStyle&quot;:&quot;light&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#000&quot;, &quot;navigationBarTitleText&quot;: &quot;豆瓣电影&quot;, &quot;navigationBarTextStyle&quot;:&quot;white&quot; &#125;, &quot;tabBar&quot;: &#123; &quot;selectedColor&quot;: &quot;red&quot;, &quot;list&quot;: [ &#123; &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;推荐电影&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/search/search&quot;, &quot;text&quot;: &quot;搜索&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/profile/profile&quot;, &quot;text&quot;: &quot;我的&quot; &#125; ] &#125;&#125; 一、推荐页1、加载数据显示加载中，数据加载完成后不显示加载中。这里先用ES5的写法，你也可以转ES6写法。 1）index.js 1234567891011121314151617181920212223var API_URL = &apos;https://api.douban.com/v2/movie/top250&apos;Page(&#123; data: &#123; movies: [] &#125;, onLoad:function()&#123; wx.showToast(&#123; //界面-交互反馈-加载中。。 title: &apos;加载中...&apos;, icon:&quot;loading&quot;, duration:10000 &#125;); wx.request(&#123; url: API_URL, header: &#123; &apos;content-type&apos;: &apos;json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data); wx.hideToast(); //界面-交互反馈 &#125; &#125;) &#125;&#125;) 遇到的bug，请求url时400 (Bad Request) 解决办法：request里的content-type由application/json改成json 2、布局 2.1 顶部的viewwxml 123&lt;view class=&quot;page-header&quot;&gt; &lt;!--因为这里样式几个页面一样，所以写在app.wxss里--&gt; &lt;text class=&apos;page-header-text&apos;&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt;&lt;/view&gt; wxss 12345678910111213141516171819page&#123; font-family: &quot;Microsoft YaHei&quot;; background: #fff; display: flex; flex-direction: column;&#125;/*index header共用*/.page-header&#123; display: flex; justify-content: center; border-bottom: 2rpx solid #ccc; margin-bottom: 10rpx;&#125;.page-header-text&#123; padding: 20rpx 40rpx; color: #999; font-size: 40rpx;&#125; js 123456789101112131415onLoad:function()&#123; var that = this; //保存this的数据 wx.request(&#123; ... success: function (res) &#123; console.log(res.data); wx.hideToast(); //界面-交互反馈 var data = res.data; that.setData(&#123; title: data.title, movies: data.subjects &#125;) &#125; &#125;)&#125; 2.2 下边内容的view1）能滚动，所以外边的容器是scroll-view，设置flex:1占满剩余空间，以及display。 2）在容器里，有一个页头导航即标题位置，用navigator。在里面跳转页面和传递列表数组。 3）因为除了推荐页外，搜索页也用到相同的css，所有我把样式写到app.wxss。 文字盒子item设置flex:1占满空间 要让每行文字独占一行，而不是首尾相连，设置 display: block（搞不懂的话加个background背景颜色就能看清楚了）; 123item .title,.item .sub-title&#123; display: block;&#125; index.wxml 1234567891011121314151617&lt;scroll-view class=&apos;page-body&apos; scroll-y=&quot;true&quot;&gt; &lt;navigator url=&quot;../movie/movie&quot; open-type=&quot;switchTab&quot; wx:for=&quot;&#123;&#123;movies&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;!--../返回上一层--&gt; &lt;view class=&apos;item&apos;&gt; &lt;image class=&quot;poster&quot; src=&quot;&#123;&#123;item.images.small&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;view class=&quot;meta&quot;&gt; &lt;text class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text class=&quot;sub-title&quot;&gt;&#123;&#123;item.original_title&#125;&#125;(&#123;&#123;item.year&#125;&#125;)&lt;/text&gt; &lt;text class=&quot;artists&quot;&gt; &lt;text wx:for=&quot;&#123;&#123;item.directors&#125;&#125;&quot; wx:key=&quot;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;&lt;!--wx:for数组里可以嵌套wx:for数组--&gt; &lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;rating&quot;&gt; &lt;text&gt;&#123;&#123;item.rating.average&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/navigator&gt; &lt;/scroll-view&gt; app.wxss 123456789101112131415161718192021222324252627282930313233343536373839/*index body共用*/.page-body&#123; display: flex; flex:1; flex-direction: column;&#125;.item&#123; display: flex; padding: 20rpx 40rpx; border-bottom: 2rpx solid #eee;&#125;.item .poster&#123; width: 128rpx; height: 128rpx; margin-right: 20rpx;&#125;.item .meta&#123; flex:1;&#125;.item .title,.item .sub-title&#123; display: block; margin-bottom: 14rpx;&#125;.item .title&#123; font-size: 32rpx;&#125;.item .sub-title&#123; font-size: 22rpx; color: #c0c0c0;&#125;.item .artists&#123; font-size: 26rpx; color: #999;&#125;.item .rating&#123; font-size: 28rpx; font-weight: bold; color: red;&#125; 二、详情页https://api.douban.com/v2/movie/subject，详情页api后面要接一个id（上一节的api即https://api.douban.com/v2/movie/top250可以获取） 测试api，在浏览器输入https://api.douban.com/v2/movie/subject/1292063，可以拿到一笔数据。 3.1 从api里拿到数据1）在index页拿到想要传递的id 1&lt;navigator url=&quot;../movie/movie?id=&#123;&#123;item.id&#125;&#125;&quot; wx:for=&quot;&#123;&#123;movies&#125;&#125;&quot; wx:key=&quot;&quot;&gt; 2）movie.js测试能不能拿到id 123onLoad:function(params)&#123; console.log(params);&#125; 3）api请求 12345678910111213141516171819var API_URL = &quot;https://api.douban.com/v2/movie/subject&quot;Page(&#123; data: &#123; &#125;, onLoad:function(params)&#123; console.log(params); var that = this; wx.request(&#123; url: API_URL+&apos;/&apos;+params.id, header: &#123; &apos;content-type&apos;: &apos;json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) &#125; &#125;) &#125;&#125;) 3.2 布局结构 最外层，是一个可以滚动的容器，scroll-view； 上边，包括图片、标题等； 下边，正文； 3.3 页面代码movie.wxml 12345678910111213&lt;scroll-view scroll-y=&quot;true&quot;&gt; &lt;view class=&apos;meat&apos;&gt; &lt;image class=&apos;poster&apos; src=&apos;&#123;&#123;movie.images.large&#125;&#125;&apos; background-size=&quot;cover&quot;&gt;&lt;/image&gt; &lt;text class=&quot;title&quot;&gt;&#123;&#123;movie.title&#125;&#125;(&#123;&#123;movie.year&#125;&#125;)&lt;/text&gt; &lt;text class=&apos;info&apos;&gt;评分：&#123;&#123;movie.rating&#125;&#125;&lt;/text&gt; &lt;text class=&apos;info&apos;&gt;导演：&lt;block wx:for=&quot;&#123;&#123;movie.directors&#125;&#125;&quot; wx:key=&quot;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/block&gt;&lt;/text&gt; &lt;text class=&quot;info&quot;&gt;主演：&lt;block wx:for=&quot;&#123;&#123;movie.casts&#125;&#125;&quot; wx:key=&quot;&quot;&gt;&#123;&#123;item.casts&#125;&#125;&lt;/block&gt;&lt;/text&gt; &lt;/view&gt; &lt;view class=&apos;summary&apos;&gt; &lt;text class=&quot;label&quot;&gt;摘要：&lt;/text&gt; &lt;text class=&apos;content&apos;&gt;&#123;&#123;movie.summary&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/scroll-view&gt; movie.wxss 12345678910111213141516171819202122232425262728293031323334.meta&#123; display: flex; flex-direction: column; align-content: center; height: 1000rpx; padding: 50rpx 40rpx;&#125;.poster&#123; width: 80%; height: 500rpx; margin: 20rpx;&#125;.title&#123; font-style: 42rpx; color: #444;&#125;.info&#123; font-size: 18rpx; color: #888; margin-top: 20rpx; width: 80%;&#125;.summary&#123; width: 80%; margin: 30rpx auto;&#125;.label &#123; display: block;&#125;.content&#123; color: #666; font-size: 20rpx; padding: 10rpx;&#125; 三、搜索页用到的api是https://api.douban.com/v2/movie/search，后面接`?q=搜索内容`即接着参数q，q等于搜索的内容。 测试api，在浏览器输入https://api.douban.com/v2/movie/search?q=宫崎骏，可以拿到一笔数据。 ！！！所以搜索功能是在后端实现的，做成post的api，小程序只是从这个api里请求到数据然后在wxml里显示出来。1、拆分功能1）文本输入框 2）拾取光标的时候会触发搜索 3）搜索的时候有loading的动画 2、拿到数据2.1 文本输入框search.wxml 123&lt;view class=&quot;page-header&quot;&gt; &lt;input class=&apos;page-header-text&apos; placeholder=&apos;输入搜索关键词&apos; auto-focus bindchange=&quot;search&quot;/&gt;&lt;/view&gt; 2.2 bindchange=&quot;search&quot;，绑定change事件，当search的值改变的时候触发search。1）浏览器输入https://api.douban.com/v2/movie/search?q=宫崎骏，观察获得的数据，是和推荐页拿到的数据结构一样，所以这里js里的data还是用movies。 2）search的function里，先执行输入值的判断，如果值为空则return返回，如果有值才会执行搜索。 1234567891011121314151617181920212223242526var API_URL = &apos;https://api.douban.com/v2/movie/search&apos;Page(&#123; data:&#123; movies: [] &#125;, search:function(e)&#123; if(!e.detail.value)&#123; return; &#125; wx.showToast(&#123; //加载中的动画效果 title:&quot;加载中..&quot;, icon:&quot;loading&quot;, duration:10000 &#125;); var that = this; //保存this的数据 wx.request(&#123; url: API_URL + &quot;?q=&quot; + e.detail.value, header: &#123; &apos;content-type&apos;: &apos;json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) &#125; &#125;) &#125;&#125;) 3）测试：在微信开发工具里测试搜索“宫崎骏”，cosole里发现成功拿到数组数据。 2.3 关闭加载中的动画，并把movies数组由[]改成刚刚拿到的数组数据1）在search function的success function里加入 1234567success: function (res) &#123; console.log(res.data) wx.hideToast(); that.setData(&#123; movies: res.data.subjects &#125;) &#125; 3、在页面显示数据 1）复制index.wxml的scroll-view部分，粘贴到search.wxml。 因为index这部分的css是放在app.wxss，所以也不用再改样式，很方便。 更重要的是因为结构一样，js里传递数据的数组都是用movies:[]，所以可以显示搜索结果。而wxml里的页面跳转也是传递，所以也可以进到详情页。 1234567891011121314151617&lt;scroll-view class=&apos;page-body&apos; scroll-y=&quot;true&quot;&gt; &lt;navigator url=&quot;../movie/movie?id=&#123;&#123;item.id&#125;&#125;&quot; wx:for=&quot;&#123;&#123;movies&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;!--../返回上一层--&gt; &lt;view class=&apos;item&apos;&gt; &lt;image class=&quot;poster&quot; src=&quot;&#123;&#123;item.images.small&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;view class=&quot;meta&quot;&gt; &lt;text class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;text class=&quot;sub-title&quot;&gt;&#123;&#123;item.original_title&#125;&#125;(&#123;&#123;item.year&#125;&#125;)&lt;/text&gt; &lt;text class=&quot;artists&quot;&gt; &lt;text wx:for=&quot;&#123;&#123;item.directors&#125;&#125;&quot; wx:key=&quot;&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;&lt;!--wx:for数组里可以嵌套wx:for数组--&gt; &lt;/text&gt; &lt;/view&gt; &lt;view class=&quot;rating&quot;&gt; &lt;text&gt;&#123;&#123;item.rating.average&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;/navigator&gt; &lt;/scroll-view&gt; 四、99对本教程页面套路总结基本流程都是这样的，如果复杂一点可能就是对应的接口多一点。 1、先在php、rails等后端做好相关功能的api。1）比如搜索要做成post的api、首页显示则做get的api； 2、在浏览器输入api，看能不能拿到一笔与本页面相关的数据。1）如果拿不到还是先去把api做好。 3、拆分功能。1）一般可以归为两类（①拿到数据、②显示数据）。 4、拿到数据。1）具体是在wxml绑定事件、或跳转页面传递参数，然后在js里发起request请求。 5、显示数据。1）wxml和wxss页面，一开始可以总览全局，看哪些页面结构相同可以把css放在app.wxss共用。 2）写页面的顺序是：先骨架布局wxml、再穿衣服wxss、最后才考虑js动画 3）如下图，一个框起来的模块就写一个view，里边可以夹杂各种image、text，分别设置class 12345&lt;view class=&apos;summary&apos;&gt; &lt;image class=&apos;poster&apos; src=&apos;&#123;&#123;movie.images.large&#125;&#125;&apos; background-size=&quot;cover&quot;&gt;&lt;/image&gt; &lt;text class=&quot;label&quot;&gt;摘要：&lt;/text&gt; &lt;text class=&apos;content&apos;&gt;&#123;&#123;movie.summary&#125;&#125;&lt;/text&gt;&lt;/view&gt;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"ror-function-搜索gem ransack","slug":"ror-function-搜索gem ransack","date":"2018-01-01T16:10:00.000Z","updated":"2018-01-18T03:49:32.000Z","comments":true,"path":"posts/c311c03b/","link":"","permalink":"http://yoursite.com/posts/c311c03b/","excerpt":"","text":"忘了记录：1、ransack搜索两种做法，一种是放在navbar搜索时在新的search页显示，一种是放在index搜索的时候不跳转新页面。第一种做排序报错，没解决，第二种可以排序，但是模糊搜索的对象设置是放在view页面的感觉很奇怪。2、分类功能两种做法，一种是一对多对产品添加栏位，一种是多对多，多对多的好处是在后台两边都可以编辑和查看产品。第一种直接在ransack的模糊搜索设置中加入分类的栏位，第二种不知道如何通过ransack做筛选。3、用自己的github案例整理教程http://milesmao233.logdown.com/posts/1366768-search-and-sort-functions-simple-ransack可以排序的搜索，搜索功能做起来非常简单，按官方github的做法。 参考资料一、「搜索功能」、「关键字高亮」、「排序」 如何在navbar上添加搜索栏并实现搜索结果 job-listing by-戴建林，一篇搞定三个功能。ransack详细解释篇：如何用ransack gem实现搜索功能 by-lacfo，参考这篇了解代码作用。 github ransack github will_paginategithub will_paginate-bootstrap 改进12345&lt;% if render_highlight_content(product, @query_string).blank? %&gt; &lt;%= link_to(product.title, admin_product_path(product)) %&gt;&lt;% else %&gt; &lt;%= link_to(render_highlight_content(product, @query_string), admin_product_path(product)) %&gt;&lt;% end %&gt; [bug]搜索gem ransack，用will_paginate分页后，输入为空时报错123456789ArgumentError in Products#searchShowing /Users/apple/rails/jdstore1130/app/views/products/search.html.erb where line #19 raised:The @products variable appears to be empty. Did you forget to pass the collection object for will_paginate?Extracted source (around line #19): &lt;% end %&gt;&lt;%= will_paginate @posts %&gt; 原因：&lt;%= will_paginate @posts %&gt;位置放错。 解决办法：把&lt;%= will_paginate @posts %&gt;放在&lt;% if @products.blank?&gt;。。。&lt;% end %&gt;里面。 123456789101112131415161718&lt;% if @products.blank? %&gt; 输入为空&lt;% else %&gt; &lt;% @products.each do |product| %&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;%= link_to product_path(product) do %&gt; &lt;% if product.photos.present? %&gt; &lt;%= image_tag(product.photos[0].avatar.thumb.url, class: &quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt; &lt;% end %&gt; &lt;%= link_to(product.title, admin_product_path(product)) %&gt; ¥ &lt;%= product.price %&gt; 元 &lt;/div&gt; &lt;% end %&gt; &lt;%= will_paginate @posts %&gt;&lt;% end %&gt;","categories":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}],"tags":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/tags/ror功能/"}],"keywords":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}]},{"title":"wx-system-99小程序项目后端api开发进度","slug":"5 微信小程序wx-xx/wx-system-99小程序项目后端api开发进度","date":"2017-12-31T16:10:00.000Z","updated":"2018-01-14T07:43:12.000Z","comments":true,"path":"posts/6926316/","link":"","permalink":"http://yoursite.com/posts/6926316/","excerpt":"","text":"92、can search category on product#index (many to many)1）在product#inde可以筛选分类category。product和category是多对多关系。 2）参考教程http://superlei-blog.logdown.com/posts/1744668-a-many-to-many-classification-lines 93、api can search category on product#index (many to many)1）api也可以在product筛选分类。 94、api category#show1）api category#show。 2)发现在小程序拿分类下的产品，除了在product上筛选外，直接拿分类的show更简洁。 95、add READLOG.md1）增加更新日志READLOG 96、random product 81）随机商品random8 97、api random product 81）api，随机商品random8","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-system-蓝鸥系列《高级api视频教程》进阶教程","slug":"5 微信小程序wx-xx/wx-system-蓝鸥系列《高级api视频教程》进阶教程","date":"2017-12-31T16:10:00.000Z","updated":"2018-01-14T07:27:53.000Z","comments":true,"path":"posts/ce9bbb1c/","link":"","permalink":"http://yoursite.com/posts/ce9bbb1c/","excerpt":"","text":"一、小程序注册及服务器配置1、小程序教程1）搜索百度传课，搜“微信小程序”，销量排行里的《微信小程序全方位深度解析》，蓝鸥出品。 主要分析一些前端组件、功能、贪吃蛇项目、豆瓣电影项目。 2、总览PS：以下这些api都具有一个特点：需要跟后台进行配合。所以这个课要有前台、后台基础（主要以php，websocket接口后台我用nodejs）。1）wx.uploadFile，上传头像、图片； 2）wx.connectSocket，做实时的东西，比如直播； 3）wx.login，登录时拿到用户的openid。一些接口如模板消息等要用到，用的非常多； 4）wx.requestPayment，微信支付； 5）模板消息，用户支付后给他的一些反馈、提示； 6）客服消息，聊天功能； 3、要做的准备工作1）小程序的注册，拿到appid。搜索“微信公众平台”-立即注册-选择小程序。 2）服务器搭建，可用新浪云sae，自带域名和https、而且是按用时收费。 3）小程序后台，配置服务器域名。socket域名可以不配置，其他几个可填相同的域名。 4） 二、打开图片wx.uploadFile（前端代码）1、准备工作1）小程序后台，设置上传、下载域名，可以用request的域名； 2）用apiID添加项目 3）清空index.wxml、index.js保留page 2、开始2.1wxml 1&lt;button bindtap=&quot;uploadImg&quot;&gt;打开图片&lt;/button&gt; js 123456789Page(&#123; data: &#123; &#125;, uploadImag:function()&#123; &#125;&#125;) 2.2 wx.chooseImage，比较简单。先复制示例代码。加入console.log(tempFilePaths);，可以在console里看到输出的是一个带有图片网址的数组。 123456789101112uploadImag:function()&#123; wx.chooseImage(&#123; count: 1, // 打开或选择图片的数量。默认9 sizeType: [&apos;original&apos;, &apos;compressed&apos;], // 可以指定是原图还是压缩图，默认二者都有 sourceType: [&apos;album&apos;, &apos;camera&apos;], // 可以指定来源是相册还是相机，默认二者都有 success: function (res) &#123; // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片 var tempFilePaths = res.tempFilePaths console.log(tempFilePaths); &#125; &#125;)&#125; 2.3 调用图片wxml 1&lt;image src=&quot;&#123;&#123;imgSrc&#125;&#125;&quot;&gt;&lt;/image&gt; js 12345678910111213141516uploadImag:function()&#123; var that = this;//缓存一下 wx.chooseImage(&#123; count: 1, // 打开或选择图片的数量。默认9 sizeType: [&apos;original&apos;, &apos;compressed&apos;], // 可以指定是原图还是压缩图，默认二者都有 sourceType: [&apos;album&apos;, &apos;camera&apos;], // 可以指定来源是相册还是相机，默认二者都有 success: function (res) &#123; // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片 var tempFilePaths = res.tempFilePaths that.setData(&#123; imgSrc: tempFilePaths[0] &#125;); console.log(tempFilePaths); &#125; &#125;)&#125; 遇到的bug：net::ERR_NAME_NOT_RESOLVED 关闭shadowsocks代理，或者依次点击工具栏“设置”-“代理设置”，选择“不使用任何代理，勾选后直连网络”。 2.4 本章难点wx.uploadFile。1）重要参数 url，服务器url filePath，文件路径即上边获取的tempFilePaths name，文件对应的key，注意这个key获取的是文件二进制的内容，必须用二进制的方式处理 2）前端代码如下，剩下的url需要后端处理。 1234567891011121314151617181920212223success: function (res) &#123; // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片 var tempFilePaths = res.tempFilePaths /* //显示图片 that.setData(&#123; imgSrc: tempFilePaths[0] &#125;); console.log(tempFilePaths);*/ //上传图片 wx.uploadFile(&#123; url: &apos;&apos;, filePath: tempFilePaths[0], name: &apos;fileup&apos;, success: function(res)&#123; var data = res.data; console.log(data); &#125;, fail:function()&#123; console.log(&apos;fail&apos;); &#125; &#125;)&#125; 三、上传下载api（后端代码）问题：ruby on rails + ubuntu +七牛云，怎么设置接收图片的目录？ 四、登录api获取openid五、客服会话六、客服会话2七、模板消息八、模板消息2九、websocket十、websocket2十一、微信支付1十二、微信支付2","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"tool-typora-typora配合图床工具ipic的各种使用方法","slug":"6 tool-xx工具/tool-typora-typora配合图床工具ipic的各种使用方法","date":"2017-12-31T16:10:00.000Z","updated":"2018-01-14T08:19:19.000Z","comments":true,"path":"posts/74f9c533/","link":"","permalink":"http://yoursite.com/posts/74f9c533/","excerpt":"","text":"参考资料iPic - 图床神器 iPic + Typora，方便快捷地在 Markdown 中插图 | 一日一技 Windows版本的Typora使用技巧 使用 Typora 一次性搞定公众号写作与排版 一、typora+ipic（99方案）1）截图，或复制网站上的图片后，shift+command+u上传 2）本地图片，点击后command+u上传 3）typora设置粘贴图片自动上传（编辑-图片工具-当插入本地图片时-使用ipic上传）。 如果需要备份本地图片，可以这样修改： ①、编辑-图片工具-当插入本地图片时-拷贝到文件夹 ②、当文章写好后，编辑-图片工具-使用ipic上传本地图片 4）图片用img标签，可以改大小&lt;img src=&quot;&quot; width=&quot;500&quot;&gt;","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"typora","slug":"typora","permalink":"http://yoursite.com/tags/typora/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"wx-system-99小程序项目开发进度","slug":"5 微信小程序wx-xx/wx-system-99小程序项目开发进度","date":"2017-12-31T16:10:00.000Z","updated":"2018-01-17T14:00:18.000Z","comments":true,"path":"posts/6926316/","link":"","permalink":"http://yoursite.com/posts/6926316/","excerpt":"","text":"保证搜索css命名的唯一性，只要确保外层不同，外层一用product-Box，外层二用p_show-head，外层三用p_show-head-input。里层一般不加class，直接用image、button、icon等。——搜索的时候直接搜索外层，再稍微找找就能找到具体的css。 css的class命名：！！目的是好搜、好找 1）web端，box表示所有product页面都可以共用。最外层”product-Box”共用，其他页面如show写”product-Box product-show-Box”。每个页面的大模块用”buy-box”、”detail-box”或”product-image”、”product-detail”。 2）小程序端，不能跟web一样把每个模块css全部包裹在最外层css里面。 方案一：app.wxss里”product-Box”、”welcome-Box”共用，其他页面如show写”product-Box p_show-Box”。每个页面的大模块用”p_index-image”、”p_show-detail”、”p_search-input”。 方案二：app.wxss设置共用基础内容”container{}”、”container .input{}”、”container text{}”。 12345678910111213141516/**app.wxss**/.container &#123; box-sizing: border-box; background-color: #f4f4f4; font-family: PingFangSC-Light,helvetica,&apos;Heiti SC&apos;;&#125; view,image,text,navigator&#123; box-sizing: border-box; padding:0; margin:0;&#125;view,text&#123; font-family: PingFangSC-Light,helvetica,&apos;Heiti SC&apos;; font-size: 29rpx; color: #333;&#125; 方案三：新建common文件夹，放product.wxss、welcome.wxss、category.wxss共用。app.wxss清空，改用对common的引用。或直接在每个页面用page。 最好的方式是先把页面做出来，然后再去重构，然后再总结套路，而不是一开始就在纠结wxss。 1234567891011121314151617181920212223242526272829303132var API_URL = &apos;https://luccake.top/api/v1/products/search&apos;Page(&#123; data: &#123; cakes: [] &#125;, search: function (e) &#123; var aaa = API_URL + &quot;?utf8=✓&amp;q=&quot; + e.detail.value console.log(aaa) if (!e.detail.value) &#123; return; &#125; wx.showToast(&#123; //加载中的动画效果 title: &quot;加载中..&quot;, icon: &quot;loading&quot;, duration: 10000 &#125;); var that = this; //保存this的数据 wx.request(&#123; url: API_URL + &quot;?utf8=✓&amp;q=&quot; + e.detail.value, header: &#123; &apos;content-type&apos;: &apos;json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) wx.hideToast(); that.setData(&#123; cakes: res.data.data &#125;) &#125; &#125;) &#125;&#125;) 一、【问题】1、未解决5）小程序的https怎么弄？ 7）小程序怎么打包发布？ 8）部署在阿里云？https证书购买服务器可免费一年？ 2、已解决1）api接口的图片、api网址都是本地地址？已经接好七牛云。 先部署到heroku，明天早上10点强阿里云。 2）是要拿jdstroe直接来改？还是应该重新建一个项目来做？直接拿jdstore，因为api和web端不冲突。 3）api怎么生成一个网址？一样是在config/routes定义 4）api的代码要怎么写比较简洁？用自带的gem &#39;jbuilder&#39; 5）每个action对应一个api接口，即一个网址，是不是要在写程序里引入这么多个API的URL？不是的。可以用index的api，就会包含更多的信息，供小程序调用。 6）查看schema.rb，总共有carts/cart_items/orders/product_lists/users/products六个表单。哪些需要生成api controller？商品展示用途，应该只要products就可以。 7）product#index的api本地测试成功8）product#index的api部署成功。此时api网址、image网址都由本地路径变成正常网址。9）api接口放在小程序上测试，看能否调用？（找资料折腾了3小时）①、测试成功的代码。 注意，以下代码只能在没有appID的项目用，如果是有appID的项目会提示https或ssl验证的问题，因为这里用的api网址不支持ssl。 index.js文件 1234567891011121314151617181920var app = getApp();Page(&#123; data: &#123; &#125;, onLoad: function () &#123; var that = this; wx.request(&#123; url: &apos;https://wx-luccake.herokuapp.com/api/v1/products&apos;, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.data &#125;) &#125; &#125;) &#125;&#125;) index.wxml文件 1234567&lt;view class=&quot;Box-welcome&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;image src=&apos;&#123;&#123;item.image.url&#125;&#125;&apos;&gt;&lt;/image&gt; &lt;view class=&apos;&apos;&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt; &lt;view class=&apos;&apos;&gt;&#123;&#123;item.description&#125;&#125;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; ②、遇到的问题：在success: function里用res.data调用数据，没有报错，但也没有显示内容？？ 解决办法：参考网站http://www.henkuai.com/thread-18784-2-1.html。 改用res.data.最外层栏位名称调用数据。因为我的api最外边是”data”:，所以这里写成res.data.data。 ③、什么时候用res.data？什么时候用res.data.data？ 简单的说，api文件打开有以下两种情况： 12[&#123;&quot;Id&quot;: xxx&#125;, &#123;&quot;Id&quot;: xxxx&#125;, &#123;&quot;Id&quot;: xxx&#125;]&#123;&quot;data&quot;: [&#123;xxxxx&#125;, &#123;xxxxx&#125;, &#123;xxxxx&#125;]&#125; 继续往下看。。 如果打开的api文件如下，这种比较少见，最外层是[]，就用res.data 123456789101112[&#123;&quot;title&quot;: &quot;赵丽颖现身机场，疲惫过度助理忙搀扶，仍不忘为粉丝签名后离开&quot;,&quot;author_name&quot;: &quot;海哥聊娱乐&quot;,&quot;thumbnail_pic_s&quot;: &quot;http://00.imgmini.eastday.com/mobile/20161028/20161028202106_9f5968897abf2882af89f1193529bdfb_1_mwpm_03200403.jpeg&quot;&#125;,&#123;&quot;title&quot;: &quot;赵丽颖现身机场，疲惫过度助理忙搀扶，仍不忘为粉丝签名后离开&quot;,&quot;author_name&quot;: &quot;海哥聊娱乐&quot;,&quot;thumbnail_pic_s&quot;: &quot;http://00.imgmini.eastday.com/mobile/20161028/20161028202106_9f5968897abf2882af89f1193529bdfb_1_mwpm_03200403.jpeg&quot;&#125;] 如果打开的api文件如下，常见的是这种，最外层是{}，就用res.data.employees。 123456789101112&#123; &quot;employees&quot;: [ &#123; &quot;firstName&quot;: &quot;Bill&quot;, &quot;lastName&quot;: &quot;Gates&quot; &#125;, &#123; &quot;firstName&quot;: &quot;George&quot;, &quot;lastName&quot;: &quot;Bush&quot; &#125; ]&#125; ④、其他注意事项。 json格式只允许双引号，所以api的栏位和值都要有双引号。 微信小程序的res已经是个json形式，data里面直接放键和值。（看的晕晕的，不太理解） 10）小程序的AppID是什么？是要从新建项目的时候就开始弄吗，还是可以等项目测试完成后再加入？①、都可以，如果在新建时没有添加AppID，可以在开发完成后， 新建一个项目，appid 项目目录选择之前的项目路径即可（在开发者工具里，删除项目这个行为不会删除代码）。 ②、git大法好。 11）微信小程序一个AppId能同时绑定多个小程序吗？一个AppID只能绑定一个微信小程序。 12）补充小程序的名称、图标（头像）、小程序介绍和服务类目。需要注意的是，在发布前，你有 3 次确定小程序名称的机会（包括首次填写）；发布之后，小程序暂不支持改名。 13）atom打开wxml文件代码高亮显示？atom-wxml插件，让wxml文件、wxss文件代码高亮。 14）小程序的布局，大概要做多少页面，涉及到多少功能？（用ps排一整版，照做） [1]、首页 1234567891011微信授权，获取公开信息（头像、昵称等）获取地理位置下拉刷新上拉加载更多产品大图轮播搜索框logo、位置(可不要)推荐类别(可不要)产品展示（小图片、名称、价格）tabbar [2]、详情页 1234567大图片名称价格磅数选择(直接放到介绍里)评价(可不要)介绍详情图片 [3]、分类页 12345搜索框左边或上边导航栏图片名称价格 [4]、搜索页 12搜索框按综合、销量、价格、筛选排序 [5]、购物车 [6]、订单页 [7]、我的后台页 15）微信文档简读，了解全貌。打开微信小程序官方文档-开发模块 任务：框架、组件、API、工具、Q&amp;A全部看一遍，把每一行文字，不管你懂不懂，先把它过一遍。然后再看相关教程去编码，就能很快上手。 ①、简易教程 基础。怎么创建项目？ 体验小程序。可以把代码下载后，加载到官方工具里，可以查看所有组件的效果。 更新日志。 ②、框架 一、目录结果。 主体部分有三个文件app.js（逻辑）、app.json（配置）、app.wxss（公共样式），小程序主要做前端MVC中的V和C，MVC中的M给后端做。 二、配置。 页面开发时配置。 三、逻辑层。MVC中的C。 1、注册程序，主要做一些onLaunch初始化；2、注册页面，接受onLaunch的参数渲染一个页面；3、模块化，公共代码抽离成单独的js文件被引用，涉及“文件作用域”的概念；4、API，很丰富常用的都有。 四、视图层。MVC中的V。 WXML： 1、数据绑定，js定义的变量复制到wxml页面调用；2、条件渲染，用条件if判断显示不显示、什么时候显示；3、列表渲染，新闻、文章等循环列表；4、模板，重复调用的东西封装到模板；5、事件，比如页面点击一个东西如bindtap怎么传给后端，js怎么处理；6、引用，把文件引用进来； WXSS：相当于css的东西。 自定义组件。 基础库。 兼容。 运行机制。 性能。 ③、组件 微信小程序已经做好的一些东西，可以直接引用。所有功能可以在简易教程里的体验小程序上体验。 ④、API 很丰富常用的都有。 ⑤、工具 下载最新工具。 ⑥、Q&amp;A 16）官方体验demo有哪些可用模块？①、组件。 视图容器，页面排版应该会用； 导航； 媒体image； 地图； ②、接口。 开放接口：微信登录、获取用户信息、分享； 界面：界面标题、标题栏加载动画、下拉刷新、上拉加载更多、模态弹窗（本店只提供演示，购买请微信资讯）； 设备：打电话； 媒体：图片； 位置：获取当前位置、使用原生地图查看位置； 17）准备工作做好了，怎么开始？用AppID开始项目，加入git 找商城demo测试 最大的问题：发呆半天，还是不知道怎么开始做。。18） 从0到1：初学者入门Demo欢迎页 使用到 view、image、text、button 组件 请记得两句话：先骨架（wxml），再穿衣服（wxss），最后搞个小动作（js）；布局时，先整体，再局部。 数据绑定 按钮模板示范 从1到2：初学者入门Demo内容列表页-文与字简介内容列表的实现 什么时候用view？什么时候用scroll-view？ 模板调用时，template中的data参数一定要写吗？如果有多个参数要怎么写？——data=”aaa, bbb, ccc” 19）还是很慌，先从最基本的首页开始做原则如下： 先骨架（wxml），再穿衣服（wxss），最后搞个小动作（js）；布局时，先整体，再局部。 如果过程中遇到什么问题，再逐一找解决办法。否则，一天过去了还什么都没做，到底还是前端的东西不怕该来该去的。 20）首页想做的功能是： 1234567891011微信授权，获取公开信息（头像、昵称等）获取地理位置下拉刷新上拉加载更多产品大图轮播搜索框logo、位置(可不要)推荐类别(可不要)产品展示（小图片、名称、价格）tabbar 按照19）的原则，先不管js部分，即微信授权、获取地理位置、上拉加载更多、下拉更新。 现在做骨架wxml，先做整体，再做局部 21）！！！问题！！！用appID的项目，测试发现api接口不能用，需要ssl验证才可以，延伸出来的问题一是需要购买证书？二是需要在ubuntu或centos上重新部署服务端项目，heroku应该是用不了的？ 22）虚拟主机支持SSL部署吗？vps支持SSL部署吗？paas平台如heroku支持SSL部署吗？ SSL证书支持独享型云虚拟主机和云服务器等，IP为独立IP。不支持共享型云虚拟主机，所以heroku也不行。 23）SSL动不动几千块/年，免费1年的用完怎么办？ 淘宝 24）vps上的项目如何debug？ 25）云部署项目（用时12h各种bug） 26）现在最大的问题： ①、SSL证书申请要多久？安装难不难？——用来绑定域名，用小程序appID做项目 ②、vps上的项目还不能上传图片，怎么传递七牛云的key？——用来做接口 参考鸿亮项目； 不能自动就先用手动的方法一个个密钥导入； 27）如何备份vultr主机？ 28）16号通宵17号到两点，分别云部署成功、SSL证书安装失败（官网Certbot工具）29）18号重新部署项目，SSL证书安装成功（用acme.sh脚本），购买阿里云199套餐，阿里云提交ICP备案，阿里云部署项目 30）19号阿里云安装SSL证书。 31）19好分类页。 category的model，api接的是categories，栏位name、good_count、current_name 定义currentcategory，栏位name、front_name 参考思路：category、count、current_category，每一个做一个接口网址。需要改路径、controller文件。 32）api里怎么加入if判断，比如没有图片时显示自定义图片？ 33）20号无从下手的时候，看不懂代码的时候，找实战案例、或看视频是最好的解决办法。 问题1、api做出来都是最外层{}即哈希，怎么做成数组？ 问题2、api怎么把index和show写在一起？ 123456789101112def index @products = Product.all render :json =&gt; &#123; :data =&gt; @products.map&#123; |product| &#123; :id =&gt; product.id, :title =&gt; product.title, :imageeee =&gt; product.image, :nodes =&gt; &#123;:id =&gt; product.id&#125; &#125; &#125; &#125;end respond_to可以用來回應不同的資料格式 12345respond_to do |format| format.html format.xml &#123; render :xml =&gt; @event.to_xml &#125; format.any &#123; render :text =&gt; &quot;WTF&quot; &#125;end 34）20号api地址拼接写法？ 1url: app.globalData.domain + &apos;/products/&apos; + id + &apos;/add_product_image&apos;, 35）面试36）22号，状态2。动态id设置和调用？wxml设置data-categoryid=“”，在js调用e.target.dataset.categoryid37）23号，游戏和手机要停，保护注意力！！！！菜单左右联动视频（比较难，要多练）38）Jbuilder重构api代码39）菜单页面左右布局css问题？如图，左边的菜单明细怎么才能显示成一列？ 123456789.box &#123; display:flex; flex-flow:row wrap; justify-content: space-between;&#125;.category&#123; width: 400rpx; background: green;&#125; 40）24号，左右联动花了整整一天时间。api用jbuilder重构花了6h。 状态大减，重新缕一缕思路。 现在最重要的事情： ①、分类页搭建，在左右联动部分计算高度、部分跳转仍有问题。要找个正确的demo看看 ②、产品页搭建 ③、搜索页搭建 ④、搜索功能 ⑤、微信登录、获取地址、加载中等js。 41)请问微信小程序let和var以及const有什么区别 var：声明全局变量，换句话理解就是，声明在for循环中的变量，跳出for循环同样可以使用。 let：声明块级变量，即局部变量。注意：必须声明’use strict’后才能使用let声明变量否则浏览并不能显示结果 。const：用于声明常量，也具有块级作用域 const PI=3.14。 42）已解决的问题： ①、产生假资料 1210.times&#123; |i| Category.create!( :name =&gt; &quot;#&#123;i&#125; Category&quot; ) &#125;100.times&#123; |i| Group.create!( :name =&gt; &quot;No.1 #&#123;i&#125; Group&quot;) &#125; ②、分类功能改进 new 1&lt;%= select_tag(:category_id, options_for_select(@categories), :prompt =&gt; &quot;Category&quot;) %&gt; edit 123&lt;%= f.select :category_id, @categories %&gt;或者&lt;%= f.association :category %&gt; 结论：戴建林的分类教程可以改进https://forum.qzy.camp/t/topic/720。controller里只要设置白名单就好，new和edit表单如果有simple_form，就用多选盒子`&lt;%= f.association :groups, :as =&gt; :check_boxes %&gt;，也可以用下拉单选&lt;%= f.association :category %&gt;`。 ③、check_box不能保存数据的问题？——可以整合到分类功能中 原因：因为只设置了一对多has_many、belongs_to，即分类有很多商品、商品属于分类，所有没有办法给一个商品设置多个分类。 解决办法：改成多对多的关系。 [1]新建model如categoryship，加入两个category_id、product_id，设置多对多关系； [2]如果要给商品设置多个分类，就在product的controller白名单设置:category_ids =&gt; []。 注意：这里的id一定要用复数加s。 [3]edit.html.erb里，加入check_box多选框的代码&lt;%= f.association :categories, :as =&gt; :check_boxes %&gt; 注意：这段代码要改的只有中间的categories，一定要用复数s。 ④、服务器报错？新增的栏位，在服务器里报错，除了在改用try(:栏位)，还能怎么处理？ cd到current目录，cd /home/deploy/rails-recipes/current； 查看log，tail -f log/production.log； 查看nginx的log（有时会是nginx的错），vi /var/log/nginx/error.log。 办法一：停止nginx，删掉之前那些nil的栏位 1Order.where(token: nil).destroy_all 办法二：停止nginx，修改之前那些nil的栏位 123product = Product.find(3)product.category_id = 2product.save 办法三：停止nginx，清空数据库 办法四：尝试清空本地数据库再试，因为一般本地也会报错，不报错是因为你本地有数据存在。所以最好清空掉再试。 ⑤、linux/ubuntu服务器，怎么reset database清空数据库、导入seed？ 先把nginx停掉，sudo service nginx stop； cd到current目录，cd /home/deploy/rails-recipes/current； 执行reset，RAILS_ENV=production DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bin/rails db:reset； (因为reset所有省略)执行保存migrate，RAILS_ENV=production bundle exec rake db:migrate； (因为reset所有省略)导入seed，RAILS_ENV=production bundle exec rake db:seed； 重开nginx，sudo service nginx start。OK了！ 进入rails c的命令bundle exec rails c production 删除指定model用Product.destroy_all（Product替换类） single seed用RAILS_ENV=production bundle exec rake db:seed:single SEED=product_seed（product_seed替换具体的single seed名称） 问题： mysql怎么drop清空数据库，试过用drop整个数据库被删掉，重新新建数据还在。 Product.destroy_all——测试发现在mysql删除后再用seed数据还在。。 解决办法： 专案拆分seed到seeds文件夹里，原seed档清空。服务器停止nginx，再执行db:reset（清空并执行seed档即相当于清空），然后执行每个single seed，最后重启nginx。 ⑥、accepts_nested_attributes_for是什么？ 参考资料http://blog.csdn.net/kunshan_shenbin/article/details/7249713。 在一对多的模型关系中通过 accepts_nested_attributes_for来简化关联对象的创建。 ⑦、多图上传功能（用在商品详情页） !!!自己的改进方法，photo仅用来放详情页小图、image用来放大图和index等页面展示，uploader用两种。这样改可以确保分类api把index和show写在一起，同时调用产品和图片。 参考资料 http://nn70-blog.logdown.com/posts/1843556-multi-pics http://yy4ever.logdown.com/posts/1069287 注意：如果图片不是正方形，要先在uploader里设置不同比例的，然后再上传资料。 遗留问题：小图并排显示的样式，动态hover效果，第一张小图片不是大图，好像不能用col-md-3如果上传图片有时多有时少怎么保证图片大小，小图片在小屏幕怎么自适应 12345678910111213141516171819.list-image-active &#123; box-shadow: 1.5px 1.5px 1.5px #666;&#125;img &#123; max-width: 100%; &#125; .square &#123; // margin-bottom: 2em; padding-top: 2em; padding-bottom: 1.3em; padding-left: 0.05em; padding-right: 0.05em; img &#123; color: #fff; opacity: 0.87; &#125;&#125; 43）要解决的功能： 【分类页】 OK。加入分类图片intro_image、及描述intro_description， OK。一个商品可以属于多个分类（百宝箱第8章），见上边② OK。check_boxes能更新不报错但是没有更新不生效？（见上边③） OK。check_boxes的UI优化，用 Select multiple 加上 Select2 Plugin OK。N+1 query修改index代码 OK。tim产品详情页多图上传功能（见上边⑦） OK。tim的seed写入详情页图片教程，看github代码http://nn70-blog.logdown.com/posts/1843706-seeds-pics OK。anndo的seed拆分教程http://anndo-blog.logdown.com/posts/1930065配合rails c的Product.destroy_all，先清空某个类的所有数据，然后重新导入这个类的seed。_ 微信登录接入网站 微信二维码分享 用小标题只限5个字wx_title以及各种validate和权限设置， validates :title, length: {minimum:1, maximum:10, message:”中文字最多填5个，英文最多填10个”} 库存量没有设置会报错， 按吉米的文章整理md文档 手机验证码 搜索功能 国内客服 网址token 选择数量自动更新 省市县级联 改用admin controller优化代码 参考吉米优化代码 多图上传预览 多出来的废弃栏位要怎么删除 详情页小图位置可以上传视频 carrierwave上传图片的时候能出现预览https://ruby-china.org/topics/25542 小程序产品详情页 小程序搜索功能 随机商品功能及做成api 小程序随机商品 详情页排版怎么做？包括商品图、详情图、详情图动画、评论http://xbearx1987-blog.logdown.com/posts/1880307 43）26号，想在过年前，把所有收藏整理、所有md文档整理发布。加12345644）完整的带图片的seed档搞定。45）域名审核通过，小程序服务器配置。46） getGoodsInfo: function () { let that = this; util.request(api.GoodsRelated, { id: that.data.id }).then(function (res) { if (res.errno === 0) { that.setData({ gallery: res.data.gallery, }); } }); },12345678910111213141516171819202122232425262728293031323334①、用bindtap点击事件，点击后跳转。wx.navigateTo，保留当前页并跳转到非Tabbar页面。可以返回到原页面。用?传值，&amp;传多个值。wx.redirectTo，关闭当前页并跳转到非Tabbar页面。用?传值，&amp;传多个值。wx.switchTab，关闭所有非Tabbar页面并跳转到Tabbar页面。不能带参数。wx.navigateBack，关闭当前页并后退x个页面。②、用navigator标签，属性open-type，相当于链接跳转。open-type指定navigate对应于wx.navigateTo、redirect对应于wx.redirectTo、switchTab对应于wx.switchTab`&lt;navigator url=&quot;../cart/cart&quot; open-type=&quot;switchTab&quot;&gt;跳转到购物车页面&lt;/navigator&gt;`，或`&lt;navigator url=&quot;../goods/goods?id=&#123;&#123;item.id&#125;&#125;&quot; wx:for=&quot;&#123;&#123;xx&#125;&#125;&quot;&gt;&lt;/navigator&gt;`不写好像相当于navigateTo。&gt; 注意：这里的`item.id`的item是wx:for调用的数组47）27号遇到很多坑：半天测试跳转navigaTo、半天在api写数组还是散列和wx:for列表调用时各种写错。&gt; 特别注意，wx:for=&quot;&#123;&#123;xxx&#125;&#125;&quot;里的数据必须是数组。&gt;&gt; 散列无法做wx:for循环，但是可以单个调用，调用方法是先在js的setData里用一个变量如`tt: res.data`，然后在wxml里用如`&lt;view&gt;&#123;&#123;tt.title&#125;&#125;&lt;/view&gt;`调用。①、Api部分，show在jbuilder写出来都是散列，不知道怎么写成数组。——暂时先放在controller②、wx:for=&quot;&#123;&#123;xxx&#125;&#125;&quot;，两个括号经常忘记③、js里的api request，经常漏了写setData(&#123;xxx&#125;)wxml 12js // pages/goods/goods.jsPage({ data: { }, onLoad: function (options) { console.log(options.id) var p_id = options.id var that = this wx.request({ url: ‘https://luccake.top/api/v1/products/&#39;+p_id, header: { ‘content-type’: ‘application/json’ // 默认值 }, success: function (res) { console.log(res.data) that.setData({ newsdata: res.data.photo, tt: res.data }) } }) }, })1234567891011121314151617181948）28号，重要的事：* OK。考虑是用单图、多图还是Rich Editor之ckeditor图文编辑器（优先测试能不能多图） * 比韵儿爸爸的好用，借用耙耙的css。https://forum.qzy.camp/t/css/1753 * 电脑端很好用，但是小程序端调用带图片的text数据会怎样？* OK。测试详情页大图用photo[0]调用* OK。看百宝箱有什么可用* OK。8点搬砖直播# 49）Jbuilder写api的几种写法结论1：对于嵌套数组，index页面最外层可用[]可用&#123;&#125;，而show页面实测要用&#123;&#125;。因为如果用[]，比如调用分类id=1的所有照片photos，要写res.data[index].photos但在小程序里这样写会报错。/*结论2：show页面干脆别重构partial了容易引发问题。用`_item.json.jbuilder`写partial表示同model调用，用`_share.json.jbuilder`写partial表示跨model调用。*/结论3：干脆所有的页面都不要写partial了，在几个文件之间写多重嵌套写出来很也乱。app/views/api/v1/categories/index.json.jbuilder json.data @categories do |c| json.id c.id json.name c.name json.category_title c.category_title json.category_image c.category_image json.products c.products do |p| json.title p.title json.photos p.photos endend1234上面index已包含所有信息，show不写也可以了，想写的话如下app/views/api/v1/categories/show.json.jbuilder json.id @category.idjson.name @category.namejson.title @category.category_titlejson.image @category.category_imagejson.photos @products do |p| json.photos p.photosendjson.products @products12345678910111213141516结论4：一般写一个index足够写全信息。因为信息量会越来越多，所以里边的数组比如上边的photos、products写完要在api网页上搜索名字，确保容易定位到。## 1、api输出[]`json.array!`，相当于map循环，输出散列；[&#123;id:1, title:1&#125;, &#123;id:2, title:2&#125;]&gt; 用于partial跨model调用，见下面代码。## 2、api输出&#123;&#125;1）`json.arr!`，输出&#123;arr!:[&#123;id:1, title:1&#125;, &#123;id:2, title:2s&#125;]&#125;2）`json.data @products do |product|`，输出&#123;data:[&#123;id:1, title:1&#125;, &#123;id:2, title:2&#125;]&#125;如下，app/views/api/v1/categories/show.json.jbuilder，其中photo是一个model，与product是多对一关系，已设置@prodcuts=@category.products json.photo @products do |product| json.number product.title json.photos product.photosend12345678910111213143）`json.data @products.each&#123;&#125;`可缩写为`json.data @products`，输出&#123;data:[&#123;id:1, title:1&#125;, &#123;id:2, title:2&#125;]&#125;&gt; 用于index.json.jbuilder页面，用在show会报错。4）`json.title @product.title`，输出&#123;title:1&#125;&gt; 用语show.json.jbuilder页面。## 3、partial用法（不好用）### 3.1 结论：实测发现partial只会让嵌套数组看起来更复杂，不如不写partial。不同model的数据也可以在同个文件里调用，如下。 json.data @categories do |category| json.number category.name json.products category.products do |product| json.photos product.photos endend12345678910### 3.2 以下不想用，供参考1）用于同个model`json.partial! &apos;item&apos;, product: @products`，常用于同个model。2）跨model调用app/views/api/v1/categories/index.json.jbuilder json.data do json.array! @categories, :partial =&gt; “item”, :as =&gt; “category”end12app/views/api/v1/categories/_item.json.jbuilder json.id category.idjson.name category.namejson.partial! ‘api/v1/products/share’, product: category.products 1250）小程序调用api，经常写错 &lt;navigator wx:for=&quot;{{navRightList[curIndex].products}}&quot; wx:key=&quot;&quot;&gt; &lt;image src=&quot;{{item.photos[0].avatar.url}}&quot;&gt;&lt;/image&gt; &lt;text&gt;{{item.title}}&lt;/text&gt; &lt;/navigator&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465以上代码解读：拿数组navRightList的当前下标curIdex下的产品数组products做循环。①、每次循环取数组products里的第一张photo即photos[0].avatar.url。②、每次循环取数组products里的标题title。api网址是https://luccake.top/api/v1/categories51）29号要做的事* 百宝箱13Rich Editor之ckeditor，10嵌套表单+19多图(还是yy助教的教程好，百宝箱的需结合百宝箱10否则报错)* OK。整理api去掉partial，相应的小程序api修改，* OK。把image改名category_id删掉，修改seed。image改成wx详情图detail_image。* OK。创客贴做一版详情图。* OK。做一个完整wx详情页* wx搜索功能52）carrierwave怎么裁剪让宽度固定高度按比例？不设置resize_to_fit或设置后按@product.image.url调用的是原图，高度用css定义也可以。&gt; 上传图片选定区域裁剪JCrop。53）[微信小程序 Image 图片实现宽度100%，高度自适应](http://www.cnblogs.com/luleixia/p/6935301.html)在image标签里加上`mode=&quot;widthFix&quot;`。54）【29号迷失】做上拉加载更多、下拉刷新功能失败，做搜索功能失败只写了一篇简单的原理。还有很多功能不会做，还有各种页面需要做，凌乱了，为什么别人学新东西都那么强？我怎么goole、淘宝就是找不到路子？是不是因为没有去过一遍官方文档？55）新大陆[ITDragon龙](http://my.csdn.net/qq_19558705)的[微信小程序入门系列课](http://blog.csdn.net/qq_19558705/article/category/6768711)，[ITDragongithtb](https://github.com/ITDragonBlog/wxapp)。第二课提到，用[weui-wxss套模板](https://github.com/Tencent/weui-wxss)，用微信demo套模板。一开始有想过，但是烦于不知道如何找到文件位置。现在才发现可以在console里看到。结论：可能要结合官方文档、特别结合官方demo、官方推荐的weui-wxss组件，结合有做的页面和功能过一遍会用到哪些，以及相应功能的逻辑，有一个全盘总体的认识。然后再具体到每一个功能去做。否则做完一个功能，又失去目的性，或折腾些不重要的功能，或折腾些太难实现的功能。&gt; 另外，还有一个小程序api高级教程，可能有用56）30蓝鸥视频57）31蓝鸥视频，跨年创业谷聚会58）1号，蓝鸥视频，ransack搜索功能59）搜索api`https://luccake.top/products/search?utf8=%E2%9C%93&amp;q=%E7%BF%BB%E7%B3%96`60）box-sizing: border-box;border-box,含义是将盒子的border和padding计算到设置的width中，而不是实际宽度中。所以，如果你设置width为100px，而border为1px的时候，盒子的实际大小仍旧是100px而不是102px。用这个属性，我们就可以完美地解决上面遇到的难题了：只需要在给两个div的css上写下box-sizing:border-box就可以了，保证两个div等宽，拥有1px长度，至于它们的框度是不是50%，你可以喊设计师自己量。除了以上两个值外，box-sizing还有一个padding-box值，顾名思义，就是把内边距计算在设置的框度内，而border是不计算的。## 61）【bug】手机测试搜索，出现invalid URL，不能拿到数据（开发工具测试却是正常）&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fn2m2j5l0xj30w80g1ac8.jpg&quot; width=&quot;4000&quot;&gt;## 1、问题描述：1）已配置：域名已备案、服务器已安装SSL证书即https认证。在小程序开发工具里测试，首页、分类页在开发工具、手机端测试均正常。2）测试搜索功能：开发工具里测试正常，可以拿数据、显示画面。但是在手机端不能拿到数据，刚刚开始请求api_url就报错&quot;invalid url&quot;。## 2、解决办法：问题出在api的url上，要把`&quot;?utf8=✓&amp;q=&quot; + e.detail.value` ，改成``&quot;?utf8=%E2%9C%93&amp;q=&quot; + encodeURI(e.detail.value)``，如下。 var API_URL = ‘https://luccake.top/v2/products/search‘ wx.request({ url: API_URL + “?utf8=%E2%9C%93&amp;q=” + encodeURI(e.detail.value), 12345678910&gt; 解说：&gt;&gt; %E2%9C%93，这种九位数编码是url的utf-8编码，每一个中文字都会转化成一个九位数的编码。可以用[URL编码/解码工具转换](http://tool.chinaz.com/tools/urlencode.aspx)。&gt;&gt; 在小程序里，要用javascript的[encodeURI(URLstring)语法，详见w3school](http://www.w3school.com.cn/jsref/jsref_encodeuri.asp)* 拓展，[javascript/微信小程序中将String进行Base64编码并UTF-8格式输出](http://blog.csdn.net/huangmeimao/article/details/74905749)，测试成功，不过转化出来的编码是八位数如&quot;6YeR6Imy&quot;。62）排序 def index @products = case params[:order] when ‘by_price’ Product.order(‘price DESC’) when ‘by_created_at’ Product.order(‘created_at DESC’) else Product.all end end 12 &lt;%= link_to(“所有商品”, products_path) %&gt; &lt;%= link_to(“按价格排序”, products_path(:order =&gt; “by_price”)) %&gt; &lt;%= link_to(“按时间排序”, products_path(:order =&gt; “by_created_at”)) %&gt; 1234567891011121314151617181920http://localhost:3000/products?utf8=%E2%9C%93&amp;q%5Btitle_cont%5D=%E7%BF%BB%E7%B3%96&amp;commit=Searchhttp://localhost:3000/products?commit=Search&amp;q%5Bs%5D=price+asc&amp;q%5Btitle_cont%5D=%E7%BF%BB%E7%B3%96&amp;utf8=%E2%9C%93localhost:3000/products?utf8=✓&amp;q%5Btitle_cont%5D=翻糖&amp;commit=Searchlocalhost:3000/products?commit=Search&amp;q%5Bs%5D=price+sac&amp;q%5Btitle_cont%5D=翻糖&amp;utf8=✓https://luccake.top/api/v1/products?utf8=%E2%9C%93&amp;q%5Btitle_or_description_cont%5D=%E7%BF%BB%E7%B3%96&amp;commit=Searchhttps://luccake.top/products?commit=Search&amp;q%5Bs%5D=price+asc&amp;q%5Btitle_or_description_cont%5D=%E7%BF%BB%E7%B3%96&amp;utf8=%E2%9C%9363）搜索功能一、在navbar，参考戴建林教程，复杂。二、在index，参考毛尧吉及ransack官方，简单。64）回头再改：search页面的代码像是高级搜索功能，可以拿掉或保留。api的product#search的paginate要拿掉。65） var searchData = wx.getStorageSync(‘searchData’) || []searchData.push(this.data.inputValue)wx.setStorageSync(‘searchData’, searchData)console.log(“fff”, searchData) 12 onShow:function(){ var getSearch = wx.getStorageSync(‘searchData’); this.setData({ getSearch:getSearch, inputValue:’’ }) console.log(‘search is onshow’) console.log(this.data.getSearch)}, ``` 66）细度文档类的视频虽然很详细，也好像了解了全盘，但是真正要做什么功能的时候，一点卵用都没有，还是要一点点去搜索摸索，做的出来一回事，很多时候做不出来，比如今天折腾的存取缓存。恐慌、焦虑。——还是实战管用。 var API_URL = ‘https://luccake.top/api/v1/products?utf8=%E2%9C%93&amp;q%5Btitle_or_description_cont%5D=‘ url: API_URL + utf + “&amp;commit=Search”","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-system-微信小程序开发(视频)openclub","slug":"5 微信小程序wx-xx/wx-system-微信小程序开发(视频)openclub","date":"2017-12-31T16:10:00.000Z","updated":"2018-01-14T09:15:21.000Z","comments":true,"path":"posts/17e87488/","link":"","permalink":"http://yoursite.com/posts/17e87488/","excerpt":"","text":"参考资料openclub微信小程序开发视频 微信小程序开发者文档 小程序课程-代码 注解方法：js文件用//xxx，wxml文件用&lt;!-- xx --&gt;，wxss文件用/* xx */ 本课程只讲解微信小程序官方文档的重点内容，细节还需要自己看。 遗留问题 注意事项： 1、admin后台不要做在小程序上，产品和分类的增加、删除、编辑不要集成在同个页面 2、第一次维护微信登录状态，并接入自己的用户系统会很花时间，搞不定求助 3、第一次做分类页面不用折腾左右联动 一、微信小程序基本概念重点讲解框架、组建、API。 打包1M大小问题。 没有公司的资格，即没有AppID，可以不填直接做体验开发。 二、tabbar的设置与相关1、文章开头给了一个完整的测试案例2、tabbar在框架-配置下。1）找到app.json文件，复制文档代码。预览可以看到底部出现首页、日志两栏。 由于屏幕适配问题，官方限制最多只能用5个tab。 123456789&quot;tabBar&quot;: &#123; &quot;list&quot;: [&#123; &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;首页&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/logs/logs&quot;, &quot;text&quot;: &quot;日志&quot; &#125;]&#125; 2）框架-配置-tabbar，找到iconPath、selectedIconPath，添加到下一段代码中 123456&#123; &quot;pagePath&quot;: &quot;pages/logs/logs&quot;, &quot;text&quot;: &quot;日志&quot;, &quot;iconPath&quot;: &quot;images/icon_seo.png&quot;, &quot;selectedIconPath&quot;: &quot;images/icon_seo_HL.png&quot;&#125; 效果图如下，日志有图标，并且点击时变成高亮绿色 3、其他配置1）网络请求时间networkTimeout模块 2）页头颜色和文字的配置page.json模块 三、注册程序及程序生命周期1、讲解1）开发-框架-逻辑层-注册程序，要了解的是生命周期的概念。onLaunch、onShow、onHide、onError、其他。 2）全局函数getApp()。先定义一个全局函数，然后读取全局共享的函数。 123// other.jsvar appInstance = getApp()console.log(appInstance.globalData) // I am global data 文档的东西比较简单，主要看一下对应的代码。 2、代码1）app.js文件代码解读： 123456789101112131415161718192021222324252627282930313233343536373839//app.jsApp(&#123; onLaunch: function () &#123; // 展示本地存储能力 var logs = wx.getStorageSync(&apos;logs&apos;) || [] logs.unshift(Date.now()) wx.setStorageSync(&apos;logs&apos;, logs) // 登录 wx.login(&#123; success: res =&gt; &#123; // 发送 res.code 到后台换取 openId, sessionKey, unionId &#125; &#125;) // 获取用户信息 wx.getSetting(&#123; success: res =&gt; &#123; if (res.authSetting[&apos;scope.userInfo&apos;]) &#123; // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框 wx.getUserInfo(&#123; success: res =&gt; &#123; // 可以将 res 发送给后台解码出 unionId this.globalData.userInfo = res.userInfo // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回 // 所以此处加入 callback 以防止这种情况 if (this.userInfoReadyCallback) &#123; this.userInfoReadyCallback(res) &#125; &#125; &#125;) &#125; &#125; &#125;) &#125;, globalData: &#123; userInfo: null &#125;&#125;) onLaunch是程序初始化时，调用API从本地缓存中获取数据 初始化后，在StorageSync上做一个set getUserInfo是一个全局函数，会在其他页面被调用。这里通过微信接口获取到我当前登录用户的头像、昵称。 设置globalData在onLaunch的时候，就可以执行对应的动作 2）加入console.log(&quot;app run function: onLaunch&quot;)，然后查看pages/index/index.js文件调用apps.js文件的getUserInfo是怎么调用的？ 12345678//app.jsApp(&#123; onLaunch: function () &#123; // 展示本地存储能力 var logs = wx.getStorageSync(&apos;logs&apos;) || [] logs.unshift(Date.now()) wx.setStorageSync(&apos;logs&apos;, logs) console.log(&quot;app run function: onLaunch&quot;) 在初始化的时候，你可以做一些基础的动作，比如获取用户信息，比如设置好初始化的本地状态，比如把网络的图片、音频先请求好，都可以在这个生命周期进行。 3）首先，用全局函数getApp()的方法，就可以去到app里面的东西。比如这里取到apps.js文件的getUserInfo。 4）onshow、onhide要退出和重新进入，通过微信开发者工具的切后台按钮切换 预告：下节讲解页面生命周期，更复杂一点，但是大同小异。 四、页面注册及页面生命周期1、讲解1）框架-逻辑层-注册页面，是页面生命周期的一些函数 2、代码1）删除上一节添加的console.log(&quot;app run function: onLaunch&quot;) 2）打开pages/logs/logs.js，这里onload页面加载已经有了。 3）增加代码 1234567891011121314151617181920212223242526272829303132onLoad: function () &#123; this.setData(&#123; logs: (wx.getStorageSync(&apos;logs&apos;) || []).map(function (log) &#123; return util.formatTime(new Date(log)) &#125;) &#125;); console.log(&quot;logs page execute: onLoad.&quot;);&#125;, onReady: function() &#123; // 页面已经加载完 console.log(&quot;logs page execute: onReady.&quot;);&#125;,onShow: function() &#123; // 页面show console.log(&quot;logs page execute: onShow.&quot;);&#125;,onHide: function() &#123; // 页面hide console.log(&quot;logs page execute: onHide.&quot;);&#125;,onUnload: function() &#123; // 页面关闭时 console.log(&quot;logs page execute: onUnload.&quot;);&#125;,onPullDownRefresh: function() &#123; // 页面下拉 console.log(&quot;logs page execute: onPullDownRefresh.&quot;);&#125;,onReachBottom: function() &#123; // 页面触底时（可以往上拉） console.log(&quot;logs page execute: onReachBottom.&quot;);&#125;, 4）先清空console的内容，然后切回首页，当我们点击日志的时候，页面只执行了onshow，为什么没有执行onload、ready呢？ 解答：跟微信的设计有关，页面加载完再来加载一次的时候，它有一个catch的机制，即onload和ready的时间就不会再执行了。 因此，点击编译按钮，然后清空console内容，再执行相同操作的时候，因为是第一次打开页面就会执行onload、onshow、onready事件。 5）继续下滑出现第四个事件onReachBottom。 6）点击切后台出现onhide，再点击切前台出现onshow。 使用场景：用户有个短信、电话进来，或切换到微信，是不是可以保留用户订单状态，再比如游戏进度 7）最后一个时间下拉刷新onPullDownRefresh，需要加一个配置才能生效。 编辑pages/logs/logs.json文件，然后下拉会在console出现onPullDownRefresh事件。 1234&#123; &quot;navigationBarTitleText&quot;: &quot;查看启动日志&quot;, &quot;enablePullDownRefresh&quot;: true&#125; 使用场景：看新闻、微博、朋友圈 时下拉刷新。 本课程时带领大家了解框架，细节的东西还要各位仔细回去看。 8）globalData和setData()的使用参考第三课。 9）生命周期图、页面路由可以看看，后面会结合真实的实例讲。 五、模块化1、讲解框架-逻辑层-模块化，涉及到globalData的使用（第三课生命周期讲过），另外是模块化的概念，把共用的函数比如js的函数封装成一些模块来开发。 因为这里涉及到一些ES5、ES6的语法问题，还涉及到一些node_modules这样一些node.js组件的引用。当然现在官方是支持不了node.js的，社区已经有了一些解决方案。 2、globalData如何获取？ 文档还要自己认真去看，包括ES6的说法（比如对平台的支持、为什么会转换）、以及一些promise的东西 1）第四课的console.log代码可删除可以保留，我选择保留。 2）复习：globalData在app.js做了声明后，所有的页面都可以进行globalData的获取。获取的办法首先通过var app = getApp();这是一个全局函数，然后通过app.getUserInfo就能取到getUserInfo等内容。 3） 【问题】app.js里的globalData: { userInfo: null }，怎么在index.js里获取到？ ①、index.js在开头var一个函数var app = getApp();、 在最后加入 注意添加代码时，自己补充结尾的逗号,或分号;。否则会报错。 123onShow: function() &#123; app.globalData.userInfo = &quot;wxopen.club&quot;&#125; ③、在log.js页面，加入var app = getApp();，然后在onshow事件加入console.log(app.globalData.userInfo); 4）演示：点击首页，这里对globalData做了设置，然后点击日志页面，console里打印出了wxopen.club的值。 使用场景：页面见参数的传递、全局共用的隐形参数或属性的获取与设置，都可以通过这种方式来show或者获取。 3、模块化的概念？专案的utils/util.js已经给了一个方法。 1）在utils文件夹新建js文件Loger.js 2）定义function 123function PrintLog(value) &#123; console.log(&quot;Loger module: &quot; + value);&#125; 3） 【问题】如何把PrintLog这个function给所有的js页面用呢 ？ ①、（ES5、ES6中说的）通过module.exports.导出的名字，这里用module.exports.PrintLog = PrintLog ②、如何在index.js中引用，页头加入var Loger = require(&quot;../../utils/Loger.js&quot;);。这种代码在logs文件夹里有参考模板。 ③、在index.js的页尾的onShow事件里直接调用Loger.PrintLog(&quot;execute index onShow&quot;); 使用场景：在任何页面调用公共的方法来做一些验证，做一些资源的请求，做一些支付串的处理，做日记的格式化，都可以做成模块，在所有的js页面里使用。 4、自己写并不强大，怎么使用nodejs的一些包呢？微信小程序开发三宗罪和解决办法 六、数据绑定与条件渲染1、讲解框架-视图层-WXML-数据绑定/条件渲染，绑定在一些js的模板里面，通过标签的形式绑定传过来的值（data里）。 2、数据绑定1）按github上修改index.js 123456789101112131415//index.js//获取应用实例var app = getApp();Page(&#123; data: &#123; motto: &apos;Hello World&apos; &#125;, onLoad: function () &#123; &#125;, onShow: function() &#123; //app.globalData.userInfo = &quot;wxopen.club&quot;; &#125;&#125;) 2）修改index.wxml，下面要在view上绑定一些东西（比如这里的motto就是绑定） 123456&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt; &lt;view class=&quot;usermotto&quot;&gt; &lt;text class=&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/view&gt; 3）比如在index.js的data里新增userid: 1234,，然后在index.wxml改成，保存后会显示。 4）比如文档里的“组件属性”，在text标签里加上id=&quot;user-&quot;。查看console的Wxml，可以看到已绑定。 3、条件渲染1）比如wx:if，在index.js的data里加入show: true,，然后index.wxml加入 123&lt;view wx:if=&quot;&#123;&#123;show&#125;&#125;&quot;&gt; TRUE99&lt;/view&gt; 当show时true的时候，就会显示TRUE99 使用场景：前台布局切换、样式切换。 2）比如wx:else，当show不是true的时候，就显示为Bad99。 123&lt;view wx:else=&quot;&#123;&#123;show&#125;&#125;&quot;&gt; Bad99&lt;/view&gt; 使用场景：用户登录时显示一部分，没登录时显示另一部分。 3）hidden的使用（类似if控制逻辑是否显示）：看userid是否等于1234，如果是就显示true即隐藏否则false即显示。修改index.wxml 123&lt;view class=&quot;usermotto&quot; hidden=&quot;&#123;&#123;userid==123 ? true: false&#125;&#125;&quot;&gt; &lt;text class=&quot;user-motto&quot; id=&quot;user-&#123;&#123;userid&#125;&#125;&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;&lt;/view&gt; hidden与wx:if的区别？ 解答：hidden组件始终会被渲染，有更高的初始渲染消耗。wx:if在条件成立时才渲染。 使用场景：需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好。 4）block wx:if，如果同时有很多个view要被控制 七、列表渲染与模板1、讲解1）框架-视图层-WXML-列表渲染/模板，用wx:for绑定一个数组，即可使用数组中的数据。 2、wx:for列表渲染1）在index.js的data中加入 1234567891011121314data: &#123; motto: &apos;Hello World&apos;, userid: 1234, show: false, array: [&#123; message: &apos;hello&apos; &#125;, &#123; message: &apos;world&apos; &#125;, &#123; message: &apos;!&apos; &#125;],&#125;, 2）index.wxml加入 123&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot; wx:for-item=&quot;foritem&quot; wx:key=&quot;index&quot;&gt; &lt;text id=&quot;messageIndex - &#123;&#123;index&#125;&#125;&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;foritem.message&#125;&#125;&lt;/text&gt;&lt;/view&gt; ①、这里的index就跟for循环的下标一样，从0开始； ②、利用wx:key加上id是一个比较好的习惯和实用的技巧，用于样式的控制。 wx:key`文档有相关资料，默认建议还是写上 3、wx:key代码演示讲解1）用文档提供的示例代码，修改logs.wxml 123456789&lt;!--logs.wxml--&gt;&lt;view class=&quot;container log-list&quot;&gt;&lt;switch wx:for=&quot;&#123;&#123;objectArray&#125;&#125;&quot; wx:key=&quot;unique&quot; style=&quot;display: block;&quot;&gt; &#123;&#123;item.id&#125;&#125; &lt;/switch&gt;&lt;button bindtap=&quot;switch&quot;&gt; Switch &lt;/button&gt;&lt;button bindtap=&quot;addToFront&quot;&gt; Add to the front &lt;/button&gt;&lt;switch wx:for=&quot;&#123;&#123;numberArray&#125;&#125;&quot; wx:key=&quot;*this&quot; style=&quot;display: block;&quot;&gt; &#123;&#123;item&#125;&#125; &lt;/switch&gt;&lt;button bindtap=&quot;addNumberToFront&quot;&gt; Add to the front &lt;/button&gt;&lt;/view&gt; 2）用文档提供的page代码，替换logs.js的page 123456789101112131415161718192021222324252627282930313233343536373839Page(&#123; data: &#123; objectArray: [ &#123;id: 5, unique: &apos;unique_5&apos;&#125;, &#123;id: 4, unique: &apos;unique_4&apos;&#125;, &#123;id: 3, unique: &apos;unique_3&apos;&#125;, &#123;id: 2, unique: &apos;unique_2&apos;&#125;, &#123;id: 1, unique: &apos;unique_1&apos;&#125;, &#123;id: 0, unique: &apos;unique_0&apos;&#125;, ], numberArray: [1, 2, 3, 4] &#125;, switch: function(e) &#123; const length = this.data.objectArray.length for (let i = 0; i &lt; length; ++i) &#123; const x = Math.floor(Math.random() * length) const y = Math.floor(Math.random() * length) const temp = this.data.objectArray[x] this.data.objectArray[x] = this.data.objectArray[y] this.data.objectArray[y] = temp &#125; this.setData(&#123; objectArray: this.data.objectArray &#125;) &#125;, addToFront: function(e) &#123; const length = this.data.objectArray.length this.data.objectArray = [&#123;id: length, unique: &apos;unique_&apos; + length&#125;].concat(this.data.objectArray) this.setData(&#123; objectArray: this.data.objectArray &#125;) &#125;, addNumberToFront: function(e)&#123; this.data.numberArray = [ this.data.numberArray.length + 1 ].concat(this.data.numberArray) this.setData(&#123; numberArray: this.data.numberArray &#125;) &#125;&#125;) 3）切换到日志页面，可以看到显示。 switch按钮，用来做随机顺序； Add to the front按钮，保留刚刚的顺序，在头部加入数字 4、模板template1）index.wxml加入 123456789&lt;template is=&quot;msgItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot;/&gt;&lt;template is=&quot;msgItem&quot; data=&quot;&#123;&#123;...itemb&#125;&#125;&quot;/&gt;&lt;template name=&quot;msgItem&quot;&gt; &lt;view&gt; &lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt; &lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt; &lt;/view&gt;&lt;/template&gt; 2）index.js加入（注意另外补充前边逗号，否则报错） 12345678910item: &#123; index: 0, msg: &apos;this is a template&apos;, time: &apos;2016-09-15&apos;&#125;,itemb: &#123; index: 99, msg: &apos;this is 99&apos;, time: &apos;2099-99-9&apos;&#125; 这样就可以把data里不同的item参数值传到同一个template，用&lt;template is=&quot;msgItem&quot; data=&quot;...&quot;/&gt;调用。 使用场景：展示一行一行样式一样的新闻。 八、事件框架-视图层-WXML-事件 1、代码1）index.wxml改成 123456&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt; &lt;view class=&quot;usermotto&quot;&gt; &lt;text class=&quot;user-motto&quot; id=&quot;user-&#123;&#123;userid&#125;&#125;&quot;&gt;&#123;&#123;motto&#125;&#125;&#123;&#123;userid&#125;&#125;&lt;/text&gt; &lt;/view&gt;&lt;/view&gt; index.js改成 12345678910111213141516//index.js//获取应用实例var app = getApp();Page(&#123; data: &#123; motto: &apos;Hello World&apos;, userid: 1234, &#125;, onLoad: function () &#123; &#125;, onShow: function() &#123; //app.globalData.userInfo = &quot;wxopen.club&quot;; &#125;&#125;) 2）用bindtap=&quot;tapName&quot;绑定手机点击的事件。 比如index.wxml加入&lt;view class=&quot;usermotto&quot; bindtap=&quot;tapMessage&quot;&gt; 3）index.js加入 123tapMessage: function (event) &#123; console.log(event);&#125;, currentTarget，里面可以传一些参数进来，里面的dataset。id也可以传进来。 detail坐标 touches的坐标，获取整个页面大小 type，当前事件类型 2、其他用法1）前台可以传一些参数进入事件里。 1。。。。。。代码演示 2）大小写的问题 3）事件冒泡问题（点击里层会往外冒出到第一层），如何阻止？ 解答：用catchtap，比如&lt;view id=&quot;middle&quot; catchtap=&quot;handleTap2&quot;&gt; 九、引用框架-视图层-WXML-引用 1、新建目录pages/common，新建文件template_item.wxml123&lt;template name=&quot;item&quot;&gt;&lt;text&gt;template text: &#123;&#123;text&#125;&#125;&lt;/text&gt;&lt;/template&gt; 2、如何在index.wxml里进行定义和传参数呢？2.1、import语法（实现模板的加载拼接，即第七课模板内容的跨文件拼接）1）在index.wxml加入 123&lt;import src=&quot;../common/template_item.wxml&quot;/&gt;...&lt;template is=&quot;item&quot; data=&quot;&#123;&#123;text: &apos;index page trans data&apos;&#125;&#125;&quot;/&gt; 2.2、include语法（实现navbar、footer的拆分）1）新建common/header.wxml，加入&lt;text&gt;HEADER&lt;/text&gt; 2）新建common/footer.wxml，加入&lt;text&gt;FOOTER&lt;/text&gt; 3）index.wxml加入 123&lt;include src=&quot;../common/header.wxml&quot;/&gt;...&lt;include src=&quot;../common/footer.wxml&quot;/&gt; 使用场景：1、页头页脚。2、新闻模块右边栏相关消息或推荐新闻，当不需要传参的时候用include，当需要传参的时候用template。 十、样式（和css差不多）框架-视图层-WXSS，单个页面的定义优先于全局样式app.wxss。 1、常规样式1）文档里提供的选择器.class、id、element（如view组件）、element, element、::after、::before。 2）内联样式 1&lt;view style=&quot;color:&#123;&#123;color&#125;&#125;;&quot; /&gt; style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。 1&lt;view class=&quot;normal_view&quot; /&gt; 类选择器名(样式类名)的集合，样式类名不需要带上.，样式类名之间用空格分隔。 3）样式导入比如@import &quot;common.wxss&quot;; 2、wx响应式样式1）rpx，即响应式px。大小屏幕总宽等分为750rpx。 换算方法：在iphone6（屏幕宽度375px）上，1rpx=0.5px 2）rem，大小屏幕宽度等分为为20rem。 换算方法：1rem=(750/20)rpx 十一、API网络请求与列表绑定知识点1：API网络请求 知识点2：复习第六章数据绑定、第七章列表渲染wx:for，把API网络请求绑定到列表 其他知识：button、image组件的使用 1、准备工作1）index.js改为 12345678//index.js//获取应用实例var app = getApp();Page(&#123; data: &#123; &#125;,&#125;) index.wxml前台页面改为 1234&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt;&lt;/view&gt; index.wxss改为 1/**index.wxss**/ app.wxss保持 12345678910/**app.wxss**/.container &#123; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: space-between; padding: 200rpx 0; box-sizing: border-box;&#125; 2、网络请求打开文档-API-发起请求 课程提供的API接口网址 2.1 讲解1）发起网络请求如下。比较简单，直接把示例代码拷过来用。 ①、url，参数 ②、data，请求参数，也可以拼接在url里 ③、header，注意不能设置Referer因为只是请求api，Referer没有意义 ④、method，基本继承了http的方法如GET、POST、PUT、DELETE等 ⑤、success、fail、complete，做回调 2）Bug &amp; Tip，当前版本的问题。 ①、上线版本一定要注意转换为TTPS，然后部署TLS的版本要注意一下。 ②、url中不能有端口（可能是要做一些域名的备案验证）。 2.2 代码1）index.wxml加入按钮，设置点击loadData 123456&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot; wx:key=&quot;index&quot;&gt; &lt;view&gt; &lt;button type=&quot;primary&quot; bindtap=&quot;loadData&quot;&gt;加载数据&lt;/button&gt; &lt;/view&gt;&lt;/view&gt; 2）index.js，加一个function，把API示例代码贴过去。并粘贴api接口网址。 1234567891011loadData: function () &#123; wx.request(&#123; url: &apos;http://newsapi.gugujiankong.com/Handler.ashx?action=getnews&amp;type=top&amp;count=10&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) &#125; &#125;)&#125; 当点击按钮的时候就会请求，然后在console里把请求的代码打印出来。 3、把API请求绑定到列表调整按钮位置。修改app.wxss，padding: 0 0rpx; 1）index.wxml加入如下，用来绑定新闻图片、类型、标题。 1234&lt;view wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot;&gt; &lt;image sytle=&quot;width:300px;height:200px;&quot; src=&quot;&#123;&#123;item.thumbnail_pic_s&#125;&#125;&quot;&gt;&lt;/image&gt; [&#123;&#123;item.realtype&#125;&#125;]&#123;&#123;item.title&#125;&#125;&lt;/view&gt; 2）index.js的data里定义上边写newsdata: &#39;&#39; 3）这里的this肯定会指向不明，所以在loadData: function(){}刚开始的时候对this做存储，即var that = this;用转移的形式把它变成that 4）在success的function里加入 123that.setData(&#123; newsdata: res.data&#125;) 最后的index.js代码如下： 1234567891011121314151617181920212223//index.js//获取应用实例var app = getApp();Page(&#123; data: &#123; newsdata: &apos;&apos; &#125;, loadData: function () &#123; var that = this; wx.request(&#123; url: &apos;http://newsapi.gugujiankong.com/Handler.ashx?action=getnews&amp;type=top&amp;count=10&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data &#125;) &#125; &#125;) &#125;&#125;) 点击按钮，会加载出图片 把API请求绑定到列表的思路： ①、设置data参数newsdata用于调用：在index.js的data里定义数组newsdata ②、在index.wxml中用wx:for=”“绑定数组。绑定数组后可以用调用数据，所以定义、、分别调用API里的图片、类型、标题。 ③、在生命周期success里，定义this.setData({})用于改变页面信息。这里是把newsdata的值由空变为res.data，即传进来的API参数。于是定义的数组便有了值，通过显示出来。 十二、项目一(1)准备工作咕咕监控，做它微信小程序的版本（小程序适用于使用频次不太多，但想起来的时候能用的产品）。 1）index.js改成 1234567//index.js//获取应用实例var app = getApp();Page(&#123; data: &#123; &#125;,&#125;) 2）index.wxml改成 1234&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt;&lt;/view&gt; 3）logs目录重命名为usercenter，四个文件名都改成login.xx login.wxml改成 123&lt;view class=&quot;page&quot;&gt;&lt;/view&gt; login.js改成 1234Page(&#123; data: &#123; &#125;,&#125;) login.json改成 123&#123; &quot;navigationBarTitleText&quot;: &quot;用户中心&quot;&#125; 4）在app.json里首尾的两个pages/logs/logs改成pages/usercenter/login； 把页头的“WeChat”改成“咕咕监控” 把“日志”改成“用户中心”； 把图标images/icon_seo.png改成images/icon_account.png； 把图标images/icon_seo_HL.png改成images/icon_account_HL.png； 图标文件放到images文件夹。 5）app.wxss改成 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222.container &#123; display: flex; flex-direction: column; min-height: 100%; justify-content: space-between;&#125;.page-header &#123; font-size: 32px; color: #aaa; margin-top: 50rpx; flex-direction: column; align-items: center;&#125;.page-header-text &#123; padding: 20rpx 40rpx;&#125;.page-header-line &#123; width: 150rpx; height: 1px; border-bottom: 1px solid #ccc;&#125;.page-body &#123; width: 100%; display: flex; flex-direction: column; align-items: center; flex-grow: 1; overflow-x: hidden;&#125;.page-body-wrapper &#123; margin-top: 100rpx; display: flex; flex-direction: column; align-items: center; width: 100%;&#125;.page-body-wrapper form &#123; width: 100%;&#125;.page-body-wording &#123; text-align: center; padding: 200rpx 100rpx;&#125;.page-body-info &#123; display: flex; flex-direction: column; align-items: center; background-color: #fff; margin-bottom: 50rpx; width: 100%; padding: 50rpx 0 150rpx 0;&#125;.page-body-title &#123; margin-bottom: 100rpx; font-size: 32rpx;&#125;.page-body-text &#123; font-size: 30rpx; line-height: 26px; color: #ccc;&#125;.page-body-text-small &#123; font-size: 24rpx; color: #000; margin-bottom: 100rpx;&#125;.page-body-form &#123; width: 100%; background-color: #fff; display: flex; flex-direction: column; width: 100%; border: 1px solid #eee;&#125;.page-body-form-item &#123; display: flex; align-items: center; margin-left: 30rpx; border-bottom: 1px solid #eee; height: 88rpx; font-size: 34rpx;&#125;.page-body-form-key &#123; width: 180rpx; color: #000;&#125;.page-body-form-value &#123; flex-grow: 1;&#125;.page-body-form-value .input-placeholder &#123; color: #b2b2b2;&#125;.page-body-form-picker &#123; display: flex; justify-content: space-between; height: 100rpx; align-items: center; font-size: 36rpx; margin-left: 20rpx; padding-right: 20rpx; border-bottom: 1px solid #eee;&#125;.page-body-form-picker-value &#123; color: #ccc;&#125;.page-body-buttons &#123; width: 100%;&#125;.page-body-button &#123; margin: 25rpx;&#125;.page-body-button image &#123; width: 150rpx; height: 150rpx;&#125;.page-footer &#123; text-align: center; color: #1aad19; font-size: 24rpx; margin: 20rpx 0;&#125;.green&#123; color: #09BB07;&#125;.red&#123; color: #F76260;&#125;.blue&#123; color: #10AEFF;&#125;.yellow&#123; color: #FFBE00;&#125;.gray&#123; color: #C9C9C9;&#125;.strong&#123; font-weight: bold;&#125;.bc_green&#123; background-color: #09BB07;&#125;.bc_red&#123; background-color: #F76260;&#125;.bc_blue&#123; background-color: #10AEFF;&#125;.bc_yellow&#123; background-color: #FFBE00;&#125;.bc_gray&#123; background-color: #C9C9C9;&#125;.tc&#123; text-align: center;&#125;.page input&#123; padding: 20rpx 30rpx; background-color: #fff; border-bottom: 1px solid #dddddd;&#125;checkbox, radio&#123; margin-right: 10rpx;&#125;.btn-area&#123; padding: 0 30px;&#125;.btn-area button&#123; margin-top: 20rpx; margin-bottom: 20rpx;&#125;.page &#123; min-height: 100%; flex: 1; font-size: 32rpx; font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif; overflow: hidden;&#125;.page__hd&#123; padding: 50rpx 50rpx 50rpx 50rpx; text-align: center;&#125;.page__title&#123; display: inline-block; padding: 20rpx 40rpx; font-size: 32rpx; color: #AAAAAA; border-bottom: 1px solid #CCCCCC;&#125;.page__desc&#123; display: none; margin-top: 20rpx; font-size: 26rpx; color: #BBBBBB;&#125;.section&#123; margin-bottom: 30rpx;&#125;.section_gap&#123; padding: 0 30rpx;&#125;.section__title&#123; margin-bottom: 16rpx; padding-left: 30rpx; padding-right: 30rpx;&#125;.section_gap .section__title&#123; padding-left: 0; padding-right: 0;&#125; 十三、项目一(2)对用户中心做布局1）login.wxml改为 123456789101112131415161718192021222324252627282930313233&lt;!--logs.wxml--&gt;&lt;view class=&quot;page&quot;&gt; &lt;view class=&quot;page__hd&quot;&gt; &lt;view class=&quot;section__ctn&quot;&gt; &lt;Image style=&quot;width:100px; height:100px;&quot; src=&quot;https://o97mkvfjm.qnssl.com/logo.png&quot;&gt;&lt;/Image&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;page__bd&quot;&gt; &lt;view class=&quot;section&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;邮箱&quot; auto-focus /&gt; &lt;/view&gt; &lt;view class=&quot;section&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;密码&quot; /&gt; &lt;/view&gt; &lt;view class=&quot;section&quot;&gt; &lt;view class=&quot;btn-area&quot;&gt; &lt;button type=&quot;primary&quot; &gt;登录&lt;/button&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;section&quot;&gt; &lt;view class=&quot;btn-area&quot;&gt; &lt;button type=&quot;default&quot; bindtap=&quot;gotoregister&quot;&gt;新用户注册&lt;/button&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;section&quot;&gt; &lt;view class=&quot;btn-area&quot;&gt; &lt;button type=&quot;default&quot; bindtap=&quot;forgotpassword&quot;&gt;忘记密码&lt;/button&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 十四、项目一(3)登录按钮功能本章涉及文档-API-界面-交互反馈-wx.showModal（显示模态弹窗）、wx.showToast（显示消息提示框） 1、界面1）在index.wxml加入文字“首页”（用来识别这一页是首页） 2）在login.wxml，登录部分改成&lt;button type=&quot;primary&quot; ontap=&quot;login&quot;&gt;登录&lt;/button&gt; 3）在login.js，加入 1234567login: function (e) &#123; wx.showToast(&#123; title: &apos;登录请求中&apos;, icon: &apos;loading&apos;, duration: 10000 &#125;);&#125; 2、网络请求 注意：在Q&amp;A里说，发布的时候要求是https请求，tls仅支持1.2及以上版本。 要用chrome浏览器-检查-Security，查看你真实部署的API后台的https版本。 1）login.js加入 1234567891011121314151617Page(&#123; data: &#123; email: &apos;&apos;, password: &apos;&apos; &#125;, login: function (e) &#123; wx.showToast(&#123; title: &apos;登录请求中&apos;, icon: &apos;loading&apos;, duration: 10000 &#125;); //网络请求开始 wx.request(&#123; url: &apos;https://api.gugujiankong.com/account/Login?email=&apos; + this.data.email + &apos;&amp;password=&apos; + this.data.password )&#125;; &#125;&#125;) 2）表单输入值的获取bindinput=&quot;&quot;（用来获取前台用户输入的账号、密码） 修改login.xwml如下： &lt;input type=&quot;text&quot; bindinput=&quot;bindEmailInput&quot; placeholder=&quot;邮箱&quot; auto-focus /&gt; &lt;input type=&quot;password&quot; bindinput=&quot;bindPasswordInput&quot; placeholder=&quot;密码&quot; /&gt; 3）login.js后台定义上边的两个方法 123456bindEmailInput: function (e) &#123; this.setData(&#123; email: e.detail.value &#125;)&#125;,bindPasswordInput: function (e) &#123; this.setData(&#123; password: e.detail.value &#125;)&#125;, xx.detail.value的用法案例可以查看官方文档-组件-表单组件-input 4）login.js的api部分加header和success 123456789101112131415header: &#123; &apos;Content-Type&apos;: &apos;application/json&apos;&#125;,success: function (res) &#123; wx.hideToast(); if (res.data.LoginStatus == 1) &#123; //进行一些用户状态的存储 &#125; else &#123; wx.showModal(&#123; title: &apos;登录失败&apos;, content: &apos;请检查您填写的用户信息！&apos;, showCancel: false, success: function (res) &#123; //回调函数 &#125; &#125;); &#125;&#125; 3、课程回顾1）如何获取表单的值？ 通过回调的形式，在后台用.detail.value方法获得值，然后在前台调用。 当某个函数（更确切的说是函数的指针）被作为参数，被另一个函数调用时，它才是回调函数。 2）登录的时候 ①、组件wx.showToast的使用 ②、https的注意事项 ③、header如何配置 ④、在回调的时候做一些状态的处理，比如wx.showModal（显示模态弹窗）、wx.showToast（显示消息提示框） 十五、项目一(4)导航-页面跳转本章涉及文档-API-界面-导航 wx.navigateTo，保留当前页面，跳转到应用内的某个页面； wx.redirectTo，关闭当前页面，跳转到应用内的某个页面。 wx.switchTab，跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。（用于没有登录时看不到底部tarbar） 1、进行tab的切换1）login.js页面， 123456wx.switchTab(&#123; url: &apos;../../pages/index/index&apos;, success: function () &#123; console.log(&quot;called switchtab.&quot;); &#125;&#125;); 2、【问题】1）测试用来登录的账号密码，在哪里设置，尝试login.js和index.js的data位置都失败了？ 十六、项目一(5)自己写的API如何让微信接受1.tls 仅支持 1.2 及以上版本； 2.部分 Android 机型需要 tls1.0 或者 tls1.1，所以请确保服务器的 tls 版本为 1.0、1.1、1.2； 即需要tls是1.2版本并向下兼容。 1、检测工具1）OnlineDomainTools，用于检测网站tls版本支持等情况。 Domain name，填的是不带https的域名，注意不是填api接口的网址。比如api.gugujiankong.com； Port，端口默认443； Ip，可以不填； 2）ipv6 test，做ios开发时，或api不仅仅给微信小程序用还给ios用。 尽量让自己的API接口支持https，不管是从安全性，还是从apple的ios、微信小程序的支持，都是必备的。 2、【问题】1）如何快速配置ipv6？ 十七、项目一(6)地图文档-组件-地图-map，地图不是逻辑和代码困难，主要是一些基础的概念。 1、几个重要的概念1）longitude经度， 2）latitude纬度， 注意：如果用高德地图，当你要给定一个经纬度做标记时，必须用高德地图API的地图工具-坐标拾取器。 3）scale，放大的级别 4）controltap事件 5）markers事件，就是可以在上边标一些点 6）show-location，显示当前位置 2、代码1）index.wxml改成 1234&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt; &lt;map id=&quot;map&quot; longitude=&quot;116.397428&quot; latitude=&quot;39.907913&quot; scale=&quot;14&quot; markers=&quot;&#123;&#123;markers&#125;&#125;&quot; style=&quot;width:100%;height:300px;&quot;&gt;&lt;/map&gt;&lt;/view&gt; 刷新可以看到首页出现地图： 2）为了在地图上标点，定义上边引用的markers。 index.js改为 1234567891011Page(&#123; data: &#123; markers: [&#123; iconPath: &quot;http://webapi.amap.com/theme/v1.3/markers/b/mark_bs.png&quot;, id: 0, latitude: 39.907354, longitude: 116.397557, width: 19, height: 33 &#125;]&#125;&#125;) 3、四个Tip1）map 组件是由客户端创建的原生组件，它的层级是最高的，不能通过 z-index 控制层级。 2）tip: 请勿在 scroll-view、swiper、picker-view、movable-view 中使用 map 组件。 3）tip: css 动画对 map 组件无效。 4）tip: map 组件使用的经纬度是火星坐标系，调用 wx.getLocation 接口需要指定 type为 gcj02 十八、flex的布局文档-组件-视图容器-view，官方文档讲的太简单了比较让人迷惑。 1）css-reference，在github上的项目已翻译成中文文档。大家可以看flexbox章节。 十九、项目一(7)微信登录文档-API-用户信息-wx.getUserInfo 1、wx.getUserInfo1）获取用户信息，withCredentials 为 true 时需要先调用 wx.login 接口。 2）需要用户授权 scope.userInfo 2、代码（官方新建专案就有）1）app.js 123456789101112131415161718192021222324252627 // 登录 wx.login(&#123; success: res =&gt; &#123; // 发送 res.code 到后台换取 openId, sessionKey, unionId &#125; &#125;) // 获取用户信息 wx.getSetting(&#123; success: res =&gt; &#123; if (res.authSetting[&apos;scope.userInfo&apos;]) &#123; // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框 wx.getUserInfo(&#123; success: res =&gt; &#123; // 可以将 res 发送给后台解码出 unionId this.globalData.userInfo = res.userInfo // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回 // 所以此处加入 callback 以防止这种情况 if (this.userInfoReadyCallback) &#123; this.userInfoReadyCallback(res) &#125; &#125; &#125;) &#125; &#125; &#125;)&#125;, 2）index.js如下。在页面onload的时候，可以把userInfo从globalData里取出来，给前台index.wxml调用 123456789101112131415161718192021222324252627282930313233343536onLoad: function () &#123; if (app.globalData.userInfo) &#123; this.setData(&#123; userInfo: app.globalData.userInfo, hasUserInfo: true &#125;) &#125; else if (this.data.canIUse)&#123; // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回 // 所以此处加入 callback 以防止这种情况 app.userInfoReadyCallback = res =&gt; &#123; this.setData(&#123; userInfo: res.userInfo, hasUserInfo: true &#125;) &#125; &#125; else &#123; // 在没有 open-type=getUserInfo 版本的兼容处理 wx.getUserInfo(&#123; success: res =&gt; &#123; app.globalData.userInfo = res.userInfo this.setData(&#123; userInfo: res.userInfo, hasUserInfo: true &#125;) &#125; &#125;) &#125; &#125;, getUserInfo: function(e) &#123; console.log(e) app.globalData.userInfo = e.detail.userInfo this.setData(&#123; userInfo: e.detail.userInfo, hasUserInfo: true &#125;) &#125; 3）index.wxml，调用昵称等信息 1&lt;text class=&quot;userinfo-nickname&quot;&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt; 3、unionID（比较重要）1）用来做统一的登录识别。 比如在京东web可以用微信登录、京东公众号用微信登录、京东还有微信小程序，三个平台的用户都是扫二维码登录，用unionID就能识别成一个用户，比如用户信息、订单可以通用。 2）一个app对应一个openID，所以不能通过openID。 4、【问题】如何通过后端API，换取openID？","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-function-分类功能之多对多many to many","slug":"5 微信小程序wx-xx/wx-function-分类功能之多对多many to many","date":"2017-12-26T16:10:00.000Z","updated":"2018-01-14T08:19:19.000Z","comments":true,"path":"posts/ba21773f/","link":"","permalink":"http://yoursite.com/posts/ba21773f/","excerpt":"","text":"一种多对多的分类写法——99测试在job-listing上直接粘贴代码可行。 https://forum.qzy.camp/t/topic/1381 作品网站https://explorer-xiaofei.herokuapp.com/firsttool Githubhttps://github.com/kristennn/Explorer/blob/master/app/views/jobs/_search_bar.html.erb 一、操作步骤1）job、character、character_ship 2）设置多对多关系 3）加入edit和new表单中 4） app/views/jobs/index.html.erb搜索框 1234&lt;%= form_tag jobs_path,method: :get do %&gt; &lt;%= text_field_tag :name %&gt; &lt;%= submit_tag &quot;确定&quot; %&gt;&lt;% end %&gt; 5）app/controllers/jobs_controller.rb搜索框数据加工 12345678910def index ... ... if params[:name].present? #新增以下六行： @character = Character.find_by(:name =&gt; params[:name]) if @character.present? @jobs = @character.jobs end end end 6）admin_jobs_controller设置白名单 1234def job_params params.require(:job).permit(:title, :description, :character_ids =&gt; []) #在这里加上character_idsend 搞定！！！添加一些数据，就可以在搜索框里测试了。 二、用自己的github案例整理教程https://github.com/jiujiubad/wx-luccake-api/commit/44d7da93a37c3f203331f8656a3cfff0966d971d","categories":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}],"tags":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/tags/ror功能/"}],"keywords":[{"name":"ror功能","slug":"ror功能","permalink":"http://yoursite.com/categories/ror功能/"}]},{"title":"invest-搬砖-快速扫除搬砖门槛 韩国 Bithumb简明指南及使用敲门","slug":"8 invest-xx投资/invest-搬砖-快速扫除搬砖门槛 韩国 Bithumb简明指南及使用敲门","date":"2017-12-25T12:10:00.000Z","updated":"2018-01-14T04:13:52.000Z","comments":true,"path":"posts/663c45b6/","link":"","permalink":"http://yoursite.com/posts/663c45b6/","excerpt":"","text":"《快速扫除搬砖门槛 韩国 Bithumb简明指南及使用敲门》币稳赢网站https://haihao.huiyutongwechat.top/ 1、大坑 1）注册要用邮箱，如果用手机就没有护照认证的选项； 2）手机号码格式4位、4位、3位； 3）图形验证码严格按大小写； 4）密码大于8位也是可以； 5）我们没有身份证，写纸条、遮挡数字的要求。护照只要求照片，很多没有写纸条，仅拍照上传也通过验证； 6）上传后的第二个页面不用管的，只需要上传护照就可以了。有些人是秒过，有些人是等一两天，看认证等级和权限就知道是不是过了。 2、交易部分1）简单交易功能，可以直接币种换币种，不需要通过韩元做中介 。。。。图片 2）点击交易所-选择你的币种-简单交易-选择想要换的币种-选择数量-简单购买订单 3）提交的是试驾单，有时候网站卡就会出现网络卡请再试，这样再多试几次就可以了； 4）如果每次交易成功都通知太烦？附加服务-右键通知-取消订购达成的选项； 3、交易手续费1）千分之1.5，两次千分之3； 2）首页-最右-手续费折扣广告，不错可以买； 3）手续费优惠券有两种。第一种2000W韩元，大概等于1btc，抵扣0.5%比特币交易额手续费。第二种一亿，大概等于5btc，抵扣2.5%比特币交易额的手续费有效期半个月。手续费券可以叠加的，一次半个月。建议买第二种。 4）手续费券购买支持比特币结算。完成后是万分之八，非常低了； 5）提币前，要绑定二次验证。在导航-我的验证-认证OTP； 6）很多人找不到取消提币的按钮？我的交易明细-取款中-点击蓝色按钮（前提是你的提币还没有被广播出去）； 另外可以查看交易记录。 4、问答时间1）用什么币来搬砖？ 海豪是用比特币，但是搬砖要以你手头有的币作为配置，不要为了搬砖而改变你现有的配置。 2）bithumb如何创建收币地址？ 导航栏-钱包管理-存款充值，然后可以看到一系列币种。 3）对冲搬砖要注册多少个交易所？ 两个。 4）除了bithumb还要注册哪个交易所？ 都行。币安、bitfinex这些。 5）手续费优惠券具体是怎么算的？ 先要预付手续费，然后接下来的一段交易金额里面不用给手续费。按照现在的打折程度大概是万分之八的手续费。 6）火币和bithumb可以搬砖吗？ 可以。 7）新手没有币怎么办？ 到otcbtc买。","categories":[{"name":"投资","slug":"投资","permalink":"http://yoursite.com/categories/投资/"}],"tags":[{"name":"投资","slug":"投资","permalink":"http://yoursite.com/tags/投资/"},{"name":"搬砖","slug":"搬砖","permalink":"http://yoursite.com/tags/搬砖/"}],"keywords":[{"name":"投资","slug":"投资","permalink":"http://yoursite.com/categories/投资/"}]},{"title":"tool-mac-mac技巧及工具","slug":"6 tool-xx工具/tool-mac-mac技巧及工具","date":"2017-12-24T16:10:00.000Z","updated":"2018-01-14T06:04:54.000Z","comments":true,"path":"posts/53af267/","link":"","permalink":"http://yoursite.com/posts/53af267/","excerpt":"","text":"mac剪贴板chrome夜景主题多桌面虚拟桌面，解放command+tab不同桌面的目的是为了形成「不同的氛围」：工作的时候不要想娱乐，娱乐的时候也不要想工作，一段时间做好一件事就可以了。 一般正经事放第一屏，下一屏辅助，接着不大重要的往后扔，全部都是全屏最大化的，隐藏dock。没必要一个桌面堆好几个窗口，看得心烦，反正来回切换双指滑一下鼠标就行，还能安心做事。 mac快捷键1、剪切首先选中文件，按Command+C复制文件； 然后按Command＋Option＋V；就可以把你的文件剪走了！ 在这里补充一下，我这里讲的是剪切文件夹，不是剪切文本和文字！ 2、窗口互相切换-同个app内Cmd+ `在两个窗口间切换","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"wx-function-商城(视频)分类菜单左右联动（详细讲wx/for和console案例）","slug":"5 微信小程序wx-xx/wx-function-商城(视频)分类菜单左右联动（详细讲wx:for和console案例）","date":"2017-12-23T16:10:00.000Z","updated":"2018-01-14T08:50:28.000Z","comments":true,"path":"posts/8282a6c/","link":"","permalink":"http://yoursite.com/posts/8282a6c/","excerpt":"","text":"参考资料视频地址https://ke.qq.com/course/243926 目录参考资料 一、菜单联动实际用途，分析 二、创建基本框架 1、基本元素 2、先做菜单/分类标题 此时的完整代码 三、创建菜单联动 3、再做菜单/分类明细 4、两个模块关联到一起 四、最终的完整代码（理清思路） 一、菜单联动实际用途，分析二、创建基本框架 1、基本元素1）写入基本左右栏元素，左右按列排放 wxml 1234567891011121314&lt;view class=&quot;Box&quot;&gt; &lt;view class=&quot;category&quot;&gt; &lt;view class=&apos;address_top&apos;&gt;地区&lt;/view&gt; &lt;view class=&apos;address_bottom&apos;&gt;分类1&lt;/view&gt; &lt;view class=&apos;address_bottom&apos;&gt;分类2&lt;/view&gt; &lt;view class=&apos;address_bottom&apos;&gt;分类3&lt;/view&gt; &lt;view class=&apos;address_bottom&apos;&gt;分类4&lt;/view&gt; &lt;/view&gt; &lt;view class=&apos;orientation_region&apos;&gt; &lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;view class=&apos;orientation_city active&apos;&gt;1&lt;/view&gt; &lt;view class=&apos;orientation_city&apos;&gt;2&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// pages/cata88/cata88.jsPage(&#123; data: &#123; orientationlist: [ &#123; id: &quot;01&quot;, region: &quot;东北&quot; &#125;, &#123; id: &quot;02&quot;, region: &quot;华北&quot; &#125;, &#123; id: &quot;03&quot;, region: &quot;华东&quot; &#125;, &#123; id: &quot;04&quot;, region: &quot;华南&quot; &#125;, &#123; id: &quot;05&quot;, region: &quot;华中&quot; &#125; ], act_addlist: [ &#123; id: &quot;01&quot;, region: &quot;东北地区&quot;, city: [ &#123; id: &quot;0101&quot;, name: &quot;白山市&quot; &#125;, &#123; id: &quot;0102&quot;, name: &quot;汕头市&quot; &#125;, &#123; id: &quot;0103&quot;, name: &quot;深圳市&quot; &#125;, &#123; id: &quot;0104&quot;, name: &quot;广州市&quot; &#125;, &#123; id: &quot;0105&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0106&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0107&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0108&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0109&quot;, name: &quot;测试5&quot; &#125;, ] &#125;, &#123; id: &quot;02&quot;, region: &quot;华北地区&quot;, city: [ &#123; id: &quot;0201&quot;, name: &quot;包头市&quot; &#125;, &#123; id: &quot;0202&quot;, name: &quot;大庆&quot; &#125;, &#123; id: &quot;0203&quot;, name: &quot;保定&quot; &#125;, &#123; id: &quot;0205&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0206&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0207&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0208&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0209&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0210&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;03&quot;, region: &quot;华东地区&quot;, city: [ &#123; id: &quot;0301&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0302&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0303&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0305&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0306&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0307&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0308&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0309&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0310&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;04&quot;, region: &quot;华南地区&quot;, city: [ &#123; id: &quot;0401&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0402&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0403&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0405&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0406&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0407&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0408&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0409&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0410&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;05&quot;, region: &quot;华中地区&quot;, city: [ &#123; id: &quot;0501&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0502&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0503&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0505&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0506&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0507&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0508&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0509&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0510&quot;, name: &quot;测试6&quot; &#125; ] &#125; ], classifySelected: &apos;&apos; &#125;,&#125;) wxss 1234567.Box &#123; display: flex; justify-content: space-between;&#125;.orientation_city.active &#123; /*测试变量classifySelected是否等于&#123;&#123;item.id&#125;&#125;，改变字色*/ color: red;&#125; 2、先做菜单/分类标题1）先把列表循环出来 12345&lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;block wx:for=&quot;&#123;&#123;orientationlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;orientation_city&quot;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;/block&gt;&lt;/view&gt; 2）点击事件。并且点击某个标题时有标红的css，需要加id。 wxml 12345&lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;block wx:for=&quot;&#123;&#123;orientationlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;orientation_city&quot; bindtap=&apos;right_fl&apos; data-id=&apos;&#123;&#123;item.id&#125;&#125;&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;/block&gt;&lt;/view&gt; js 123right_fl: function(e)&#123; console.log(e)&#125; 测试：用console左上角的自动检查工具（小箭头图标），检查是否能捕捉到wxml的id。 3）如上，加入console.log(e)后，点击后可以在console里看到这笔数据，按照console面板里这笔数据的位置来写consolelog 12345right_fl: function(e)&#123; console.log(e) var _id = e.currentTarget.dataset.id; console.log(_id)&#125; 测试：点击标题后可以看到显示id 4）增加一个变量classifySelected，用来存放当前id。 12345678right_fl: function(e)&#123; console.log(e) var _id = e.currentTarget.dataset.id; console.log(_id) this.setData (&#123; classifySelected: _id &#125;)&#125; 并把变量放到class里，增加判断：如果变量等于则增加css样式active，如果不等于就为空，即classifySelected==item.id? &#39;active&#39;:&#39;。 12345&lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;block wx:for=&quot;&#123;&#123;orientationlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;orientation_city &#123;&#123;classifySelected==item.id? &apos;active&apos;:&apos;&apos;&#125;&#125;&quot; bindtap=&apos;right_fl&apos; data-id=&apos;&#123;&#123;item.id&#125;&#125;&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;/block&gt;&lt;/view&gt; 测试：点击标题，字色变成css里设置的红色。 此时的完整代码wxml 1234567891011121314&lt;view class=&quot;box&quot;&gt; &lt;view class=&quot;category&quot; wx:for=&quot;&#123;&#123;act_addlist&#125;&#125;&quot;&gt; &lt;view class=&apos;address_top&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;item.city&#125;&#125;&quot;&gt; &lt;view class=&apos;address_bottom&apos;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&apos;orientation_region&apos;&gt; &lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;block wx:for=&quot;&#123;&#123;orientationlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;orientation_city &#123;&#123;classifySelected==item.id? &apos;active&apos;:&apos;&apos;&#125;&#125;&quot; bindtap=&apos;right_fl&apos; data-id=&apos;&#123;&#123;item.id&#125;&#125;&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;/block&gt; &lt;/view&gt;&lt;/view&gt; js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495// pages/cata88/cata88.jsPage(&#123; data: &#123; orientationlist: [ &#123; id: &quot;01&quot;, region: &quot;东北&quot; &#125;, &#123; id: &quot;02&quot;, region: &quot;华北&quot; &#125;, &#123; id: &quot;03&quot;, region: &quot;华东&quot; &#125;, &#123; id: &quot;04&quot;, region: &quot;华南&quot; &#125;, &#123; id: &quot;05&quot;, region: &quot;华中&quot; &#125; ], act_addlist: [ &#123; id: &quot;01&quot;, region: &quot;东北地区&quot;, city: [ &#123; id: &quot;0101&quot;, name: &quot;白山市&quot; &#125;, &#123; id: &quot;0102&quot;, name: &quot;汕头市&quot; &#125;, &#123; id: &quot;0103&quot;, name: &quot;深圳市&quot; &#125;, &#123; id: &quot;0104&quot;, name: &quot;广州市&quot; &#125;, &#123; id: &quot;0105&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0106&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0107&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0108&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0109&quot;, name: &quot;测试5&quot; &#125;, ] &#125;, &#123; id: &quot;02&quot;, region: &quot;华北地区&quot;, city: [ &#123; id: &quot;0201&quot;, name: &quot;包头市&quot; &#125;, &#123; id: &quot;0202&quot;, name: &quot;大庆&quot; &#125;, &#123; id: &quot;0203&quot;, name: &quot;保定&quot; &#125;, &#123; id: &quot;0205&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0206&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0207&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0208&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0209&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0210&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;03&quot;, region: &quot;华东地区&quot;, city: [ &#123; id: &quot;0301&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0302&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0303&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0305&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0306&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0307&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0308&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0309&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0310&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;04&quot;, region: &quot;华南地区&quot;, city: [ &#123; id: &quot;0401&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0402&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0403&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0405&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0406&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0407&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0408&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0409&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0410&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;05&quot;, region: &quot;华中地区&quot;, city: [ &#123; id: &quot;0501&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0502&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0503&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0505&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0506&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0507&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0508&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0509&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0510&quot;, name: &quot;测试6&quot; &#125; ] &#125; ], classifySelected: &apos;&apos; &#125;,//右边点击事件 right_fl: function(e)&#123; console.log(e) console.log(&quot;没有看到&quot;) var _id = e.currentTarget.dataset.id; console.log(_id) this.setData (&#123; classifySelected: _id &#125;) &#125;&#125;) wxss 123456789101112.box &#123; display: flex;&#125;.category&#123; background: green;&#125;.orientation_region&#123;&#125;.orientation_city.active &#123; /*测试变量classifySelected是否等于&#123;&#123;item.id&#125;&#125;，改变字色*/ color: red;&#125; 三、创建菜单联动一定要经常看官方文档，现在更新比较快，而且网上卖的教程都是根据文档改编的。 事件的注解一定要写清楚，以后再回来看比较方便。 3、再做菜单/分类明细1）先把列表循环出来。这里是两级循环。 123456&lt;view class=&quot;category&quot; wx:for=&quot;&#123;&#123;act_addlist&#125;&#125;&quot;&gt; &lt;view class=&apos;address_top&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;item.city&#125;&#125;&quot;&gt; &lt;view class=&apos;address_bottom&apos;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 2）使用滑动组件scroll-view。 12345678&lt;scroll-view class=&quot;content&quot; scroll-y=&quot;true&quot; scroll-with-animation=&quot;true&quot; scroll-into-view=&quot;&quot; bindscroll=&quot;gdcf&quot;&gt; &lt;view class=&quot;category&quot; wx:for=&quot;&#123;&#123;act_addlist&#125;&#125;&quot;&gt; &lt;view class=&apos;address_top&apos; id=&quot;&#123;&#123;aa+item.id&#125;&#125;&quot;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;item.city&#125;&#125;&quot;&gt; &lt;view class=&apos;address_bottom&apos;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/scroll-view&gt; ①、最重要的参数是scroll-into-view，值为id，且id不能以数字开头。 在每个大标题如这里的class加上，id=&quot;NaN&quot; ②、scroll-y: true，y轴方向滚动。 ③、scroll-with-animation，滚动条动画过渡。 3）开始写滚动触发 ①、bindscroll是滚动时触发，可以让文字变红色。 wxml设置bindscroll=&quot;gdcf&quot;，并且要特别注意一定要给scroll-view设置一个固定的height，否则滚动后console里没有数据出现。 wxss 12345678910.content&#123; height: 2000rpx;&#125;.address_top&#123; background: yellow; height: 76rpx; //计算高度用到&#125;.address_bottom&#123; height: 88rpx; //计算高度用到&#125; js设置 1234//滚动触发gdcf: function(e)&#123; console.log(e)&#125; console.log(e)测试：滚动后查看数据。 主要用到scrollTop参数（注意此时console中单位是px，wxss中要换算）。 123456789101112131415161718192021222324252627282930313233//滚动触发gdcf: function (e) &#123; console.log(e) var that = this; var scrollTop = e.detail.scrollTop * 2, //高度单位换算，detail.scrollTop是从console知道的。 h = 0, //默认高度0 classifySelected; that.data.orientationlist.forEach(function (classify, i) &#123; //javascript的forEach()方法，详见http://www.runoob.com/jsref/jsref-foreach.html。 // var _h = 76 + ?*88; //这里的小分类数量计算见下面length:function() console.log(classify.id);//看不懂的值，console.log一下就知道这个其实是id var _h = 76 + that.length(classify[&apos;id&apos;]) * 88; if (scrollTop &gt;= h)&#123; classifySelected = classify[&apos;id&apos;]; &#125; console.log(_h) h += _h; console.log(h) &#125;, ); that.setData(&#123; classifySelected: classifySelected &#125;)&#125;,//计算当前大分类(id值为e)下有多少个小分类length: function (e) &#123; var that = this; var act_addlist = that.data.act_addlist; //然后进行下面的循环 for (var i = 0; i &lt; act_addlist.length; i++)&#123; if (act_addlist[i][&apos;id&apos;] == e)&#123; return act_addlist[i][&apos;city&apos;].length; &#125; &#125;&#125; 测试：检查if判断句里的classifySelected是否生效，在console的AppData选项里，滚动页面后可以看到classifySelected的id变化。 4、两个模块关联到一起目的：左边滚动时右边会跳转并标红；右边点击时会标红并且左边相应跳转1）在js里，把右边点击事件right_fl里的classifySelected改成vieid； 然后在scrollview标签里加上scroll-into-view=&quot;NaN&quot;。这样右边点击时，左边就会相应地跳转。 2）此时第一个大菜单/分类并没有默认标红。 在js的onLoad事件里，加入 12345onLoad: function(options)&#123; this.setData(&#123; classifySelected: this.data.orientationlist[0][&apos;id&apos;] &#125;)&#125;, 另外，http://www.bijishequ.com/detail/568266?p=有人提出**wx.getSystemInfo**用这个获取windowHeight，把这个设置为scroll-view的高度。 四、最终的完整代码（理清思路）1、哪个view调用哪个id？1）classifySelected是在bindscroll=”gdcf”，即gdcf滚动触发的function里定义的，滚动一定的距离就会成功执行forEach循环里的classifySelected = classify[‘id’]，即等于分类标题的id。——在wxml的分类标题的class里（orientation_city），用classifySelected来判断是否等于，实现了边滚动边触发字色变红。 一句话：左边滚动事件获得的id给右边调用。 2）js右点击事件里定义了vieid，于是点击分类标题就会获得id。把这个vieid给到分类明细用，使用scroll-into-view=&quot;NaN&quot;滚动到该元素，实现了点击分类标题后会滚动到相应的分类明细位置。 一句话：右边点击事件获得的id给左边调用。 wxml 12345678910111213141516&lt;view class=&quot;box&quot;&gt; &lt;scroll-view class=&quot;content&quot; scroll-y=&quot;true&quot; scroll-with-animation=&quot;true&quot; bindscroll=&quot;gdcf&quot; scroll-into-view=&quot;&#123;&#123;aa+vieid&#125;&#125;&quot;&gt; &lt;view class=&quot;category&quot; wx:for=&quot;&#123;&#123;act_addlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&apos;address_top&apos; id=&quot;&#123;&#123;aa+item.id&#125;&#125;&quot;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;item.city&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&apos;address_bottom&apos;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/scroll-view&gt; &lt;view class=&apos;orientation_region&apos;&gt; &lt;view class=&apos;orientation&apos;&gt;自动定位&lt;/view&gt; &lt;block wx:for=&quot;&#123;&#123;orientationlist&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;orientation_city &#123;&#123;classifySelected==item.id? &apos;active&apos;:&apos;&apos;&#125;&#125;&quot; bindtap=&apos;right_fl&apos; data-id=&apos;&#123;&#123;item.id&#125;&#125;&apos;&gt;&#123;&#123;item.region&#125;&#125;&lt;/view&gt; &lt;/block&gt; &lt;/view&gt;&lt;/view&gt; js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142// pages/cata88/cata88.jsPage(&#123; data: &#123; orientationlist: [ &#123; id: &quot;01&quot;, region: &quot;东北&quot; &#125;, &#123; id: &quot;02&quot;, region: &quot;华北&quot; &#125;, &#123; id: &quot;03&quot;, region: &quot;华东&quot; &#125;, &#123; id: &quot;04&quot;, region: &quot;华南&quot; &#125;, &#123; id: &quot;05&quot;, region: &quot;华中&quot; &#125; ], act_addlist: [ &#123; id: &quot;01&quot;, region: &quot;东北地区&quot;, city: [ &#123; id: &quot;0101&quot;, name: &quot;白山市&quot; &#125;, &#123; id: &quot;0102&quot;, name: &quot;汕头市&quot; &#125;, &#123; id: &quot;0103&quot;, name: &quot;深圳市&quot; &#125;, &#123; id: &quot;0104&quot;, name: &quot;广州市&quot; &#125;, &#123; id: &quot;0105&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0106&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0107&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0108&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0109&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0110&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0111&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0112&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0113&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0114&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0115&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0116&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0117&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0118&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0119&quot;, name: &quot;测试5&quot; &#125; ] &#125;, &#123; id: &quot;02&quot;, region: &quot;华北地区&quot;, city: [ &#123; id: &quot;0201&quot;, name: &quot;包头市&quot; &#125;, &#123; id: &quot;0202&quot;, name: &quot;大庆&quot; &#125;, &#123; id: &quot;0203&quot;, name: &quot;保定&quot; &#125;, &#123; id: &quot;0205&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0206&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0207&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0208&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0209&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0210&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;03&quot;, region: &quot;华东地区&quot;, city: [ &#123; id: &quot;0301&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0302&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0303&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0305&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0306&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0307&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0308&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0309&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0310&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;04&quot;, region: &quot;华南地区&quot;, city: [ &#123; id: &quot;0401&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0402&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0403&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0405&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0406&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0407&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0408&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0409&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0410&quot;, name: &quot;测试6&quot; &#125; ] &#125;, &#123; id: &quot;05&quot;, region: &quot;华中地区&quot;, city: [ &#123; id: &quot;0501&quot;, name: &quot;东东市&quot; &#125;, &#123; id: &quot;0502&quot;, name: &quot;东东&quot; &#125;, &#123; id: &quot;0503&quot;, name: &quot;咚咚咚&quot; &#125;, &#123; id: &quot;0505&quot;, name: &quot;测试1&quot; &#125;, &#123; id: &quot;0506&quot;, name: &quot;测试2&quot; &#125;, &#123; id: &quot;0507&quot;, name: &quot;测试3&quot; &#125;, &#123; id: &quot;0508&quot;, name: &quot;测试4&quot; &#125;, &#123; id: &quot;0509&quot;, name: &quot;测试5&quot; &#125;, &#123; id: &quot;0510&quot;, name: &quot;测试6&quot; &#125; ] &#125; ], classifySelected: &apos;&apos; &#125;, onLoad: function(options)&#123; this.setData(&#123; classifySelected: this.data.orientationlist[0][&apos;id&apos;] &#125;) &#125;,//右边点击事件 right_fl: function(e)&#123; console.log(e) var _id = e.currentTarget.dataset.id; console.log(_id) this.setData (&#123; vieid: _id &#125;) &#125;,//滚动触发 gdcf: function (e) &#123; console.log(e) var that = this; var scrollTop = e.detail.scrollTop * 2, //高度单位换算，detail.scrollTop是从console知道的。 h = 0, //默认高度0 classifySelected; that.data.orientationlist.forEach(function (classify, i) &#123; //javascript的forEach()方法，自己百度。 // var _h = 76 + ?*88; //这里的小分类数量计算见下面length:function() console.log(classify.id);//看不懂的值，console.log一下就知道这个其实是id var _h = 76 + that.length(classify[&apos;id&apos;]) * 88; if (scrollTop &gt;= h)&#123; classifySelected = classify[&apos;id&apos;]; &#125; console.log(_h) h += _h; console.log(h) &#125;, ); that.setData(&#123; classifySelected: classifySelected &#125;) &#125;,//计算当前大分类下有多少个小分类 length: function (e) &#123; var that = this; var act_addlist = that.data.act_addlist; //然后进行下面的循环 for (var i = 0; i &lt; act_addlist.length; i++)&#123; if (act_addlist[i][&apos;id&apos;] == e)&#123; return act_addlist[i][&apos;city&apos;].length; &#125; &#125; &#125;&#125;) wxss 1234567891011121314151617181920212223.box&#123; display:flex; justify-content: space-between;&#125;.content&#123; height: 2000rpx;&#125;.category&#123; background: green;&#125;.address_top&#123; background: yellow; height: 76rpx;&#125;.address_bottom&#123; height: 88rpx;&#125;.orientation_region&#123; background: yellow;&#125;.orientation_city.active&#123; /*测试变量classifySelected是否等于&#123;&#123;item.id&#125;&#125;，改变字色*/ color: red;&#125;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信功能","slug":"微信功能","permalink":"http://yoursite.com/tags/微信功能/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-page-商城分类页面排版美化","slug":"5 微信小程序wx-xx/wx-page-商城分类页面排版美化","date":"2017-12-22T16:10:00.000Z","updated":"2018-01-14T07:27:53.000Z","comments":true,"path":"posts/fc1e8879/","link":"","permalink":"http://yoursite.com/posts/fc1e8879/","excerpt":"","text":"1、搜索框wxml 123456&lt;view class=&quot;search&quot;&gt; &lt;navigator url=&quot;/pages/search/search&quot; class=&quot;input&quot;&gt; &lt;image class=&quot;icon&quot;&gt;&lt;/image&gt; &lt;text class=&quot;txt&quot;&gt;商品搜索&lt;/text&gt; &lt;/navigator&gt;&lt;/view&gt; wxss 12345678910111213141516171819202122232425.search &#123; height: 88rpx; width: 100%; padding: 0 30rpx; display: flex; align-items: center;&#125;.search .input &#123; width: 690rpx; height: 56rpx; background: #ededed; border-radius: 8rpx; display: flex; align-items: center; justify-content: center;&#125;.search .icon &#123; background: url(http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/search2-2fb94833aa.png) center no-repeat; background-size: 100%; width: 28rpx;&#125;.search .txt &#123; color: #888; font-size: 30rpx;&#125; 2、左右侧代码+美化左侧wxml 1234567891011121314151617&lt;view class=&quot;catalog&quot;&gt; &lt;scroll-view class=&quot;nav&quot; scroll-y=&quot;true&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;newsda&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;item &#123;&#123;cur_id == item.id ? &apos;active&apos; : &apos;&apos;&#125;&#125;&quot; bindtap=&quot;loadData&quot; data-categoryid=&quot;&#123;&#123;item.id&#125;&#125;&quot;&gt; &#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;/block&gt; &lt;/scroll-view&gt; &lt;scroll-view class=&quot;cate&quot; scroll-y=&quot;true&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;item&quot;&gt; &lt;image src=&quot;&#123;&#123;item.image.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/block&gt; &lt;/scroll-view&gt; &lt;/view&gt; js 1234567891011121314151617181920212223242526272829303132333435363738// pages/exercies/index.jsPage(&#123; data: &#123; &#125;, onLoad: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsda: res.data.category &#125;) &#125; &#125;) &#125;, loadData: function (e) &#123; var that = this; console.log(e.target.dataset.categoryid); //测试console是否显示id号，这行可删除。 wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories/&apos; + e.target.dataset.categoryid, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.product, cur_id: e.target.dataset.categoryid &#125;) &#125; &#125;) &#125;&#125;) wxss 12345678910111213141516171819202122232425.catalog &#123; flex: 1; width: 100%; background: #fff; display: flex; border-top: 1px solid #fafafa;&#125;.catalog .nav &#123; width: 162rpx; height: 100%;&#125;.catalog .nav .item &#123; text-align: center; line-height: 90rpx; width: 162rpx; height: 90rpx; color: #333; font-size: 28rpx; border-left: 6rpx solid #fff;&#125;.catalog .nav .item.active &#123; color: #ab2b2b; font-size: 36rpx; border-left: 6rpx solid #ab2b2b;&#125;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信页面","slug":"微信页面","permalink":"http://yoursite.com/tags/微信页面/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-function-搜索的原理(实例)","slug":"5 微信小程序wx-xx/wx-function-搜索的原理(实例)","date":"2017-12-22T16:10:00.000Z","updated":"2018-01-14T11:04:23.000Z","comments":true,"path":"posts/e27ad1c4/","link":"","permalink":"http://yoursite.com/posts/e27ad1c4/","excerpt":"","text":"参考资料 微信小程序实战（二）—实现搜索页面 by杨小事er 本案例github源码 一、搜索原理 1、数据的获取和页面跳转 需要元素：input页面、resul页面、官方文档api的数据缓存部分如wx.setStorageSync、wx.clearStorageSync() input绑定bindInput函数，将输入的值存在inputValue中 button 用bindtap绑定setSearchStorage函数。这个函数主要就是先判断输入的值是否不为空，再通过getStorageSync获取到key为searchData的localStorage，如果第一次还没有set过这个key就获取[]，再将用户inputValue存的想要搜索的值放进searchData，之后再跳转到result页面。这里我只放了个案例页面。 如果在真正的生产环境中，这个函数可以通过wx.request向服务器发送请求，再把数据放进result页面中，实现真正的搜索功能。 1）新建pages/result/result，在wxml页面加入&lt;view&gt;假设这就是个结果&lt;/view&gt; 2）wxml 123&lt;input placeholder=&quot;请输入搜索的商品&quot; auto-focus bindinput=&quot;bindInput&quot; value=&quot;&#123;&#123;inputValue&#125;&#125;&quot;/&gt;&lt;button style=&quot;display:inline-block&quot; bindtap=&quot;setSearchStorage&quot;&gt;搜索&lt;/button&gt; 3）js 123456789101112131415161718192021222324252627Page(&#123; data: &#123; &#125;, bindInput: function (e) &#123; this.setData(&#123; inputValue: e.detail.value &#125;) console.log(&apos;bindInput&apos; + this.data.inputValue) &#125;, setSearchStorage: function () &#123; let data; let localStorageValue = []; if (this.data.inputValue != &apos;&apos;) &#123; //调用API从本地缓存中获取数据 var searchData = wx.getStorageSync(&apos;searchData&apos;) || [] searchData.push(this.data.inputValue) wx.setStorageSync(&apos;searchData&apos;, searchData) wx.navigateTo(&#123; url: &apos;../result/result&apos; &#125;) &#125; else &#123; console.log(&apos;空白的你搜个蛋！&apos;) &#125; // this.onLoad(); &#125; &#125;) 2、再次进入时清空搜索框原理很简单，搜索框input标签加上，把搜索框inputValue的值设置成空。 wxml 1&lt;button style=&quot;display:inline-block&quot; bindtap=&quot;clearInput&quot;&gt;×&lt;/button&gt; js 12345clearInput: function () &#123; this.setData(&#123; inputValue: &apos;&apos; &#125;)&#125; 3、显示搜索记录原理，是拿到系统缓存数据getStorageSync(‘searchData’) wxml 123&lt;view wx:for=&quot;&#123;&#123;getSearch&#125;&#125;&quot; wx:for-index=&quot;idx&quot; wx:for-item=&quot;itemName&quot; wx:key=&quot;idx&quot; &gt; &lt;view wx:if=&quot;&#123;&#123;itemName != &apos;&apos;&#125;&#125;&quot;&gt; &#123;&#123;itemName&#125;&#125; &lt;/view&gt;&lt;/view&gt; js 12345678onShow: function () &#123; var getSearch = wx.getStorageSync(&apos;searchData&apos;); this.setData(&#123; getSearch: getSearch, inputValue: &apos;&apos; &#125;) console.log(&apos;search is onshow&apos;)&#125;, 4、清空搜索记录原理，将之前的值为searchData数组的localStorage本地缓存重置为空数组。 wxml 123456&lt;modal class=&quot;modal&quot; hidden=&quot;&#123;&#123;modalHidden&#125;&#125;&quot; bindconfirm=&quot;modalChangeConfirm&quot; bindcancel=&quot;modalChangeCancel&quot;&gt; &lt;view&gt; 没有标题没有蒙层没有确定的modal &lt;/view&gt; &lt;view&gt; 内容可以插入节点 &lt;/view&gt; &lt;/modal&gt;&lt;button style=&quot;display:inline-block&quot; bindtap=&quot;clearSearchStorage&quot;&gt;清空浏览记录&lt;/button&gt; js 1234567891011121314151617181920 clearSearchStorage:function()&#123; this.setData(&#123; modalHidden:false //点击清空记录按钮，出现modal弹窗 &#125;) &#125;, modalChangeConfirm: function () &#123; wx.setStorageSync(&apos;searchData&apos;, []) this.setData(&#123; modalHidden: true //数据清空后，隐藏modal弹窗 &#125;) wx.redirectTo(&#123; url: &apos;../search/search&apos; //数据清空后，重定向到当前搜索页面 &#125;) // this.onLoad();&#125;,modalChangeCancel: function () &#123; this.setData(&#123; modalHidden: true //点击取消时，隐藏modal弹窗 &#125;)&#125; 练习 js 12345678910111213141516clickTip:function(e)&#123; var name = e.currentTarget.dataset.title wx.navigateTo(&#123; url: &apos;../p_result/p_result?str=&apos; + name, &#125;) var searchData = wx.getStorageSync(&apos;searchData&apos;) || [] searchData.push(name) wx.setStorageSync(&apos;searchData&apos;, searchData)&#125;,onShow: function () &#123; var getSearch = wx.getStorageSync(&apos;searchData&apos;); this.setData(&#123; getSearch: getSearch, &#125;) console.log(&apos;search is onshow&apos;)&#125; wxml 123&lt;view wx:for=&quot;&#123;&#123;getSearch&#125;&#125;&quot;&gt; &lt;view&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;&lt;/view","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信功能","slug":"微信功能","permalink":"http://yoursite.com/tags/微信功能/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"tool-vps-部署-heroku之figaro七牛云sendcloud","slug":"6 tool-xx工具/tool-vps-部署-heroku之figaro七牛云sendcloud","date":"2017-12-21T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/69bbe6ac/","link":"","permalink":"http://yoursite.com/posts/69bbe6ac/","excerpt":"","text":"部署@七牛云-Figaro-Sendcloud-heroku一、七牛云注意事项1、免费流量https://www.qiniu.com/ 后台-财务统计，可以看到每月10G，足够用了。 2、存储区域1）七牛云存储区域 2）准备工作 12gem &apos;carrierwave-qiniu&apos;gem &apos;qiniu-rs&apos; bundle bundle update touch config/initializers/carrierwave.rb 3）config/initializers/carrierwave.rb代码，根据上边的存储区域文档修改区域网址。 12345678910CarrierWave.configure do |config| config.storage = :qiniu config.qiniu_access_key = ENV[&quot;qiniu_access_key&quot;] config.qiniu_secret_key = ENV[&quot;qiniu_secret_key&quot;] config.qiniu_bucket = ENV[&quot;qiniu_bucket&quot;] config.qiniu_bucket_domain = ENV[&quot;qiniu_bucket_domain&quot;] config.qiniu_block_size = 4*1024*1024 config.qiniu_protocol = &quot;http&quot; config.qiniu_up_host = &quot;https://up-z2.qiniup.com&quot; #选择不同的区域时，&quot;up.qiniu.com&quot; 不同end 3、设置不同环境evn1）app/uploaders/image_uploader.rb，注解掉storage :file，加入 12345if Rails.env.production? #远端 storage :qiniuelsif Rails.env.development? #本地 storage :fileend 二、Figaro1、步骤gem &#39;figaro&#39; bundle figaro install，会自动生成 config/application.yml 文件并自动添加到 .gitignore 档案里。 cp config/application.yml config/application.yml.example 12345678910111213141516171819202122config/application.yml...(略) production: qiniu_access_key: xxxx # 你的 qiniu AccessKey qiniu_secret_key: xxxx # 你的 qiniu SecretKey qiniu_bucket: xxxx # 你的 qiniu bucket qiniu_bucket_domain: xxxx # 你的 qiniu bucket domain development: qiniu_access_key: xxxx # 你的 qiniu AccessKey qiniu_secret_key: xxxx # 你的 qiniu SecretKey qiniu_bucket: xxxx # 你的 qiniu bucket qiniu_bucket_domain: xxxx # 你的 qiniu bucket domain 注意，这里填写时不能用tab，而是要按空格键，空两格。否则会报错。 2、部署到heroku1）把 sqlite3 从第7行搬到 group :development, :test do 中间 2）在末尾新增一个 production group，加上 pg 这个 gem 123group :production do gem &apos;pg&apos;end bundle install 3）创建heroku app heroku create 先创建一个heroku app figaro heroku:set -e production heroku config 可以列出目前所有的设定 4）上传 git push heroku master heroku rake db:migrate 三、Sendcloud邮件http://sendcloud.net/ 免费用户享有30封/天的发送额度。完善信息后，免费用户60/天的发送额度。 1、步骤1）将生成的API_USER和API_KEY信息保存下来。 如果忘记 API_KEY，可以到 发送设置 生成一个新的。 2）修改开发环境用于本地测试 1234567891011121314151617config/environments/development.rbRails.application.configure do...(略)－ config.action_mailer.delivery_method = :letter_opener＋ # config.action_mailer.delivery_method = :letter_opener＋ config.action_mailer.delivery_method = :smtp＋ ActionMailer::Base.smtp_settings = &#123;＋ address: &quot;smtpcloud.sohu.com&quot;,＋ port: 25,＋ domain: &quot;heroku.com&quot;,＋ authentication: &quot;login&quot;,＋ enable_starttls_auto: true,＋ user_name: ENV[&quot;SEND_CLOUD_USER_NAME&quot;],＋ password: ENV[&quot;SEND_CLOUD_USER_KEY&quot;]＋ &#125;end 3）修改生产环境用于heroku使用 1234567891011121314151617config/environments/production.rbRails.application.configure do...(略)+ config.action_mailer.default_url_options = &#123; :host =&gt; &apos;你的herokuapp地址&apos;&#125;+ config.action_mailer.delivery_method = :smtp+ ActionMailer::Base.smtp_settings = &#123;+ address: &quot;smtpcloud.sohu.com&quot;,+ port: 25,+ domain: &quot;heroku.com&quot;,+ authentication: &quot;login&quot;,+ enable_starttls_auto: true,+ user_name: ENV[&quot;SEND_CLOUD_USER_NAME&quot;],+ password: ENV[&quot;SEND_CLOUD_USER_KEY&quot;]+ &#125;end 把密钥key加入figaro用的config/application.yml中 1​ 1234567891011124）本地测试重开rails server请用真实邮箱注册登录你的网站，生成订单后查收注册邮箱，收到邮件即可确认成功如果出现下图报错，请断开VPN再测试![](https://ws1.sinaimg.cn/large/006tNc79gy1fmhg48u121j30m807ejrj.jpg)## 2、部署到heroku git add .git commit -m “sendcloud settings”figaro heroku:set -e productiongit push heroku story5:master``` 同样请用真实邮箱注册登录你的网站，生成订单后查收注册邮箱，收到邮件即可确认成功","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"部署","slug":"部署","permalink":"http://yoursite.com/tags/部署/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-vps-部署vps云服务器","slug":"6 tool-xx工具/tool-vps-部署vps云服务器","date":"2017-12-21T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/36d18d51/","link":"","permalink":"http://yoursite.com/posts/36d18d51/","excerpt":"","text":"【问题】云服务器项目备份？梯子项目备份？vultr镜像？linux也可以用git？一、常用命令1）ssh root@45.32.42.11，使用root权限登录 2）部署更新：本地git commit 保存，重新上传到github，然后再执行cap production deploy 3）heroku部署会用figaro提交配置：heroku config 、figaro heroku:set -e production、git push heroku master 4）cat ~/.ssh/id_rsa.pub 显示本机公钥，pub就是public 5）Linux删除文件命令 1rm -r /home/ftk/apache-tomcat-5.5.20/work #不管它是文件还是目录都删掉了 6）Linux新建文件命令 12课，在远端新增 /home/deploy/rails-recipes/shared/config/secrets.yml 这个档案。执行vi 文件名，如果文件存在就是打开，不存在就是新建文件。 二、部署中的问题和bug1、安装vim（vi模式下可以编辑，否则无法输入，按方向键会变成A、B字幕）：sudo apt-get install vim问题：gnu nano如何保存退出123 linux下在编辑状态下退出请按Ctrl+X，会有两种情形：如果文件未修改，直接退出；如果修改了文件，下面会询问是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会提示输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确定，这个时候也可用Ctrl+C来取消返回。 2、【bug】mac上的rails项目安装gem &#39;mysql2&#39;报错123456An error occurred while installing mysql2 (0.4.10), and Bundler cannotcontinue.Make sure that `gem install mysql2 -v &apos;0.4.10&apos;` succeeds before bundling.In Gemfile: mysql2 解决办法：报错是因为这个gem需要mysql的支持，执行安装brew install mysql。 3、【bug】使用 Capistrano 部署项目时，执行cap production deploy:check后报错如下：12cap aborted!NoMethodError: undefined method `h&apos; for main:Object 原因：打错字。 4、【bug】cap production deploy报错 An error occurred while installing pg (0.21.0), and Bundler cannot continue.解决办法：参考https://stackoverflow.com/questions/30162572/error-message-make-sure-that-gem-install-pg-v-0-18-1-succeeds-before-bundl，在linux执行`sudo apt-get install libpq-dev` 73down vote If you’re on Ubuntu, most likely you’re missing a hidden dependencysudo apt-get install libpq-devIf you are on OS X, try these stepsInstall Xcode command line tools (Apple Developer site). If you have it already installed, update it using brew update.brew uninstall postgresql``brew install postgresql``gem install pg 5、【bug】cap production deploy报错 DEBUG [b5ba7f35] Tasks: TOP =&gt; environment【bug！！重复出现】 12345678910111213141516171819202122232425-5.0.6/lib/rails/application.rb:328:in `require_environment!&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/railties-5.0.6/lib/rails/application.rb:448:in `block in run_tasks_blocks&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/sprockets-rails-3.2.1/lib/sprockets/rails/task.rb:62:in `block (2 levels) in define&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/rake-12.3.0/exe/rake:27:in `&lt;top (required)&gt;&apos;Tasks: TOP =&gt; environment(See full trace by running task with --trace)** DEPLOY FAILED** Refer to log/capistrano.log for details. Here are the last 20 lines:/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/railties-5.0.6/lib/rails/application.rb:328:in `require_environment!&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/railties-5.0.6/lib/rails/application.rb:448:in `block in run_tasks_blocks&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/sprockets-rails-3.2.1/lib/sprockets/rails/task.rb:62:in `block (2 levels) in define&apos;/home/deploy/rails-recipes/shared/bundle/ruby/2.4.0/gems/rake-12.3.0/exe/rake:27:in `&lt;top (required)&gt;&apos; DEBUG [dc51dc81] Tasks: TOP =&gt; environment DEBUG [dc51dc81] (See full trace by running task with --trace) ✘ apple@bogon ⮀ ~/rails/jdstore1130 ⮀ ⭠ master± 解决办法： 1）参考stackoverflow上的答案，linux执行sudo apt-get install libpq-dev、 sudo apt-get install libpq-dev build-essential 2）本地检查git commit要保存，并上传到github，执行cap production deploy 6、观察部署过程发现：1）做到第12章，网站首页变成nginx的welcome 2）做到第13章，如果只修改`/etc/nginx/sites-enabled/rails-recipes.conf `，首页变成403Forbidden 3）再修改/etc/nginx/nginx.conf，页面成功换成首页 7、最大的坑：application的密钥如何配置给云服务器？1、参考12课安装 Capistrano1）/home/deploy/rails-recipes/shared/config/database.yml 2）/home/deploy/rails-recipes/shared/config/secrets.yml，生成一份就够了 开始做如下 2、实作1）修改config/deploy.rb，让它加载防止密钥的application.yml 1append :linked_files, &quot;config/database.yml&quot;, &quot;config/secrets.yml&quot;, &quot;config/application.yml&quot; 2）在远程，vi /home/deploy/rails-recipes/shared/config/application.yml ，把本地的密钥代码等整个application.yml，copy到vps云服务器 三、部署完成后的问题要部署新代码上服务器，记得需要先 git push 到 Github 上，再执行 cap production deploy 1）seed档怎么载入？ 先cd ~/rails-recipes/current，然后RAILS_ENV=production bundle exec rake db:seed 2）原来用fagiro设置的密钥怎么管理？ figaro 只有對應 heroku 而已哦，application.yml按上面第7点copy到服务器。 Nic说，管理 key 我都是用 dotenv 这只 gem 3）github提示安全漏洞？ 4）为什么gitignore指定的文件会被上传到github？怎么处理？ 详见帖子《为什么文件gitignore后还会被上传到github？gitignore文件被上传到github怎么办？》","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"部署","slug":"部署","permalink":"http://yoursite.com/tags/部署/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-vps-部署域名及解析、SSL证书、https配置、ICP备案","slug":"6 tool-xx工具/tool-vps-部署域名及解析、SSL证书、https配置、ICP备案","date":"2017-12-21T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/314d2142/","link":"","permalink":"http://yoursite.com/posts/314d2142/","excerpt":"","text":"1）mac显示隐藏文件夹和文件 1defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder 2）再次隐藏输入 1defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder 一、域名解析1、域名解析设置方法参考网站https://www.cloudxns.net/Support/detail/id/918.html 要设置两个 123www.codejie.net 指向网站IP@.codejie.net 指向网站IP 2、测试域名解析是否成功的办法不能访问经常是因为网站重定向到https。 1）域名解析设置后，先测试这个命令（网址自己替换），看status是不是200 ok。如果是就说明网站状态正常，显示不能访问是因为浏览器重定向的原因。 1curl -I http://www.luccake.top 2）ping ip、ping 网站，看看是不是全部指向云服务器ip，如果是就是已经解析成功。 123ping 120.79.71.78ping luccake.topping www.luccake.top 终端ping，可以用ctrl+c 二、Let’s Encrypt安装SSL配置https（用acme.sh脚本）用curl -I http://www.luccake.top确认域名可以被成功解析后。 参考acme.sh官网github，有中文说明，但说明里给的代码略坑，但文件很短可以简单过一遍。 1、安装步骤1）输入acme.sh –issue -d luccake.top –nginx 1curl https://get.acme.sh | sh 2）修改-d后的两个域名，修改最后面的专案目录一般是xxxx/current/public，执行 1~/.acme.sh/acme.sh --issue -d luccake.top -d www.luccake.top --webroot /home/deploy/rails-recipes/current/public 生成文件如下（本来以为下边要粘贴路径，最后才发现不用） 12345-----END CERTIFICATE-----[Mon Dec 18 13:48:07 CST 2017] Your cert is in /root/.acme.sh/luccake.top/luccake.top.cer[Mon Dec 18 13:48:07 CST 2017] Your cert key is in /root/.acme.sh/luccake.top/luccake.top.key[Mon Dec 18 13:48:07 CST 2017] The intermediate CA cert is in /root/.acme.sh/luccake.top/ca.cer[Mon Dec 18 13:48:07 CST 2017] And the full chain certs is there: /root/.acme.sh/luccake.top/fullchain.cer 3）修改命令，&lt;domain&gt;修改为购买时的域名（下面这堆是一个命令，用\\是合并在一起的意思） 1234acme.sh --installcert -d &lt;domain&gt; \\ --key-file /etc/nginx/ssl/&lt;domain&gt;.key \\ --fullchain-file /etc/nginx/ssl/fullchain.cer \\ --reloadcmd &quot;service nginx force-reload&quot; 改后是mkdir -p /etc/nginx/ssl新建目录后，执行 1234~/.acme.sh/acme.sh --installcert -d luccake.top \\ --key-file /etc/nginx/ssl/luccake.top.key \\ --fullchain-file /etc/nginx/ssl/fullchain.cer \\ --reloadcmd &quot;service nginx force-reload&quot; 成功后提示如下： 1234[Mon Dec 18 14:10:52 CST 2017] Installing key to:/etc/nginx/ssl/luccake.top.key[Mon Dec 18 14:10:52 CST 2017] Installing full chain to:/etc/nginx/ssl/fullchain.cer[Mon Dec 18 14:10:52 CST 2017] Run reload cmd: service nginx force-reload[Mon Dec 18 14:10:52 CST 2017] Reload success 4）配置文件vi /etc/nginx/sites-enabled/rails-recipes.conf 主要配置listen端口、两证书路径ssl_certificate和ssl_certificate_key、server_name可填多个域名、root网站文件夹一般是xxx/current/public，注意检查别改漏了。我的配置如下。 1234567891011121314151617181920212223242526272829303132333435server &#123; listen 443 ssl http2; ssl on; ssl_certificate /root/.acme.sh/luccake.top/fullchain.cer; ssl_certificate_key /root/.acme.sh/luccake.top/luccake.top.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; server_name luccake.top www.luccake.top; root /home/deploy/rails-recipes/current/public; index index.html index.htm; passenger_enabled on; passenger_min_instances 1; location ~ ^/assets/ &#123; root /home/deploy/rails-recipes/current/public; index index.html index.htm; expires 1y; add_header Cache-Control public; add_header ETag &quot;&quot;; break; &#125;&#125;server &#123; listen 80; server_name luccake.top www.luccake.top; server_tokens off; location / &#123; return 301 https://$host$request_uri; &#125;&#125; 5）重启Nginx，sudo service nginx restart OK，可以用域名访问网站了！！！可以在Qualys网站检测SSL证书是否已安装，输入域名即可检测。 如果在Qualys检测不到域名，就要在vps上检查证书文件是否在以上提到的文件夹内； 如果域名无法访问，就要检查配置文件。 2、遇到的bug在执行以下步骤2的时候遇到bug如下 123[Tue Dec 19 00:46:47 CST 2017] new-authz error: &#123;&quot;type&quot;:&quot;urn:acme:error:rateLimited&quot;,&quot;detail&quot;:&quot;Error creating new authz :: Too many failed authorizations recently.&quot;,&quot;status&quot;: 429&#125;[Tue Dec 19 00:46:47 CST 2017] Please add &apos;--debug&apos; or &apos;--log&apos; to check more details.[Tue Dec 19 00:46:47 CST 2017] See: https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh 2.1 原因：（2017年4月）推出了每个帐户每个主机名每小时5次失败的验证限制。这个限制会在分期上更高，所以你可以使用分段来调试连接问题。但是有的人几天过后也不行。 2.2 解法一：如果在其他vps已经有证书，可以先备份到本地，然后拷贝到新的vps先用。 远程可能可以用到的命令 cd ~，回到根目录 cd 文件夹名，切换到文件夹 ls，查看文件夹下的文件 rm -r 文件名/文件夹名，删除文件/文件夹 1）、参考vps scp对拷命令，备份证书到本地 拷贝vps上的ssl证书文件夹到本地桌面 1scp -r root@45.32.42.11:/etc/nginx/ssl /Users/apple/Desktop 拷贝ssl的https配置文件到本地桌面 1scp root@45.32.42.11:/etc/nginx/sites-enabled/rails-recipes.conf /Users/apple/Desktop 2）准备工作 conf文件改成新的vps数据库名即专案名称.conf； 证书cer文件，根据官网说法在nginx下用fullchain.cer，其他系统用购买的域名.cer； 证书key文件，用购买的域名.key，比如`luccake.top.key； 把放以上cer和key证书的文件夹ssl，重命名为购买的域名。比如luccake.top； 修改配置文件，详见上边第一节安装步骤4； 3）、上传证书到vps ①、上传本地购买的域名目录到vps目录（注意检查ip） 1scp -r /Users/apple/Desktop/luccake.top root@120.79.71.78:/root/.acme.sh ②、上传本地配置文件到vps目录（注意检查ip） 会覆盖vps上的原文件，必要时可以先进行备份。 1scp -r /Users/apple/Desktop/rails-recipes.conf root@120.79.71.78:/etc/nginx/sites-enabled ③、执行上边第一节第三部的命令（详细设置方法见上） 1234~/.acme.sh/acme.sh --installcert -d luccake.top \\ --key-file /etc/nginx/ssl/luccake.top.key \\ --fullchain-file /etc/nginx/ssl/fullchain.cer \\ --reloadcmd &quot;service nginx force-reload&quot; OK，可以用域名访问网站了！！！ 如果有问题，请参考第一节第五步检查。 3、更新1）证书更新 默认无需操作，acme.sh会帮我们在60天以后自动更新证书。 2）让acme.sh更新 1acme.sh --upgrade 或让acme.sh自动更新 1acme.sh --upgrade --auto-upgrade 4、备份证书、配置文件详见上边第二节遇到的bug第一步 三、域名ICP备案！！！！https搞定，然而还需域名ICP备案 1、知乎国外空间在国内没办法备案，通过第三方免除icp不大可能，国内的icp监管很严的 直接租个百度还是阿里什么的 直接备案不到10天就下来了，VPS什么的也不贵~ 2、各种问题阿里云学生服务器用多久能不能续费？免费半年好像抢不到续费多少钱？最便宜的服务器多少钱？ 腾讯云学生服务器用多久能不能续费？3元两个月，三年五折活动，最便宜的服务器多少钱？支持免费备案（当然备案是为了小程序能用，如果像3元套餐一样不备案就能用就不折腾了）吗？ 用Let’s Encrypt免费证书可以通过备案吗？ 1）阿里云和腾讯云普通套餐约350/年，没有谁更优越。 2）阿里云免费套餐1核2G内存60G硬盘1M带宽199元/年——非常全面的一个关于阿里云购买的帖子 ①、每天早上10点抢免费套餐版（芝麻积分足够且是新用户） ②、直接买套餐版199/年 ③、全民云计算22-28/月 3）微信小程序详细图文教程-10分钟完成微信小程序开发部署发布（3元获取腾讯云服务器带小程序支持系统） 4）小程序域名可更换5次/月、50次/年。 因此可以先买3元套餐用两个月，而且这个套餐的域名不用备案，先用这个走熟悉一下流程。然后再去买阿里云套餐和备案（备案需要先买3个月以上的服务，备案据说要10天），备案完成后再把项目转移到阿里云，域名改成阿里云的域名。 5）学生机要求学生信息和实名认证信息一致，麻烦，120/年。 结论：用腾讯云的3元套餐是因为域名不用备案，可以马上上线。购买3元套餐后，感觉要折腾东西太多，还不如节省这点注意力，多等阿里云10天的备案，而且现在直接申请项目上线也不现实。直接选购阿里云199套餐（免费太难抢浪费注意力）、并提交备案信息。==================申请SSL失败的方法================== 失败一、申请免费SSL证书（方法用错了，应该在云服务器操作自己弄成本地）申请Let’s Encrypt免费SSL证书，参考教程 1、创建帐号1）首先创建一个目录，例如 ssl，用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个 RSA 私钥用于 Let’s Encrypt 识别你的身份： 1openssl genrsa 4096 &gt; account.key 2）打印您的公钥。然后全部粘贴到输入框中openssl rsa -in account.key -pubout 2、CSR证书签名请求1）创建 RSA 私钥（兼容性好）：——我用的是这一步 1openssl genrsa 4096 &gt; domain.key 或者，创建 ECC 私钥（部分老旧操作系统、浏览器不支持。优点是证书体积小）： 12345#secp256r1openssl ecparam -genkey -name secp256r1 | openssl ec -out domain.key#secp384r1openssl ecparam -genkey -name secp384r1 | openssl ec -out domain.key 2）教程和官网的代码都不太对，按下面的来。 1openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(printf &quot;[SAN]\\nsubjectAltName=DNS:luccake.top,DNS:www.luccake.top&quot;)) 如果还是不行，也可以使用交互方式创建 CSR（需要注意 Common Name 必须为你的域名）： 1openssl req -new -sha256 -key domain.key -out domain.csr 失败二、Let’s Encrypt官网手动（不会再尝试的方法）1） 1PRIV_KEY=~/.ssh/id_rsa; echo -n &quot;eyJub25jZSI6ImRTNFNCLU5sWjc4OGc0ckd1dmswWERVa09hOXhDR2pNenJyekNaNXVIYTQifQ.eyJyZXNvdXJjZSI6Im5ldy1yZWciLCJjb250YWN0IjpbIm1haWx0bzpqaXVqaXViYWRAZ21haWwuY29tIl0sImFncmVlbWVudCI6Imh0dHBzOi8vbGV0c2VuY3J5cHQub3JnL2RvY3VtZW50cy9MRS1TQS12MS4yLU5vdmVtYmVyLTE1LTIwMTcucGRmIn0&quot; | openssl dgst -sha256 -hex -sign $PRIV_KEY 2） 1PRIV_KEY=~/.ssh/id_rsa; echo -n &quot;eyJub25jZSI6InBqbk15M0JDLVFfWHM5cVh1N2NMOE1Fa295Rmg4YW4yaS1NZUZMdnk3bXMifQ.eyJyZXNvdXJjZSI6Im5ldy1hdXRoeiIsImlkZW50aWZpZXIiOnsidHlwZSI6ImRucyIsInZhbHVlIjoibHVjY2FrZS50b3AifX0&quot; | openssl dgst -sha256 -hex -sign $PRIV_KEY 3) 1PRIV_KEY=~/.ssh/id_rsa; echo -n &quot;eyJub25jZSI6IjRvR2UzUlVzTnlwUFl4eEQ3RlZ4WkNpTlE0RUY2WEtSRUdRLWZneGpYQmcifQ.eyJyZXNvdXJjZSI6Im5ldy1hdXRoeiIsImlkZW50aWZpZXIiOnsidHlwZSI6ImRucyIsInZhbHVlIjoid3d3Lmx1Y2Nha2UudG9wIn19&quot; | openssl dgst -sha256 -hex -sign $PRIV_KEY 4） 1PRIV_KEY=~/.ssh/id_rsa; echo -n &quot;eyJub25jZSI6Ims4aXdBZmtSNzlqR3ctXzFuZEpFekN2eFlQQnhlT0hvTlptTTRwQWREeFUifQ.eyJyZXNvdXJjZSI6Im5ldy1jZXJ0IiwiY3NyIjoiTUlJRWZ6Q0NBbWNDQVFBd0FEQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUo2WDBlVlBDS2ZibW94UjJGYVZHVmJWRTZXd1RXS2cxSzNtQ0c0aWFySmhsd0k4eFpzUndYVE5qQ0ZJWHFyMmhOdktHbXpIVHRXWmxaZjZEUmVrRUZTanlBc3h5VGJKaWFFQUxDSThqQkh6WVN4Y0E2Zl95aWxad1ZWUWFIbzYwRWxKNVI5NUdYeHNaMVMwVkZzcjlieFpudlEwUmlYVDhMUDRBQ3ZlbTYyYjBNbmh6dG5IbEdiQXQ0aFJ0VTUxVUpUWHVLUjlqWXV2Y2ZoN3c5bzl6Q3ZMU3hVNy1NUzFJWGo0N0FhVThoUkZnZTN4eVVDZk9STHFBQ1daSHFGa0xreFE2THZNQlNqbVIzbS1QaTYxWWlWem9TY3NpcUpjZ1NRLW4tMWFnY0VhcGc4ejVBN3Y1bzczYzRCbjBRcjRobVBWeHdOMnpTT1pGRDFidm1XUWZaX0N3cE5WTEk3UTFTUUpuVGZpVnc0VUpPUlUyZ1pGeXZlQXo2OWptbHljZnNIRENFSFpIcGVtTVRQTF9YblgxY1FlUXVDSTF4akpJWW12akJrbVdZVGJtYWFhaW00Sll2NTFBanU5UjlyamZGTVpDVVRGUTVSX081LV9LOERrOF9fV3pUMFJVektqbld3aUJuN2U2bWhSTTFHSUFBRU50Vl9kWHMzYmVmVDROUVBfQUdRbVFnZ2Z3a0tPSW9rNDhlREN4ZXhmc24yT0NMVTItMTE4akx3QnBxWmQ5anRTNmEyYWFxTUcxQkszQlY5eEw0VEZpTndFM3ZxSWpvb0wxQldzNzJmaFhTYnlOUXotX2NSSEZMLUJuV1d0dmpsWTdhLURsQWlPNEl4dVpGdWRBcS1kLVpNNnNQVWJQX0N2Sll6Si1TejNvSUpqNFktSUdZeDBsSkRuQWdNQkFBR2dPakE0QmdrcWhraUc5dzBCQ1E0eEt6QXBNQ2NHQTFVZEVRUWdNQjZDQzJ4MVkyTmhhMlV1ZEc5d2dnOTNkM2N1YkhWalkyRnJaUzUwYjNBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFINVo5VHVwT3pwUF9MQXk0Mkx3SmVETkhNT3dlQjAtQlJVVGU0OUpNMjZjZjduenJLUnIxVHgzMFBldnRTNlliNHNjblY2Y1pJcWJQZ1NoTWpaZFdRRGlUZGJmZXNrbFVMWTF0ZVYzVHZ6UV8xTEh5dWxWRVlveWJFR0xTbGR5SjdUMTNyOFJjRTVMd3JzMERsdk1jLWdRTEIzMUNBcGQ1Nmd5Z3djNEM5YjJtUkNzOHNXUjU4WHNHa0VEdXA3SHNIU1h6QTYxZ09GbE9NVkFPbFZYOE5pSl9yT05MUUliSUE5eG8zWm1OTmJwVHd5S1c4bGtJV0xVNUhoSFpoZFdQcVUxYUIyQTcwOXdNb0VBNDA1UHhvc1VUTnVkeVBkNjZlZFRlVDNGZTY2ajNiYkJOQm9DU2tZMk1lVmFMd0NzMGxUQk1kR2dUdm1VTUZOTXRrLVRzOXhMalRmOTNNcGJ6Um5lem9lZ1RNa3F0cktXNWtFOXpSU2ozWEdXcmswUmNod2NRaGc1bTY0dUZXZDVIOWV1X3drZkhPdlNsM280N29pZXY5SkE3UzVqd2xhaW9ZOFdDMlVVVXlUNG1Hcy1KdzU4Nmp0NmZXRFJUOEhJb2xEMVhBNFhIdWZTcWsxNHNkX3dTbjNGMEhYU1BSUGt6ZTdxQl9DcHgyUTk2dXAtNWhrY0cwRWpBa2JmcnV1dGNXX3kzVWFvTWt6eVp6Z2JDdjBDeldWcWZQaVBURFIyZnM4a2JLWENlQlVLWHJabmx1VlQ0bHZYOTZwYy1yQXRhSVo5ZkdmRllIZVFOTGdKNnpodE5hMURTRU1fN3NCdDljZ0dRV2RlYWpmSDg3clBsbWY1SjFuZ2p0UGp0NnZtR2tPWVZkY0R5OEw3Z3FydFc5ek5aR0N3eUphMyJ9&quot; | openssl dgst -sha256 -hex -sign $PRIV_KEY 失败三、Let’s Encrypt官网工具Certbot申请免费SSL证书——成功！但首页被绑定成nginx的welcome页面，且配置修改可能导致网站打不开1、证书更新Let’s Encrypt的证书有效期是90天，时间短了点儿，不过Let’s Encrypt支持证书更新，到期前更新证书即可。certbot 提供了更新证书的命令cerbot renew，会自动更新所有已申请的ssl证书。 想要实现到期前自动更新的话，做个crontab任务，就不再多吧唧了。 sudo certbot –nginx -d luccake.top -d www.luccake.top /etc/letsencrypt/live/luccake.top/fullchain.pem 4）检测是否成功安装https 2、问题：SSL证书安装后，ip访问显示不安全也进不去，用域名登录成功显示https但是一直停在Welcome to nginx!页面？？很有可能是证书安装验证好域名，安装在主机里，但是还没有跟网站项目做关联配置。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"部署","slug":"部署","permalink":"http://yoursite.com/tags/部署/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"wx-function-商城(实例)分类菜单动态绑定id、动态api","slug":"5 微信小程序wx-xx/wx-function-商城(实例)分类菜单动态绑定id、动态api","date":"2017-12-21T16:10:00.000Z","updated":"2018-01-14T07:27:53.000Z","comments":true,"path":"posts/57f3edf/","link":"","permalink":"http://yoursite.com/posts/57f3edf/","excerpt":"","text":"参考demo2，下载地址微信小程序商城项目之侧栏分类效果(1) api地址http://huanqiuxiaozhen.com/wemall/goodstype/typebrandList 一、初稿wxml页面 1234567891011&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot; wx:key=&quot;index&quot;&gt; &lt;view&gt; &lt;button type=&quot;primary&quot; bindtap=&quot;loadData&quot;&gt;加载数据&lt;/button&gt; &lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; style=&quot;width:25%&quot;&gt; &lt;image sytle=&quot;width:300px;height:200px;&quot; src=&quot;&#123;&#123;item.image.url&#125;&#125;&quot;&gt;&lt;/image&gt; [&#123;&#123;item.realtype&#125;&#125;]&#123;&#123;item.title&#125;&#125;——&#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;/view&gt; js页面，onShow是一开始显示的画面（接index的api）。loadData是自定义的事件，用bindtap的用法绑定在按钮上，点击按钮显示新的画面（接show的api）。 123456789101112131415161718192021222324252627282930313233343536// pages/exercies/index.jsPage(&#123; data: &#123; &#125;, onShow: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.category &#125;) &#125; &#125;) &#125;, loadData: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories/1&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.product &#125;) &#125; &#125;) &#125;&#125;) 二、显示分类名，点击出现全部商品（因为还没有绑定分类id）wxml 123456789101112&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot; wx:key=&quot;index&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;newsda&#125;&#125;&quot; style=&quot;width:25%&quot; bindtap=&quot;loadData&quot; wx:key=&quot;&quot;&gt; &#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; style=&quot;width:25%&quot; wx:key=&quot;&quot;&gt; &lt;image sytle=&quot;width:300px;height:200px;&quot; src=&quot;&#123;&#123;item.image.url&#125;&#125;&quot;&gt;&lt;/image&gt; [&#123;&#123;item.realtype&#125;&#125;]&#123;&#123;item.title&#125;&#125;——&#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;/view&gt; js，图片接口用了固定id=1，所以只能显示1分类的商品 123456789101112131415161718192021222324252627282930313233343536// pages/exercies/index.jsPage(&#123; data: &#123; &#125;, onShow: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsda: res.data.category &#125;) &#125; &#125;) &#125;, loadData: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories/1&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.product &#125;) &#125; &#125;) &#125;&#125;) 三、动态绑定分类id1、关键代码1）目的是点击分类名称后显示相应分类id下的商品。 所以要在带有bindtap的view标签里加入data-categoryid=&quot;&quot; 注意：这里的data-变量名称，在js调用时是不能带data-，而是直接用名称 2）定义bindtap点击后指定的function，比如loadData: function (e)。 最关键的代码：参数名.target.dataset.变量名称。 如果传递的参数如上是e，那么调用方法就是e.target.dataset.categoryid。 把代码加入到api的url中，代码如下。 2、代码wxml 123456789101112&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot; wx:key=&quot;index&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;newsda&#125;&#125;&quot; style=&quot;width:25%&quot; bindtap=&quot;loadData&quot; data-categoryid=&quot;&#123;&#123;item.id&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;view wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; style=&quot;width:25%&quot; wx:key=&quot;&quot;&gt; &lt;image sytle=&quot;width:300px;height:200px;&quot; src=&quot;&#123;&#123;item.image.url&#125;&#125;&quot;&gt;&lt;/image&gt; [&#123;&#123;item.realtype&#125;&#125;]&#123;&#123;item.title&#125;&#125;——&#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;/view&gt; js 1234567891011121314151617181920212223242526272829303132333435363738// pages/exercies/index.jsPage(&#123; data: &#123; &#125;, onShow: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsda: res.data.category &#125;) &#125; &#125;) &#125;, loadData: function (e) &#123; var that = this; console.log(e.target.dataset.categoryid); //测试console是否显示id号，这行可删除。 wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories/&apos; + e.target.dataset.categoryid, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.product &#125;) &#125; &#125;) &#125;&#125;) 四、加上css wxml 12345678910111213141516171819&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt; &lt;view class=&quot;nav_left&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;newsda&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;nav_left_items &#123;&#123;cur_id == item.id ? &apos;active&apos; : &apos;&apos;&#125;&#125;&quot; bindtap=&quot;loadData&quot; data-categoryid=&quot;&#123;&#123;item.id&#125;&#125;&quot;&gt; &#123;&#123;item.name&#125;&#125; &lt;/view&gt; &lt;/block&gt; &lt;/view&gt; &lt;view class=&quot;nav_right&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;newsdata&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;view class=&quot;nav_right_items&quot;&gt; &lt;image src=&quot;&#123;&#123;item.image.url&#125;&#125;&quot;&gt;&lt;/image&gt; &lt;text&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt; &lt;/view&gt; &lt;/block&gt; &lt;/view&gt; &lt;/view&gt; js 1234567891011121314151617181920212223242526272829303132333435363738// pages/exercies/index.jsPage(&#123; data: &#123; &#125;, onShow: function () &#123; var that = this; wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories&apos;, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsda: res.data.category &#125;) &#125; &#125;) &#125;, loadData: function (e) &#123; var that = this; console.log(e.target.dataset.categoryid); //测试console是否显示id号，这行可删除。 wx.request(&#123; url: &apos;https://luccake.top/api/v1/categories/&apos; + e.target.dataset.categoryid, //仅为示例，并非真实的接口地址 header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; newsdata: res.data.product, cur_id: e.target.dataset.categoryid &#125;) &#125; &#125;) &#125;&#125;) wxss 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879page&#123; background: #f5f5f5;&#125;/*总体主盒子*/.container &#123; position: relative; width: 100%; height: 100%; background-color: #fff; color: #939393;&#125;/*左侧栏主盒子*/.nav_left&#123; /*设置行内块级元素（没使用定位）*/ display: inline-block; width: 25%; height: 100%; /*主盒子设置背景色为灰色*/ background: #f5f5f5; text-align: center;&#125;/*左侧栏list的item*/.nav_left .nav_left_items&#123; /*每个高30px*/ height: 30px; /*垂直居中*/ line-height: 30px; /*再设上下padding增加高度，总高42px*/ padding: 6px 0; /*只设下边线*/ border-bottom: 1px solid #dedede; /*文字14px*/ font-size: 14px;&#125;/*左侧栏list的item被选中时*/.nav_left .nav_left_items.active&#123; /*背景色变成白色*/ background: #fff;&#125;/*右侧栏主盒子*/.nav_right&#123; /*右侧盒子使用了绝对定位*/ position: absolute; top: 0; right: 0; flex: 1; /*宽度75%，高度占满，并使用百分比布局*/ width: 75%; height: 100%; padding: 10px; box-sizing: border-box; background: #fff;&#125;/*右侧栏list的item*/.nav_right .nav_right_items&#123; /*浮动向左*/ float: left; /*每个item设置宽度是33.33%*/ width: 33.33%; height: 80px; text-align: center;&#125;.nav_right .nav_right_items image&#123; /*被图片设置宽高*/ width: 50px; height: 30px;&#125;.nav_right .nav_right_items text&#123; /*给text设成块级元素*/ display: block; margin-top: 5px; font-size: 10px; /*设置文字溢出部分为...*/ overflow: hidden; white-space: nowrap; text-overflow: ellipsis;&#125; 五、加上wx:if当没有图片或数据时的显示","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信功能","slug":"微信功能","permalink":"http://yoursite.com/tags/微信功能/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-function-顶部标签栏/导航栏tab菜单切换","slug":"5 微信小程序wx-xx/wx-function-顶部标签栏:导航栏tab菜单切换","date":"2017-12-21T16:10:00.000Z","updated":"2018-01-14T07:27:53.000Z","comments":true,"path":"posts/32fec826/","link":"","permalink":"http://yoursite.com/posts/32fec826/","excerpt":"","text":"一、案例1 wxml文件 1234567891011121314151617&lt;view class=&quot;swiper-tab&quot;&gt; &lt;view data-current=&quot;0&quot; bindtap=&quot;swichNav&quot;&gt;哈哈&lt;/view&gt; &lt;view data-current=&quot;1&quot; bindtap=&quot;swichNav&quot;&gt;呵呵&lt;/view&gt; &lt;view data-current=&quot;2&quot; bindtap=&quot;swichNav&quot;&gt;嘿嘿&lt;/view&gt;&lt;/view&gt;&lt;swiper current=&quot;&#123;&#123;currentTab&#125;&#125;&quot; &gt; &lt;swiper-item&gt; &lt;view&gt;我是哈哈&lt;/view&gt; &lt;/swiper-item&gt; &lt;swiper-item&gt; &lt;view&gt;我是呵呵&lt;/view&gt; &lt;/swiper-item&gt; &lt;swiper-item&gt; &lt;view&gt;我是嘿嘿&lt;/view&gt; &lt;/swiper-item&gt;&lt;/swiper&gt; js文件 12345678910111213141516var app = getApp() Page( &#123; data: &#123; &#125;, swichNav: function( e ) &#123; var that = this; if( this.data.currentTab === e.target.dataset.current ) &#123; return false; &#125; else &#123; that.setData( &#123; currentTab: e.target.dataset.current &#125;) &#125; &#125;&#125;)","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信功能","slug":"微信功能","permalink":"http://yoursite.com/tags/微信功能/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"wx-system-商城兜兜汇（比较老仅供参考）","slug":"5 微信小程序wx-xx/wx-system-商城兜兜汇（比较老仅供参考）","date":"2017-12-19T16:10:00.000Z","updated":"2018-01-14T09:04:33.000Z","comments":true,"path":"posts/1ff9fef/","link":"","permalink":"http://yoursite.com/posts/1ff9fef/","excerpt":"","text":"一、通用设置page、container常用自定义参数：height: 100%;、min-height: 100%;、background: #fff;、width: 100%;。 有时会用overflow: hidden;。 12345678910111213141516/**app.wxss**/.container &#123; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: space-between; box-sizing: border-box; overflow: hidden;&#125;page &#123; font-size: 30rpx; color: #353535; letter-spacing: 2rpx; line-height: 45rpx;&#125; 二、welcome页面最小可行性代码1、通用配置1）class怎么命名？ 最外层用大写Box-welcome，里层用box-intro、box-story，再往里用intro-item1、box-item1。 这样就知道box开头的是外层，Box外头是最外层，而intro-item1、box-item1就知道是哪个模块的第几个部分。 2）怎么注解？ wxml用&lt;!-- --&gt;，wxss用/* */，js和json用// 3）字体。主字色#353535，副字色#888 123456page &#123; font-size: 30rpx; color: #353535; letter-spacing: 2rpx; line-height: 45rpx;&#125; 2、welcome的box-product产品分两列1）wxml文件 1234567&lt;view class=&quot;Box-welcome&quot;&gt; &lt;view wx:for=&quot;&#123;&#123;weldata&#125;&#125;&quot; wx:key=&quot;&quot; class=&quot;box-product&quot;&gt; &lt;image src=&apos;&#123;&#123;item.image.url&#125;&#125;&apos;&gt;&lt;/image&gt; &lt;view class=&apos;product-text1&apos;&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt; &lt;view class=&apos;product-text2&apos;&gt;&#123;&#123;item.description&#125;&#125;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 2）js文件 123456789101112131415161718192021var app = getApp();Page(&#123; data: &#123; &#125;, onShow: function () &#123; var that = this; wx.request(&#123; url: &apos;https://wx-luccake.herokuapp.com/api/v1/products&apos;, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; &#125;, success: function (res) &#123; console.log(res.data) that.setData(&#123; weldata: res.data.data, wedata: res.data.data &#125;) &#125; &#125;) &#125;&#125;) 3）wxss文件，难点在于产品怎么分成两列？ 用space-between让图片靠两边排列，加上图片width设置49%，就能排成两列。用wrap设置多行排列。 1234567891011121314151617181920.Box-welcome &#123;display: flex;flex-flow: row wrap;justify-content: space-between;padding:1%;&#125;.box-product &#123;width:49%;margin-top:1%;text-align:center;border: 1rpx solid #e8e8e8;&#125;.box-product image &#123;width:100%;height: 330rpx;&#125;.product-text2 &#123;color: #888;font-size: 25rpx;&#125; 3、welcome的box-intro大图轮播1）wxml文件，这里的mode=&quot;aspectFill&quot;用来调整图片平铺/裁剪效果（有4种缩放模式9中裁剪模式），模式虽多但是感觉aspectFill效果最好。 12345678&lt;swiper class=&quot;swiper&quot; indicator-dots=&quot;true&quot; autoplay=&quot;true&quot; interval=&quot;5000&quot; duration=&quot;1000&quot;&gt; &lt;block wx:for=&quot;&#123;&#123;movies&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;swiper-item&gt; &lt;image src=&quot;&#123;&#123;item.url&#125;&#125;&quot; mode=&quot;aspectFill&quot;/&gt; &lt;/swiper-item&gt; &lt;/block&gt;&lt;/swiper&gt; 2）js文件 1234567data: &#123; movies:[ &#123;url:&apos;https://ws2.sinaimg.cn/large/006tNc79gy1fmizuzzadzj30ku0km0u5.jpg&apos;&#125; , &#123;url:&apos;https://ws4.sinaimg.cn/large/006tNc79gy1fmizuz16u0j30u00u1405.jpg&apos;&#125; , &#123;url:&apos;https://ws4.sinaimg.cn/large/006tNc79gy1fmizus0vlkj30qm0qmdib.jpg&apos;&#125; ]&#125;, 3）wxss文明 1234567.swiper &#123; height: 400rpx; width: 100%; /*非常重要的值，没有就不会显示轮播*/&#125;.swiper image &#123; width: 100%;&#125; 4、welcome的box-search搜索1）wxml文件 123&lt;view class=&quot;box-search&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;翻糖蛋糕清新款&quot; focus/&gt;&lt;/view&gt; 2）wxss文件 12345678/*搜索框*/.box-search &#123; width: 100%; text-align: center;&#125;.box-search input &#123; padding: 20rpx;&#125; 3）js文件 12 5、底部tabbar1）app.json，图片放到/image文件夹 1234567891011121314151617&quot;tabBar&quot;: &#123; &quot;color&quot;: &quot;#7A7E83&quot;, &quot;selectedColor&quot;: &quot;#3cc51f&quot;, &quot;borderStyle&quot;: &quot;black&quot;, &quot;backgroundColor&quot;: &quot;#ffffff&quot;, &quot;list&quot;: [&#123; &quot;pagePath&quot;: &quot;pages/welcome/welcome&quot;, &quot;iconPath&quot;: &quot;image/icon_component.png&quot;, &quot;selectedIconPath&quot;: &quot;image/icon_component_HL.png&quot;, &quot;text&quot;: &quot;主页&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/logs/logs&quot;, &quot;iconPath&quot;: &quot;image/icon_API.png&quot;, &quot;selectedIconPath&quot;: &quot;image/icon_API_HL.png&quot;, &quot;text&quot;: &quot;分类&quot; &#125;]&#125; 三、分类页面1、wxml最初的布局123456789&lt;view class=&apos;container&apos;&gt; &lt;view class=&apos;search&apos;&gt;&lt;/view&gt; &lt;view class=&apos;category&apos;&gt; &lt;scroll-view class=&apos;left&apos; scroll-y=&quot;true&quot;&gt; &lt;/scroll-view&gt; &lt;scroll-view class=&apos;right&apos; scroll-y=&quot;true&quot;&gt; &lt;/scroll-view&gt; &lt;/view&gt;&lt;/view&gt; 最外层还是用container，其他层简单用left、right等简单命名。 image、text等标签，不用加class，直接在css定义search image{...}。 2、搜索框wxml 123456&lt;view class=&apos;search&apos;&gt; &lt;navigator url=&quot;/pages/search/search&quot; class=&quot;input&quot;&gt; &lt;image&gt;&lt;/image&gt; &lt;text&gt;商品搜索, 共xxx款好物&lt;/text&gt; &lt;/navigator&gt; &lt;/view&gt; wxss 1234567891011121314151617181920212223242526272829/* page &#123; height: 100%;&#125; */.search &#123; height: 88rpx; padding: 0 30rpx; display: flex; align-items: center;&#125;.search .input &#123; width: 690rpx; height: 56rpx; background: #ededed; border-radius: 8rpx; display: flex; align-items: center; justify-content: center;&#125;.search image &#123; background: url(http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/search2-2fb94833aa.png) center no-repeat; background-size: 100%; width: 28rpx; height: 28rpx;&#125;.search text &#123; color: #888; padding-left: 10rpx; font-size: 30rpx;&#125; 3、左侧分类标题3.1 思路：1）先循环出api数据， 2）bindtap点击事件，并设置data-id=”“ 3）var一个_id，设置为当前id即e.currentTarget.dataset.id。然后用this.setData，把_id的值给到left_id 4）回到wxml，用left_id==item.id? &#39;active&#39;:&#39;&#39;判断，如果点击的left_id等于item.id，就会触发active的css样式。这里的效果是字色变红。 3.2 问题1）怎么设置初始id和index（用于初始化后显示图片）？ 可以在js的page的data里，设置index=0、id=1。 4、右侧分类明细4.1 思路：1）目的是可以用wx:for=&quot;&quot;加载数据。 2）拿到navRightList的数据表。如果api包含index和show，在同个api请求中顺便setData，让navRightList: res.data.categories。如果网址分开就分开写request。 3）在左侧标题的view里，先设置data-id=&quot;&quot;、data-index=&quot;&quot;。然后在点击事件bindtap=”switch_right”上，设置当前id和index的值，值的具体获取方法可以先console.log(e)，从获取的数据表中去看。 4）OK了，可以通过wx:for=&quot;&quot;拿数据。 5）初始化的数据（字色变红、加载第一组的图片）。在js的page的data里，设置left_id=1、curIndex=0。 6）最后改wxss。 四、商品详情页wxml 123456789101112131415161718192021222324&lt;swiper class=&quot;goodsimgs&quot; indicator-dots=&quot;true&quot; autoplay=&quot;true&quot; interval=&quot;3000&quot; duration=&quot;1000&quot;&gt; &lt;swiper-item wx:for=&quot;&#123;&#123;picdata&#125;&#125;&quot; wx:key=&quot;&quot;&gt; &lt;image src=&quot;&#123;&#123;item.avatar.medium.url&#125;&#125;&quot; &gt;&lt;/image&gt; &lt;/swiper-item&gt;&lt;/swiper&gt;&lt;view class=&quot;service-policy&quot;&gt; &lt;view class=&quot;item&quot;&gt;30天无忧退货&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;48小时快速退款&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;满88元免邮费&lt;/view&gt;&lt;/view&gt;&lt;view class=&quot;goods-info&quot;&gt; &lt;view class=&quot;c&quot;&gt; &lt;text class=&quot;name&quot;&gt;&#123;&#123;goods.title&#125;&#125;&lt;/text&gt; &lt;text class=&quot;desc&quot;&gt;&#123;&#123;goods.description&#125;&#125;&lt;/text&gt; &lt;text class=&quot;price&quot;&gt;￥&#123;&#123;goods.price&#125;&#125;&lt;/text&gt; &lt;view class=&quot;brand&quot; wx:if=&quot;&#123;&#123;brand.name&#125;&#125;&quot;&gt; &lt;navigator url=&quot;../brandDetail/brandDetail?id=&#123;&#123;brand.brandId&#125;&#125;&quot;&gt; &lt;text&gt;&#123;&#123;brand.name&#125;&#125;&lt;/text&gt; &lt;/navigator&gt; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; js 1234567891011121314151617181920212223242526// pages/goods/goods.jsPage(&#123; data: &#123; &#125;, onLoad: function (options) &#123; console.log(options.id) var p_id = options.id var that = this wx.request(&#123; url: &apos;https://luccake.top/api/v1/products/&apos; + p_id, header: &#123; &apos;content-type&apos;: &apos;application/json&apos; // 默认值 &#125;, success: function (res) &#123; console.log(res.data.photos) that.setData(&#123; picdata: res.data.photos, goods: res.data &#125;) &#125; &#125;) &#125;,&#125;) wxss 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586.container&#123; margin-bottom: 100rpx;&#125;.goodsimgs&#123; width: 100%; height: 750rpx;&#125;.goodsimgs image&#123; width: 100%; height: 750rpx;&#125;.service-policy&#123; width: 750rpx; height: 75rpx; background: #f8f8f8; padding: 0 31.25rpx; display: flex; flex-flow: row nowrap; align-items: center; justify-content: space-between;&#125;.service-policy .item&#123; background: url(http://nos.netease.com/mailpub/hxm/yanxuan-wap/p/20150730/style/img/icon-normal/servicePolicyRed-518d32d74b.png) 0 center no-repeat; background-size: 10rpx; padding-left: 15rpx; display: flex; align-items: center; font-size: 25rpx;&#125;.goods-info&#123; width: 750rpx; height: 306rpx; overflow: hidden; background: #fff;&#125;.goods-info .c&#123; display: block; width: 718.75rpx; height: 100%; margin-left: 31.25rpx; padding: 38rpx 31.25rpx 38rpx 0; border-bottom: 1px solid #f4f4f4;&#125;.goods-info .c text&#123; display: block; width: 687.5rpx; text-align: center;&#125;.goods-info .name&#123; height: 41rpx; margin-bottom: 5.208rpx; font-size: 41rpx; line-height: 41rpx;&#125;.goods-info .desc&#123; height: 43rpx; margin-bottom: 41rpx; font-size: 24rpx; line-height: 36rpx; color: #999;&#125;.goods-info .price&#123; height: 35rpx; font-size: 35rpx; line-height: 35rpx; color: #b4282d;&#125;.goods-info .brand&#123; margin-top: 23rpx; min-height: 40rpx; text-align: center;&#125;.goods-info .brand text&#123; display: inline-block; width: auto; padding: 2px 30rpx 2px 10.5rpx; line-height: 35.5rpx; border: 1px solid #f48f18; font-size: 25rpx; color: #f48f18; border-radius: 4px; background: url(http://nos.netease.com/mailpub/hxm/yanxuan-wap/p/20150730/style/img/icon-normal/detailTagArrow-18bee52dab.png) 95% center no-repeat; background-size: 10.75rpx 18.75rpx;&#125;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}],"tags":[{"name":"微信系统","slug":"微信系统","permalink":"http://yoursite.com/tags/微信系统/"}],"keywords":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/微信小程序/"}]},{"title":"tool-mac-mac搜索工具","slug":"6 tool-xx工具/tool-mac-mac搜索工具 ","date":"2017-12-17T16:10:00.000Z","updated":"2018-01-14T11:04:19.000Z","comments":true,"path":"posts/5756f3fc/","link":"","permalink":"http://yoursite.com/posts/5756f3fc/","excerpt":"","text":"一、总结：本文只有这一段有用，其他测试过没效果1）spotlight搜索很烂 2）两个搜文件名比spotlight好用的工具：『easyfind』、『find any file』 注意：在知乎搜了一天，发现mac上的各种搜索工具，只支持搜索文件名，不支持搜索文件内的内容。想要搜索内容，自己搭博客、或是用别人的博客、或是利用google或百度的搜索方法site:网址 关键词。 =================== 二、以下测试没卵用太正确了啊，mac 下文件肉眼可见就是搜不出来，简直烦躁。 founder 不能识别通配符，只能从首字搜起，如123.abc 输入 “12” 将(也许) 有效，但如输入 23，或者*.abc则无效。 Alfred略好一点，可以支持通配符如：.abc 或者3.abc这样。just so so。 Alfred有一个workflow，答主可以试试哒～ Disklens，但是也有个很讨厌的问题就是 “他不仅搜索文件名，也搜索文件内容”，这样搜索的结果简直令人崩溃（比如我想找一个叫 Design_Proj 的文件夹，结果他搜出了几百个log文件——仅因为这些log文件中记录了这个文件夹的名字） everything的作者曾在15年初回复我说，mac也许会开发（估计脱离了NTFS结构没什么好办法 ） 试试houdahspot for Mac 为何不用 mdfind？ Easyfind！！！ mac的搜索工具强烈安利find any file DEVONsphere Express ifile 闹了半天原来不搜索文件内容 &gt; mdfind &lt;关键词&gt; 1、kind:文件类型 关键词 文件的类型，常用的有，image （图片）， pdf， doc（文档）， music（音乐），folder（目录）， mail （邮件），bookmark （书签） ， contact （联络人）等 kind:image paris，找巴黎的照片 kind:music britney，搜索小甜甜的歌 2、date:日期 关键词 常用有today（今天）， yesterday（昨天）， this week（本周）， this month（本月）等 date:yesterday 3、搜索doc文件里的关键词","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-tips-为什么文件gitignore后还会被上传到github？gitignore文件被上传到github怎么办？","slug":"2 ror-tips:bug知识点/ror-tips-为什么文件gitignore后还会被上传到github？gitignore文件被上传到github怎么办？","date":"2017-12-16T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/24cbb5e/","link":"","permalink":"http://yoursite.com/posts/24cbb5e/","excerpt":"","text":"方法一：暂时最好的解法1）git rm --cached config/database.yml和git rm --cached config/application.yml 效果：不会删除文件，会删除git追踪记录。 但是，在github点commit进去看，仍然可以看到刚刚删除的内容即我们的密钥。 方法二：测试失败！！git rm -r --cached .，然后保存。 效果：application.yml和database.yml文件都被删除了。但是，再次push到github会发现可以在commit里看到被删除的两个文档，密钥全部可以看到。 小结：一点都不好用，效果跟直接删除两个文件一样。 方法三：测试失败！！很危险参考文档http://gitbook.tw/chapters/faq/remove-sensitive-data.html http://gitbook.tw/chapters/faq/remove-files-from-git.html 方法1：失败！！git commit功能失效不能再用git保存 1）使用git filter-branch --tree-filter &quot;rm -f config/database.yml&quot;即可，如果后悔了可以git reset refs/original/refs/heads/master --hard恢复。 filter-branch 這個指令可以讓你根據不同的 filter，一個一個 Commit 的來處理它。 這裡使用了 --tree-filter 這個 filter，它可以讓你在 Checkout 到每個 Commit 的時候執行你指定的指令，執行完後再自動幫你重新再 Commit。以上面這個例子來說，便是執行「強制刪除 config/database.yml 檔案」這個指令。 因為刪除了某個檔案，所以在那之後的 Commit 全部都會重新計算，也就是說等於產生一份新的歷史紀錄了。 2）如果要多次使用上边的命令，会提示在命令里加入Force overwriting the backup with -f，即git filter-branch -f --tree-filter &quot;rm -f config/database.yml&quot;，注意这条命令是不能恢复的！！——不过也不难，先从最新分支checkout一个分支，就可以随便测试 3）最后，用git push -f origin master，强推github覆盖原来泄露密钥的代码。 方法四：失败！！所有的分支、所有绑定的内容全部清空！！！参考文档同方法三 這招是屬於「逃避雖然可恥但是有用」的做法，把因為所有的 Commit 紀錄都在 .git 目錄裡，所以可以這樣： 把 .git 目錄刪掉。 把那個密碼檔刪掉或修掉。 重新 Commit。 不要以為我是在開玩笑，這也是一招，而且是比較不需要什麼技術的招式，缺點就是之前的 Commit 紀錄都不見了。所以這個專案如果只有你自己一個人做，而且也不在乎之前的 Commit 紀錄的話，這也是一個選擇。 ！！！吓死我了，还好在github上有上传最新的分支，否则整个专案全没了，后果不堪设想。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"web-page-css/html语法笔记","slug":"4 web-page页面/web-page-css:html语法笔记","date":"2017-12-14T16:10:00.000Z","updated":"2018-01-14T04:43:47.000Z","comments":true,"path":"posts/ef9bbe6f/","link":"","permalink":"http://yoursite.com/posts/ef9bbe6f/","excerpt":"","text":"background-color: rgba(255,255,255,0.5)clearfix是什么？ 用法注意：外层div加上clearfix，内层div加上pull-right属性，如下： 123456789&lt;div class=&quot;clearfix&quot;&gt; &lt;h4 class=&quot;pull-right&quot;&gt; 合计 &lt;%= render_cart_total_price(current_cart) %&gt; 元 &lt;/h4&gt;&lt;/div&gt;&lt;div class=&quot;clearfix&quot;&gt; &lt;%= link_to(&quot;确认结账&quot;, &quot;#&quot;, class:&quot;btn btn-danger btn-lg pull-right&quot;) %&gt;&lt;/div&gt; 解决不了的问题：1、首页大图用bootstrap的jumbotron巨幕可以简单出效果，但是不能自适应？ 2、哪些属性可以在一开始就做通用设置，参考anndo和韵儿爸爸的代码？ 3、按钮和文字排在同一行，并能自适应，比如导航栏？ 简单粗暴的优化：1、首页大图，用bootstrap巨幕（自适应有问题） 123456789&lt;div class=&quot;jumbotron&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;欢迎登陆页面！&lt;/h1&gt; &lt;p&gt;这是一个超大屏幕（Jumbotron）的实例。&lt;/p&gt; &lt;p&gt;&lt;a class=&quot;btn btn-primary btn-lg&quot; role=&quot;button&quot;&gt; 学习更多&lt;/a&gt; &lt;/p&gt; &lt;/div&gt;&lt;/div&gt; css设置 1background-image:url(&apos;http://fullstack-public.oss-cn-qingdao.aliyuncs.com/2017-04-15-542213.png&apos;) 2、后台操作按钮，比如编辑、删除等。bootstrap样式有warning、success、info、danger（四种很搭），default、prinary。 1&lt;%= link_to(&quot;隐藏&quot;, hide_admin_job_path(job), method: :post, class:&quot;btn btn-warning btn-xs&quot;) %&gt; 3、bootstrap缩略图 1234567891011121314151617181920212223242526&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-6 col-md-3&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/06/kittens.jpg&quot; alt=&quot;通用的占位符缩略图&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-6 col-md-3&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/06/kittens.jpg&quot; alt=&quot;通用的占位符缩略图&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-6 col-md-3&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/06/kittens.jpg&quot; alt=&quot;通用的占位符缩略图&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-6 col-md-3&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/06/kittens.jpg&quot; alt=&quot;通用的占位符缩略图&quot;&gt; &lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 4、表格，用table-bordered、table-hover，配合memet为table.table.table-border.table-hover&gt;(thead&gt;tr&gt;th*3)+(tbody&gt;tr&gt;td*3)。自适应可以试用，感觉效果不好。 1234567891011121314151617181920212223242526272829&lt;table class=&quot;table table-bordered table-hover&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;职位&lt;/th&gt; &lt;th&gt;职位要求&lt;/th&gt; &lt;th&gt;薪资上限&lt;/th&gt; &lt;th&gt;薪资下限&lt;/th&gt; &lt;th&gt;联系方式&lt;/th&gt; &lt;th&gt;发布时间&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% @jobs.each do |job| %&gt; &lt;tr&gt; &lt;td&gt;&lt;%= link_to(job.title, job_path(job)) %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.description %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.wage_upper_bound %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.wage_lower_bound %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.contact_email %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.created_at %&gt;&lt;/td&gt; &lt;td&gt; &lt;%= link_to(&quot;编辑&quot;, edit_job_path(job)) %&gt; &lt;%= link_to(&quot;删除&quot;, job_path(job), method: :delete, data:&#123;confirm:&quot;确定删除职位？&quot;&#125;) %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;% end %&gt; &lt;/tbody&gt;&lt;/table&gt; 5、通用设置：几级标题、段落文字大小字距行距颜色，参考韵儿爸爸、刘传关于设计感的文章。 6、调用ipic图片链接的方法： ①、css里用background-image:url(‘https://ws2.sinaimg.cn/large/006tKfTcgy1flu31xaik3j31hc0u0aer.jpg‘); ②、src1234567、调用图片的方法（`&lt;img src=&quot;http://xx.com&quot;&gt;`或`&lt;%= image_tag(xx.url) %&gt;`或`&lt;%= image_tag(&quot;http://xx.com&quot;) %&gt;`）：①、```&lt;img src=&apos;&lt;%= image_url &apos;logo.png&apos; %&gt;&apos; &gt;```，文件夹是app/assets/images或是app/public/images。如果要修改收藏网址时显示的图片，用```&lt;link rel=&quot;shortcut icon&quot; href=&quot;/images/favicon.ico&quot;&gt; ②、调用文件夹app/assets/images，&lt;%= image_tag(&quot;intro_1.jpg&quot;) %&gt; ③、调用相对网址path，&lt;%= image_tag(@product.image.thumb.url) %&gt;。这里可以写成@product.image.url或@product.image_url 【小结】图片放asset/images，调用本地、网上图片都用&lt;%= image_tag(&quot;&quot;) %&gt; 8、格线系统col-md-12 1234.col-centered&#123; //Nic教程用的，panel居中 float: none; margin: 0 auto;&#125;","categories":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}],"tags":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/tags/web页面/"}],"keywords":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}]},{"title":"ror-system-Ajax交互式网页应用","slug":"1 ror-system系统/ror-system-Ajax交互式网页应用","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/765fb13d/","link":"","permalink":"http://yoursite.com/posts/765fb13d/","excerpt":"","text":"1.1、Jquery1jquery 就对javascript的一个扩展，封装，就是让javascript更好用，更简单。人家怎么说的来着，jquery就是要用更少的代码，漂亮的完成更多的功能。 jQuery是一套最多人使用的 JavaScript 函式库，可以撰写各种网页效果，有丰富的社区和各种 Plugins 外挂。 它的主要作用是操纵网页的 DOM(Document Object Model)：浏览器会解析 HTML 然后显示在画面上，这个解析出来的结构就叫做 DOM 12345678910111213&lt;p&gt; &lt;a id=&quot;my-click&quot;&gt;Click Me&lt;/a&gt;&lt;/p&gt;&lt;div id=&quot;foo&quot; style=&quot;border: 1px solid red;&quot;&gt; &lt;p&gt;bar&lt;/p&gt;&lt;/div&gt;&lt;script&gt; $(&quot;#my-click&quot;).click(function()&#123; $(&quot;#foo&quot;).html(&apos;&lt;h1&gt;zoo&lt;/h1&gt;&apos;); &#125;)&lt;/script&gt; 解说： &lt;script&gt;...&lt;/script&gt; 包起来的部分就是写 JavaScript 的地方 这个钱号 $ 等同于 jQuery $(&quot;#my-click&quot;) 是 jQuery 的选择器用法，会挑出 id 是 my-click 的元素，在这里就是指 Click Me 的超连结。在 HTML 上 id 是唯一的，不能有重复的 id。 .click( function(){...} ) 会绑订一个点击(click)事件在该元素上面，当用户点击这个元素时，就会执行里面的 function $(&quot;#foo&quot;).html(&#39;&lt;h1&gt;zoo&lt;/h1&gt;&#39;) 会把 #foo 这个元素的内容置换成 &lt;h1&gt;zoo&lt;/h1&gt; 请试试看把 html 换成以下用法，观察看看有什么差别： text 文字替换 prepend 把内容插在指定元素里面的最前面 append 把内容插在指定元素里面的最后面 before 把内容插在指定元素的前面 after 把内容插在指定元素的后面 1.2、$(document).ready 是一个浏览器的事件，会在加载 HTML 完成之后，才执行里面的 function 1.3、最常见的 jQuery 使用套路了，包括： 用选择器 Selector 选取出目标元素，例如 $(&quot;#某个ID&quot;)和 $(&quot;.某个class&quot;)。 绑定一个事件(Event)上去，例如 click 和 hover 事件 当事件被触发的时候，执行某个 DOM 操作来改变 HTML，可能是改变元素的属性、插入新内容、新增或移除 class 属性等等。目前学到的用法有： html append prepend before after remove replaceWith toggle addClass 和 removeClass 2.1、Ajax（99：相当于把原来controller里的重定向用jquery重新写到views的xx.js.erb里） Ajax 是一种增强 UI 的方式，我们会先把基本功能完成，再根据需要改成 Ajax 效果。 接下来要介绍的 Ajax(Asynchronous JavaScript and XML) 异步的JavaScript与XML技术，则可以不需要整页替换，只更新部分网页，这可以大大的改进 UI 反应速度。目前已经不流行用 XML 了，因此常见的回传会用 JSON 和 Script 格式： 用 JSON 格式，必须写自定义的 JavaScript 去处理 Ajax 的发送和接收处理。JavaScript 强者或团队中有前端工程师会偏好这种方式。 2.2、 12- &lt;%= link_to &quot;Delete&quot;, post_path(post), :method =&gt; :delete, :class =&gt; &quot;btn btn-danger&quot; %&gt;+ &lt;%= link_to &quot;Delete&quot;, post_path(post), :method =&gt; :delete, :remote =&gt; true, :class =&gt; &quot;btn btn-danger&quot; %&gt; 透过 :remote =&gt; true 就会变成 Ajax 送出了，不需要自己写 $(&quot;xxx&quot;).click 去绑事件。 1234567app/controllers/posts_controller.rb def destroy @post = current_user.posts.find(params[:id]) @post.destroy- render :js =&gt; &quot;alert(&apos;ok&apos;);&quot; end 123app/views/posts/index.html.erb- &lt;div class=&quot;panel panel-default&quot;&gt;+ &lt;div id=&quot;post-&lt;%= post.id %&gt;&quot; class=&quot;panel panel-default&quot;&gt; 12app/views/posts/destroy.js.erb $(&quot;#post-&lt;%= @post.id %&gt;&quot;).remove(); 解说： 针对要被移除的 &lt;div&gt; 区块，我们补上了一个 id，例如 &lt;div id=&quot;post-123&quot;&gt;，这样等会 jQuery 要移除的时候，就可以直接抓到要移除哪一个元素了 一个 action 如果没有写明 redirect 或 render 的话，就会默认去找 action 名称的样板。于是这里就会去找 destroy.js.erb destroy.js.erb 里面要写回传的 JavaScript 代码，这个档案也是 erb 样板，所以可以用 &lt;%= XXX %&gt; 内嵌 Ruby 语法 再次测试看看删除，你会发现删除的操作变成超级神速。 2.3、 form_for 也可以用这招。接下来做做看新增贴文： 1$(&quot;#post-list&quot;).prepend(&quot;&lt;%=j render :partial =&gt; &quot;post&quot;, :locals =&gt; &#123; :post =&gt; @post &#125; %&gt;&quot;); 其中 j 等同于 escape_javascript，这会做逸出好让 partial 字串可以变成合法的 JavaScript 字串： 3.1、ajax进阶用法 不用:remote =&gt; true，而是手写 jQuery 去绑事件送 Ajax，取得 JSON 回传并更新 DOM 3.1、Turbolinks的坑 加速换页，不重新载入 HTML 的 head，只载入新的 body的工具。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-模拟面试(视频)","slug":"1 ror-system系统/ror-system-模拟面试(视频)","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/2682de6f/","link":"","permalink":"http://yoursite.com/posts/2682de6f/","excerpt":"","text":"一、人格挖掘的特质的题面试被屠杀挫败的原因： 1、不知道如何勾起别人的兴趣 2、在技术细节答不上来 1、当初为什么想要接触rails的（公司关心的只是你是不是一个值得挖掘的人）？2、你之前是念土木工程的，现在想要转开发，为什么会有这么大的跨度？3、你是怎样学习ruby on rails 的？点评1：恭喜你今天3个问题，让你阵亡了。。 你必须在前两个问题就让面试官知道，你是很有热情学技术的人，接着从你的回答可以找的出要继续问你的技术问题。你的回答让我失去兴趣再问你，你的回答没有不好你答的中规中矩，但是在技术面试是不合格的，因为他如果用你那他是在用一个转行的但是不知道自己在干嘛的人（又遇到一个想要转行的小白，他连自己在做什么都不知道，而事实上你不是这样子的）。 你要让他认为虽然你不是科班的，但是你非常有热情把它学好、非常有狼性。 我是学土木的，我在学土木的时候我会操作一些软件，然后这些软件我们常常做一些重复的事情，做多了觉得不会编程真的好麻烦，所以我想要透过编程解决这些重复的事情，使我的专业得到很大的提升。 但是因为学着学着我发现，我对编程反而有更大的热情，所以我就去知乎找了一下哪门技术比较适合我，接着我发现了ruby on rails，因为它可以协助我很快的解决问题。 接着他会问你是怎样学习ruby on rails 的？你刚刚说自学、刻苦练习，但是这样的回答不合格，因为我不知道要问你什么？ 一个面试官在对你没兴趣的时候，最多只会问你6个问题。 面试的问题是一个勾一个这样下去的，你刚刚的回答让我在第3个问题就不知道要怎么问下去。你要制造让他继续问你的点，让他有兴趣问你技术细节，而技术细节答不上来没关系，因为你有尝试在回答，让他觉得你有技术人的脑。 我首先买一本书，做一些网上的公开教材，然后我学会了做job-listing、12 in 12。慢慢了比较熟悉rails的架构，我继续做一些比较复杂架构的东西比如jdstore，甚至我有参加补习班，然后在里面外面有参加大赛，跟队友组队做一个建站项目。 ​ 点评2： -50分的回答，你说你上补习班直接扣30分， 因为我想要接触ruby on rails，但是自学又觉得速度不够快，所以我最后去参加一个补习班，主要学了两个项目，第一个是job-listing就是学简单的CRUD，第二个是商店项目，学会从零构建一个真实的项目，还学习到UserStory并实践整个项目。 在补习班的时候，这两个项目都是有比赛的，我拿到了比较好的成绩，第一次拿到3等奖，第二次拿到优秀作品奖。我觉得第二次的作品其实我还是蛮骄傲的。（他问你你为什么觉得骄傲？）其实我一开始是完全不会的，但是第一次获奖让我获得很大的信心，所以第二次我就很想要再接再厉拿到更好的名次。 而且这次是要求双人组队的，在比赛中，我是担任主程的工作，在这次比赛中学到很多和队友协作的技巧，在最后我们也取得很好的成绩。 以上这段，就把你个人的优点完全的暴露出来，而且他可以问。比如：1、你作为主程，你写了哪些功能？ 2、你怎么样跟别人协作；3、你觉得当中你觉得最挑战的是什么？ 我是在职学习的，只有晚上有时间，我会跟队友merge代码，讨论一些功能的取舍有时会吵的很激烈，但是我们最后克服了。（在职还学习+有办法管理冲突+有办法继续推进） 你的人技术底子都不错，但是很难问啊，问不出来。我都还没有问他技术问题就被我问垮了。这样就很可惜了。 点评31、因为我小时候就很喜欢作弊，不过作弊不是只说是学科上边的部分，我觉得对玩游戏方面作弊是一件很酷炫的事情。大学的时候学过一些简单的php和java，那时候听同学跟我说ruby的东西，我觉得很新奇对这件事情很好奇，然后我就去尝试。后来发现，rails可以做到语义化的简短，然后当兵的时候我替我的单位做一个可以搜寻字段查出航空用语的小工具。——就发现rails可以让我在这么短的时间内做到，而php和java就要花比较长的时间，觉得很好玩想要继续学下去。 2、一开始是上网自学，后来我发现遇到很多部署环境的问题，以及一些文件我是看不太懂的，甚至花了很多时间看懂了以后，我发现一些问题没办法如期解决。这个时间很恰巧的我打了场hekeson，发现我rails的能力就只到rails101的能力，在比赛的火力输出上面我可能只做到了20-30%。我想要把这件事情做的更好，所以我就报名了培训班，学了一整套rails的课程，我发现能从我原本自学的东西变得更好、更系统化，更知道如何把rails学好。 3、（听到两个关键字，①、hekeson因为他乐于挑战而且有做小项目；②、他愿意去提升自己——【问题】你hekeson大概是在做什么？）做大数据的比赛，去捞官方搜提供的api，提供facebook上面最多点赞数、最多分享数这样的东西，可以做出一个怎样的分析。或者是用招聘网站的数据，能够做出怎么样的分析。然后我们就用rails做出一个badboss，可以找出评分比较不好的东西，找到烂老板让整个求职体系变得更好。因为那时候只有rails101的程度，所以只能建model和做简单的view，controller和爬虫的部分就比较不熟。 4、（【问题】你觉得比赛中比较难的东西？）上面已经回答了。 5、【问题】培训班是怎样把你的技术提升的？——一开始接触这个培训班，当我遇到问题的时候，我有线上助教可以问，而最重要的是还有组织meetup，在上面可以问道不一样的同学，学习到开发上的技巧，透过别人的操作然后自己去实操，我才知道这是怎么玩的。在学习中，我觉得比较印象深刻的是它有办两次比赛。第一次做，不太会使用html和css，比赛后特别去补足这个部分，然后第二次比赛拿到了第一名。这个培训班让我知道了我不会什么，然后我能够在这里提升什么。（从原先不会，到进步了拿到第一名，优点是成长快。【问题】你拿第一名的作品是什么，可以讲讲背后的故事吗？） 6、做购物网站，我想做支付宝的串接，读了支付宝官方的文件，尝试接api。过程中我觉得很坑，因为我花了3-5天的时间，接完后一直跳error，后来才发现原来是因为我没有办公司，然后就去找了一个去申请，后来发现成功接上后找了一些朋友做测试。后来在拉票过程中，他们发现我是唯一会接支付宝的人，就非常支持我，因为大家都喜欢这个东西，所以我觉得要把它做成教程，也因为这样子拿到第一名。【问题】你们网站大概是做什么？ 7、因为我喜欢玩改装机车，我的idea是做一个购物网可以买卖改装零件，主要的构想是每一个零件都可以在上边买卖，下单后从后台可以了解到用户想要买什么东西，方便我们做一个统计。 小结： 1、成功问了7个问题，而且都让我有兴趣再问下去，而且他讲的我都懂。而且每个回答都让我能找出继续问的点。 2、凸显他的特质，为什么拿第一名，这是他的兴趣、他的狂热，愿意为自己兴趣去钻研技术的人，这是作为程序员很重要的特质。你要让人家看到你是有人格的，你会去研究技术、做好、甚至拿到第一名，这方面的人格会让你拿到很高分。 3、程序员看两件事情： ①、这个人是不是有适合当程序员的特质，因为有特质是远比你现在学了多少东西还重要的。他们要确认你是他们的同一种生物（对世界好奇、愿意解决问题、有办法自己找到答案）。 ②、接下来才是你技术好不好，如果你本身不是那种人，那你学技术就会很慢，他也不想要带你，因为他帮你也都是有限度的帮，如果你让他觉得你会拖累他，或是没想法的人，那就会很惨。 ihower水平自测 分数只代表你目前的学习状况 100分：很资深 60-80：中阶并有一定经历 40-60：我们会拿到 低于40：练习次数不够、直播没看 训练营知道怎么做一个简单的小项目作为作品 知道求职面试的技巧 求职部分有哪些注意的事项","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-Api","slug":"1 ror-system系统/ror-system-Api","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/c0ce8aa/","link":"","permalink":"http://yoursite.com/posts/c0ce8aa/","excerpt":"","text":"看第四遍，又看懂了一些东西 1、爬虫的关键安装 rest-client 这个 gem，可以让我们用 Ruby 发送 HTTP 请求： 透过 Nokogiri 这个库可以帮助我们解析 HTML，透过 CSS selector 从文件中比对出想要的资讯。 123require &apos;nokogiri&apos;doc = Nokogiri::HTML.parse(response.body)doc.css(&quot;.today .tem&quot;).map&#123; |x| x.text &#125; # 得到 [&quot;\\n13°C\\n&quot;, &quot;\\n2°C\\n&quot;, &quot;\\n&quot;] 重点代码：12response = RestClient.get &quot;http://v.juhe.cn/weather/citys&quot;, :params =&gt; &#123; :key =&gt; &quot;你申请的key放这里&quot; &#125;data = JSON.parse(response.body) 第一行用 rest-client 这个 gem，发送http请求，并附带API key可以让系统验证我们分身份让我们有权限抓数据。 第二行是把json字串转回ruby。 2、Api key的作用密钥，提供了这个key，直接就可以相当于通过身份验证，如已经登录了、或是管理员、或是超级会员等身份。 自定义API key，是在model里用before_create :generate_authentication_token来调用。 12345678app/models/user.rb class User &lt; ApplicationRecord+ before_create :generate_authentication_token++ def generate_authentication_token+ self.authentication_token = Devise.friendly_token+ end 3、controller 常用代码123456789101112131415161718app/controller/api/v1/reservations_controller.rb+ class Api::V1::ReservationsController &lt; ApiController+ def index+ @reservations = current_user.reservations++ render :json =&gt; &#123;+ :data =&gt; @reservations.map &#123; |reservation|+ &#123;+ :booking_code =&gt; reservation.booking_code,+ :train_number =&gt; reservation.train.number,+ :seat_number =&gt; reservation.seat_number,+ :customer_name =&gt; reservation.customer_name,+ :customer_phone =&gt; reservation.customer_phone+ &#125;+ &#125;+ &#125;+ end 第一部分，跟平时的CRUD一样。 第二部分，因为Api省略了views文档，相当于把views要传递的参数放在controller里，并转换成api用的json格式。 用 JBuilder 可以重构以上代码，特别是GET这种字段特别多的代码。123456789app/controllers/api/v1/trains_controller.rb def show @train = Train.find_by_number!( params[:train_number] )- render :json =&gt; &#123;- :number =&gt; @train.number,- :available_seats =&gt; @train.available_seats- &#125; end 新增 app/views/api/v1/trains/show.json.jbuilder 档案，这就是 JBuilder 样板，即action.json.jbuilder。 用JBuilder简化后的代码如下： 12345app/views/api/v1/trains/show.json.jbuilderjson.number @train.numberjson.available_seats @train.available_seatsjson.created_at @train.created_at 4、routes.rb 常用代码以下是路由routes.rb的写法（这种写法只适用于ruby，常用写法要每个action逐条列出）： 123456namespace :api, :defaults =&gt; &#123; :format =&gt; :json &#125; do namespace :v1 do resources :trains, :only =&gt; [:index, :show] resources :reservations, :only =&gt; [:show, :create, :update, :destroy] endend 常用的写法如下： 1234567891011121314151617config/routes.rb Rails.application.routes.draw do+ namespace :api, :defaults =&gt; &#123; :format =&gt; :json &#125; do+ namespace :v1 do+ get &quot;/trains&quot; =&gt; &quot;trains#index&quot;, :as =&gt; :trains+ get &quot;/trains/:train_number&quot; =&gt; &quot;trains#show&quot;, :as =&gt; :train++ get &quot;/reservations/:booking_code&quot; =&gt; &quot;reservations#show&quot;, :as =&gt; :reservation+ post &quot;/reservations&quot; =&gt; &quot;reservations#create&quot;, :as =&gt; :create_reservations+ patch &quot;/reservations/:booking_code&quot; =&gt; &quot;reservations#update&quot;, :as =&gt; :update_reservation+ delete &quot;/reservations/:booking_code&quot; =&gt; &quot;reservations#destroy&quot;, :as =&gt; :cancel_reservation+ post &quot;/signup&quot; =&gt; &quot;auth#signup&quot;+ post &quot;/login&quot; =&gt; &quot;auth#login&quot;+ post &quot;/logout&quot; =&gt; &quot;auth#logout&quot;+ end+ end 其中post &quot;/reservations&quot; =&gt; &quot;reservations#create&quot;, :as =&gt; :create_reservations的意思是 客户端送出 POST /api/v1/reservations 时，会进入 Api::V1::ReservationsController 的 create 方法，而 as 参数的意思是产生这个地址的路由方法叫做 api_v1_create_reservations_path。 最后，:defaults =&gt; { :format =&gt; :json } 意思是默认客户端要求的是 JSON 格式，本来的默认值是 HTML。如果没有改这个的话，你必须在网址最后面加上 .json 来指定客户端要求的格式，例如 GET /api/v1/trains.json。 4、Api key多用于web端，手机端怎么办？做注册、登录的api端口（我的理解是一个网址就是一个端口）5、其他只有 form-data 才能上传档案（如图片、pdf），而不是json 进 rails c 输入 100.times { |i| Train.create( :number =&gt; &quot;T#{i}&quot; ) } 就会产生一百笔资料。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-api最小可行代码","slug":"1 ror-system系统/ror-system-api最小可行代码","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T06:53:03.000Z","comments":true,"path":"posts/867a72a6/","link":"","permalink":"http://yoursite.com/posts/867a72a6/","excerpt":"","text":"API最小可行代码1、index为例最小可行代码1） config/routes 12345namespace :api, :defaults =&gt; &#123; :format =&gt; :json &#125; do namespace :v1 do resources :products, :only =&gt; [:index] endend 2）新建api controller rails g controller api --no-assets 修改 api_controller.rb 1234app/controllers/api_controller.rb- class ApiController &lt; ApplicationController+ class ApiController &lt; ActionController::Baseend 3）新建api products controller rails g controller api::v1::products --no-assets 修改app/controllers/api/v1/products_controller.rb（查看db/schema看要加入什么栏位） 1234567891011121314151617class Api::V1::ProductsController &lt; ApiController def index @products = Product.all render :json =&gt; &#123; :data =&gt; @products.map&#123; |product| &#123; :title =&gt; product.title, :description =&gt; product.description, :quantity =&gt; product.quantity, :price =&gt; product.price, :created_at =&gt; product.created_at, :updated_at =&gt; product.updated_at, :image =&gt; product.image &#125; &#125; &#125; endend 2、用JBuilder重构代码参考资料 http://motion-express.com/blog/20140829-ruby-gem-jbuilder https://github.com/rails/jbuilder 2.1 最常用代码1）比如分类views/categories文件夹下。 新建app/views/api/v1/categories/index.json.jbuilder 123json.categories do json.array! @categories, :partial =&gt; &quot;item&quot;, :as =&gt; &quot;category&quot;end 新建app/views/api/v1/categories/show.json.jbuilder 1json.partial! &apos;item&apos;, category: @category 用partial重构，app/views/api/v1/categories/_item.json.jbuilder 123json.id category.idjson.name category.namejson.partial! &apos;api/v1/products/item&apos;, product: category.products #最关键的product:要单数 2）比如商品views/products文件夹下。 新建app/views/api/v1/products/index.json.jbuilder 1json.partial! &apos;item&apos;, product: @products 新建app/views/api/v1/products/_item.json.jbuilder 1json.products product.each&#123;&#125; #最关键的product.each的product要单数 2.2 【bug】常见报错1）写partial时，index的each{}如果写在共用表单，被show引用时会报错？？ 解法一：不要用each{}，而是只写想要调用的栏位。 解法二：each{}还是放在index，可能部分数据会重复出现，但是不影响调用。 2.3 如果只需要部分数据，用json.array!遍历（即controller中用的map循环）1）未重构：如下app/views/api/v1/categories/index.json.jbuilder 1234567json.categories do json.array! @categories do |category| json.id category.id json.name category.name json.created_at category.created_at endend 2.4 讲解：用共用表单partial实现index调用show的数据1）案例，见2.1。 2）讲解。 在index，只有@products，不能读出来@product是谁，所有用category: @product.category仍会报错说category未定义。在show的_item，product就是当前的product，所以category: @product.category就是当前商品的分类。 所以，product的partial写法如下，最最关键的是category:必须是单数 1json.partial! &apos;api/v1/categories/item&apos;, category: product.category category的partial写法如下，最最关键的是product:必须是单数 1json.partial! &apos;api/v1/products/item&apos;, product: category.products","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-MVC语法笔记","slug":"1 ror-system系统/ror-system-MVC语法笔记","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/7d273add/","link":"","permalink":"http://yoursite.com/posts/7d273add/","excerpt":"","text":"【小结】增加controller，就要想要加routes，然后在views里添加路径，然后在controller里把动作补全。 【小结】增加栏位，修改views和controller，甚至model后，要记得加入params中。 ruby Where is the method ‘self’ defined in my Rails app 现在才懂的MVC：123456789def index @job = Job.find(params[:job_id]) @resumes = Resume.allend def index @job = Job.find(params[:job_id]) @resumes = @job.resumes.order(&quot;created_at DESC&quot;)end ①、controller里的右边参数是类（大写开头），所以Resume.all就是捞出Resume这个类里所有的数据。②、@resumes为什么要加s，就是因为右边捞出来的数据是复数的。 ③、然后看到相应的index的views，&lt;% @resumes.each do |resume| %&gt;这里的@resumes就是上面index里的@resumes 怎么解读这些需求？购物车练习作业 1、请设计一个功能，可以一键清空购物车内所有的物品 2、某样东西突然不想买了，我可以在购物车内删除它 3、已经加入购物车的物品，不能重复被加入 4、可以更改购物车内购买的数量( 原本预设数量都是1） 5、库存为 0 的货品不能购买 6、在购物车新增数量时，不能更新超过原有库存的数量 1、清空所有物品即要清空格子cart_item，是一个动作，在cart的controller里定义一个新的动作、routes加路径delete :clean，因为清空是针对多个格子所以用collection。2、删除一个cart_item，是一个动作，删除一件是destroy的action，所以添加cart_item的controller和相应的destroy的action。3、商品已加入购物车说明车子id已知。。。加入产品的关键代码是add_products_to_cart。。。 Include?是什么？ 正解：在current_cart.add_product_to_cart(@product)加入判断，当前车子是否包含这件商品if !current_cart.products.include?(@product)。include?在dash上查到ruby和rails都有这样的用法。4、商品数量是current_cart.current_item.product.count。。。正解：更改数量意味着要edit和update数量，商品数量前边有定义cart_item.quantity5、换个说法是如果库存为0则提示商品无库存，是一个if判断，商品数量是cart_item.quantity，要改的位置有product_controller的add_to_cart行为。6、更新为cart_item_controller的update行为增加if条件。 怎么解读这些需求？订单状态切换 1、建立 admin/orders 可以看到系统内所有订单 2、admin 的 order 列表应要能显示订单状态 3、使用者可以“申请取消订单” 4、使用者“申请取消订单”后，管理员应该要收到“申请通知信” 5、后台管理员可以“取消订单”、“出货” 6、后台管理“出货”后，系统应该寄出通知信 7、后台管理员“取消订单”后，系统应该寄出通知信 其他123456gem &apos;letter_opener&apos;, group: :developmentA：这个gem只在development开发环境下使用config/environments/development.rbconfig.action_mailer.default_url_options = &#123; host: &apos;localhost:3000&apos; &#125; #gem官网没有给这条代码，测试发现没有这条也可以运行。config.action_mailer.delivery_method = :letter_opener 网址https://fullstack.xinshengdaxue.com/posts/661#task中的#task是什么？A：#像锚点一样，代表网页中的一个位置，浏览器读取url后会滚动到task所在位置。 Model观察发现：model的信息是可以在不同名的controller里调用。 查找validates相关用法：https://guides.ruby.tw/rails3/active_record_validations_callbacks.html 或https://ruby-china.github.io/rails-guides/active_record_validations.html Active Record 数据验证 123&gt; validates_presence_of :name&gt; A：validates_presence_of 确定属性是存在的，非空非nil非false。&gt; &gt; 12rails g migration/model，是否是第一次建立就要model？A：是 123admin_job的controller里没有重新增加title和description栏位（即rails g model title:string description:text），是不是意味着增加的栏位每个controller都可以调用？A：没错，不管是admin下面的jobs_controller 还是controllers目录下面的，打交道的数据都是同一个job model，因为普通用户和管理员都是对同一个job相关的信息进行操作的。 123rails g migration的数据也属于job model吗？或是说，如果我拿新建的admin的controller去调用6-3创建的那些栏位（wage_lower_bound/wage_upper_bound/contact_email）也是可以的？A：整理自己的理解：&quot;看atom的架构图，model里没有admin_job.rb，因为前后台都是用job.rb，而写进db：migrate的数据因为是add_more_detail_to_job，涉及到job，所以model调用的时候是在job中执行，所以db里的数据相当于是在model/job里。&quot;是的，你这样理解基本是对的。那个后面的to_job，job代表的就是model。所谓的rails 约定优于配置，to_job就是其中的一个例子。 12知道11-1，model中只有user和job，不用写关系，但是加入resume就要写，是因为两个就不用多个就要吗？如果resume不写关系会怎样？A：会提示出错，自己试试，一般model中的rb文件都是要根据所需功能设置关系的。比如，做招聘003的11-2QA，要先找到job，再找相关的resume，如果没有设置相关关系job has_many :resumes，系统就不知道要去哪里找resume。 1234567- event :make_payment do+ event :make_payment, after_commit: :pay! do transitions from: :order_placed, to: :paid end 1、after_commit是什么？ A：rails内建callback，after_commit这个callback是在记录被创建，更新或销毁后调用的。 .xxx的用法在model，跟controller一样是执行动作123456789101112&gt; cart_items.destroy_all&gt; 1、destroy_all和delete_all的区别？&gt; A：都用于批量删除表格数据。&gt;&gt; delete_all 是一条sql语句删除，它会直接执行删除而不查询数据，优点是网络开销相对少，缺点是如果删除出现问题，回滚起来代价比较大。&gt;&gt; destroy_all 则先查出所有的数据，再一条一条的按照主键删除，优点是容易过程出现问题容易终止，缺点是网络开销比较大。&gt;&gt; 同样的数据量，delete_all 删除的速度更快，因此在什么情况下选用哪种方法，一是可以根据对执行过程的速度需求决定，二是根据对数据安全的需求决定。&gt;&gt; 代码运行过程参考这里http://blog.csdn.net/feigeswjtu/article/details/51581020&gt; &gt; 123&gt; current_cart.clean! &gt; A：有加！的要在model进一步定义&gt; &gt; Controller观察发现：xxx_params添加的栏位只是那些在new、update有新增、修改的栏位，而栏位的赋值不用加入，比如product_list一节在订单建立后建立购买明细缓存时，调用栏位没有加入params。 观察发现：左边有带@是controller的参数，右边不带@的是views页面传来的参数。 观察发现：controller中的action都是在做同一件事情，就是find_and_do。 观察发现：调用栏位有两种方法，第一种是@xxxs.each do |xxx|，然后xxx.title，第二种是@xxx.title。当栏位xxx是一个复数时用第一种，当xxx是单数时因为@xxx即表示单数所以用第二种。——比如在当前购物车中，购物车就是单数用@cart调用，购物车里的格子就是复数用current_cart.cart_items.each do |cart_item|调用。 观察发现：Routing Error的报错，可能是rails s没有重启、没有新建controller、没有新建model、没有设置routes导致、路径定义了member或collection的动作但是没有在views里声明method是post还是delete。 123if !current_user.admin?同理的还有Group.where(:is_hidden =&gt; true)A：①、controller无视db值的属性直接决定游戏动作，！代表&quot;修改为不是&quot;直接决定user不是admin，true决定这个group是隐藏的。②、数据库admin？默认boolean为false，这样新建的user默认不是admin。db里的值是一种属性，可以在rails c里可以任意改，影响新建时的默认值但是不在controller中起作用。 在index中，params里用:order是因为log日志里有给出参数地址，那么case又是什么意思？A.固定用法，类似if。不同的是if适用于罗列两种情况，而case用来罗列多种情况。 Q.resume_controller的代码要怎么解读，自己写不出来？A.第一段，找到要建立resume的那个具体的job（地址栏job/id），在这个job里新建resume页面。第二段，①先找到具体在哪一个job上(即地址栏里的job/id)；②通过筛选的栏位content(在resume_params中过滤)拉到新建立的resume上；③通过@resume.job = @job把job的地址给到新建的resume上，使job和新建的resume关联起来，得到一个具体的新resume的路径；④把当前用户设置成resume用户； 1234567891011121314151617&gt; def new&gt; @job = Job.find(params[:job_id])&gt; @resume = Resume.new&gt; end&gt; def create&gt; @job = Job.find(params[:job_id])&gt; @resume = Resume.new(resume_params) #新建resume所以确定了resume的id&gt; @resume.job = @job #@job的参数传给新建resume，即确定job的id&gt; @resume.user = current_user&gt; if @resume.save&gt; flash[:notice] = &quot;成功提交履历&quot;&gt; redirect_to job_path(@job)&gt; else&gt; render :new&gt; end&gt; end&gt; 12CRUD中Group.new和Group.new(group_params)的区别？A：Group.new没有数据传送，调用new.html.erb即views的页面。而Group.new(group_params)已经进入new的页面，看链接可以发现这里不涉及id，而是要存储title和description的数据，这两个栏位定义在group_params中，所以是用group_params来调用。 1234567891011121314151617&gt; 1、购物车的逻辑？ A：见下方。&gt; def add_to_cart&gt; @product = Product.find(params[:id])&gt; current_cart.add_product_to_cart(@product) #购物车所有动作围绕这句代码在做&gt; redirect_to :back&gt; end&gt; &gt; Q：redirect_to :back是什么？如果换成render :back为什么不行？&gt; A：&gt; &gt; 2、什么时候要建model，什么时候要建controller，比如在购物车这里rails g model cart、rails g model cart_item？&gt; A：①、需要新建表单、填表、使用栏位的时候，第一次要建model，后续增加栏位用rails g migration add_栏位_to_刚刚的model。&gt; ②、页面需要执行动作的时候，比如新建表单new、保存表单create、显示出栏位index/show。&gt; &gt; 3、上述建立的model，什么时候要加栏位，要加多少栏位，比如cart_item加了cart_id、product_id、quantity栏位？&gt; A：建立model都是因为需要建立数据库表单，表单一定是有想要显示的栏位，可以先加最小必要的栏位，主要功能测试成功后再添加其他次要栏位。&gt; &gt; 12345678910&gt;app/models/cart.rb&gt; def add_product_to_cart(product) #定义函数add_product_to_cart（引入view的参数product)&gt; ci = cart_items.build #新建格子，build与new区别见下一条&gt; ci.product = product #填上所添加商品的id号 &gt; ci.quantity = 1 #填上商品数量，默认加1&gt; ci.save&gt; end&gt; &gt; A：ci仅仅是一个参数而已，我们这里需要新建cart_item,并且向里面添加product和quantity,为便于表示把新建的cart_item赋值给ci。变量名称只是为了阅读方便，对代码执行一般没什么影响。&gt; &gt; 1234567891011121314151617181920&gt; helper_method :current_cart&gt;&gt; def current_cart&gt; @current_cart ||= find_cart &gt; end&gt;&gt; private&gt;&gt; def find_cart&gt; cart = Cart.find_by(id: session[:cart_id])&gt; if cart.blank?&gt; cart = Cart.create&gt; end&gt; session[:cart_id] = cart.id&gt; return cart&gt; end&gt;end&gt;&gt;&gt; &gt; 1、helper_method是什么？A：current_cart 其实原本是一个 controller 内的 method，我们为了要在 view 里面要可以存取它。所以，我们得在 applications_controller.rb 宣告他是 helper_method，才能直接存取。 2、||=是什么？A：或等于，a ||= b 更像是a || a = b，优先取a，如果a为nil或false则取b。 3、find_by与find的区别？http://jiujiubad-blog.logdown.com/posts/3179266A：如果查找不到希望找的元素，find会报ActiveRecord：：RecordNotFound的错误，而find_by不报错，返回nil。看起來是find只能找id或多个id如product = Product.find(1,2,3)，find_by 可以找 裡面所有的元素 (title, description, quantity, price)如product = Product.find_by(title: &#39;快乐&#39;)。ruby搜索ruby week ago。 4、(id: session[:card_id])前面的id:是什么？session[:card_id]是什么？A：前面的id:就是字面上的id，session[:card_id]是现在拿到的购物车的id号码。 在每个人进店时，都会有一块电子感应卡，叫做 session，所以你的电子感应卡上面记录了你拿了哪台车 cart_id，每个人「现在的车」 current_cart 就是透过这样的方式去存取的。————万一你的车丢失了没有关系。if cart.blank? 发现你的车不见了，会再给你一台车。重新登记上去。 5、Cart.create，这里create与build、new、save有什么区别？A：①、save：rails中的save其實是create_or_update，新建或修改記錄。 ②、new ：只是在內存中新建一個對象，操作數據庫要調用save方法。build和new基本相同，多用於一對多情況。 ③、create = new + 执行sql，有跟params里面的栏位信息打交道。 6、blank?是什么？——空的nil的false的A：false is blank；阵列[]；Hash{}；字符（串）’’、’ ‘、”\\t\\n\\r”、nil。以上这些都是blank?如上，一个对象如果是false，空的，或者一个空白字符（串），例如：false, ‘’, ‘ ‘, 或者nil，[], {}, 都是blank，所以在 rails c 中输入： 12345678910111213141516&gt;nil.blank? # =&gt; true&gt;false.blank? # =&gt; true&gt;true.blank? # =&gt; false&gt;[].blank? # =&gt; true&gt;[1,2,3].blank? # =&gt; false&gt;&#123;&#125;.blank? # =&gt; true&gt;&#123; key: &apos;value&apos; &#125;.blank? # =&gt; false&gt;&apos;&apos;.blank? # =&gt; true&gt;&apos; &apos;.blank? # =&gt; true&gt;&quot;\\t\\n\\r&quot;.blank? # =&gt; true&gt;&apos; blah &apos;.blank? # =&gt; false&gt;&quot;\\u00a0&quot;.blank? # =&gt; true&gt;1.blank? # =&gt; false&gt;0.blank? # =&gt; false&gt;Time.now.blank? # =&gt; false&gt; &gt; 7、present?是什么？——非空非nil非false 1234&gt;def present?&gt; !blank?&gt;end&gt; &gt; 商品、格子、车子——格子的信息：商品信息id、车子信息id、商品数量 车有很多格子、有很多商品 商品有很多格子（一种商品就有一个格子） 格子属于商品、格子属于车 1234567891011&gt; def destroy&gt; @cart = current_cart #拿到cart_id，因为一个用户一辆车所有不用find(params[:id])&gt; @cart_item = @cart.cart_items.find_by(product_id: params[:id]) #注意，find_by里的栏位值必须是已知的，所以在html文件里要传进来这个id的具体值所以要传的参数是(cart_item.product_id)。比如传进来的product_id值是3，系统就会对应到3这个产品的cart_item。&gt; @product = @cart_item.product #拿到product_id，为了后面flash可以引用&gt; @cart_item.destroy #删除格子&gt;&gt; flash[:warning] = &quot;成功将 #&#123;@product.title&#125; 从购物车删除!&quot;&gt; redirect_to :back #测试改成redirect_to carts_path，效果一样&gt; end&gt;end&gt; &gt; 1、params[:id]是什么？ 在Rails當中，http request會經過ActionController這個內建的機制來消化，並將可用的變數轉換為params這個變數，我們在controller當中撰寫params[:id]時，所指的其實是從前端回傳的:id。 2、find_by(product_id: params[:id]) 为什么不是find_by(params[:id])，这里params[:id]不是cart_item的id吗？ A：测试发现，用find_by(params[:id])后，点击删除第一件商品会随机删除其他商品，即系统不知道要具体删除哪一个cart_item。——分析：如果写find_by(params[:id])，确实这个id是cart_item的id，但是这里的网址是http://localhost:3000/carts，并不知道params[:id]是多少，所以系统会随机删除一个cart_item。——由于网址找不到id，所有要通过find_by（find只能找id而find_by可以从栏位找）从cart_item的栏位（我们定义了3个栏位：product_id、cart_id、quantity）来找到cart_item的id。 123456&gt;&lt;%= form_for cart_item, url: cart_item_path(cart_item.product_id) do |f| %&gt; 这是什么？？&gt;- &lt;%= f.select :quantity, [1,2,3,4,5] %&gt;&gt;+ &lt;%= f.select :quantity, 1..cart_item.product.quantity %&gt;&gt; &lt;%= f.submit &quot;更新&quot;, data: &#123; disable_with: &quot;Submiting...&quot; &#125; %&gt;&gt;&lt;% end %&gt;&gt; &gt; 为什么结账页checkout是在cart_controller里用Order.new，能不能是新建一个order的controller做new的action？order新建后有订单编号为什么不储存订单信息，把商品名称、价格、数量栏位加上去不行吗？为什么还要新建一个product_list的model？A：一般如果订单已生成，那么商家修改商品价格、库存、描述等，是不能改变已拍下的订单信息的。所以已生成的订单里的商品id用product_list记录，商家商城里的商品id还是用product记录。 1234567891011121314&gt; 在订单建立后建立购买明细缓存：&gt; if @order.save&gt; current_cart.cart_items.each do |cart_item|&gt; product_list = ProductList.new &gt; product_list.order = @order &gt; product_list.product_name = cart_item.product.title&gt; product_list.product_price = cart_item.product.price&gt; product_list.quantity = cart_item.quantity&gt; product_list.save&gt; end&gt;&gt;1、为什么一定要写成ProductList.new?&gt;A：注意观察一下，controller中右边的表达式都是大写开头，是因为右边代表的是类，所以product_list按类的写法，就跟model里第一行的声明一样，就是ProductList。&gt; &gt; 12345678&gt; def show&gt; @order = Order.find(params[:id])&gt; @product_lists = @order.product_lists &gt; end&gt; &gt; Q：product_lists为什么这里要加s？？？？&gt; A：show的页面order是唯一的用单数，而order里可能有一张或多张订单，要把他们全部show出来就要加s。&gt; &gt; 12345678910111213141516171819&gt;before_create :generate_token &gt;def generate_token&gt; self.token = SecureRandom.uuid&gt;end&gt; &gt;def show&gt; @order = Order.find_by_token(params[:id])&gt; @product_lists = @order.product_lists&gt;nd&gt;&gt;1、before_create是什么？&gt;A：before_create 是 Rails model 内建的 callbacks，目的是让资料生成储存前先执行某某动作。&gt;&gt;2、SecureRandom.uuid是什么？&gt;A：SecureRandom.uuid 是 Ruby 内建的随机生成器。&gt;&gt;3、find_by_token是什么？&gt;A：找到元素token&gt; &gt; 123456789&gt;def index&gt; @orders = current_user.orders&gt;end&gt;&gt;1、index中，@orders = current_user.orders与@orders = Order.all的区别？&gt;A：订单order是user的，current_user是一个user，Order.all是指所有user的order。解读成一个user的所有订单、和所有user的所有订单。&gt;&gt;&gt; &gt; 2、@orders =Order.order(“id DESC”)和@resumes = @job.resumes.order(‘created_at DESC’)，order前的名词什么情况加s？？ A：Order是类，@job.resumes是变量的复数形式。 3、Order.order(“id DESC”)是什么？ A：写成Order.all.order(“id DESC”)也得出一样结果，可能是缩写。 12345678&gt;def pay_with_alipay&gt; @order = Order.find_by_token(params[:id])&gt; @order.set_payment_with!(&quot;alipay&quot;)&gt; @order.pay!&gt;&gt; redirect_to order_path(@order.token), notice: &quot;使用支付宝成功完成付款&quot;&gt; end&gt; &gt; 123456789&gt;app/models/order.rb&gt;def set_payment_with!(method)&gt; self.update_columns(payment_method: method )&gt;end&gt;&gt;def pay!&gt; self.update_columns(is_paid: true )&gt;end&gt; &gt; 1、self.update_columns(payment_method: method )是什么？A：dash上查到官方文档定义： 1234&gt; def update_column(name, value)&gt; update_columns(name =&gt; value)&gt; end&gt; &gt; 其中，payment_method:相当于是例子中的栏位name，随后的method相当于例子中的value值。 另外一种更新栏位值的写法是： 1234&gt;def pay!&gt; self.is_paid = true&gt;end&gt; &gt;&gt;&gt; 2、self是什么？ A：（不知道）在atom中找不到，dash中rails的没有ruby的有但好像不相关。 3、self.update_columns(is_paid: true )，如果像之前设置def admin? is_admin end那样写行不行？A： 解释1：if !current_user.admin?这里is_admin是判断状态是不是admin，而pay！的update_columns是把改变状态为已付款。如果把is_admin写成self.update_columns(is_admin: true)，那么所有点击后台的账号都会改变成管理员账号。 解释2：由下面的分析，猜测is_admin是有role_model动态定义，而is_paid没有所以不行（具体用代码测试）。 123456789101112&gt;def define_dynamic_queries(roles)&gt; dynamic_module = Module.new do&gt; roles.each do |role|&gt; [&quot;#&#123;role&#125;?&quot;.to_sym, &quot;is_#&#123;role&#125;?&quot;.to_sym].each do |method|&gt; define_method(method) &#123; is? role &#125;&gt; end&gt; end&gt; end&gt; include dynamic_module&gt;end&gt;原来，role_model根据分配的角色动态地创建方法 - 所以这就是为什么is_admin不在源代码中显示。&gt; &gt;&gt;&gt; 123456789&gt;app/mailers/order_mailer.rb&gt;def notify_order_placed(order)&gt; @order = order&gt; @user = order.user&gt; @product_lists = @order.product_lists&gt;&gt; mail(to: @user.email , subject: &quot;[JDstore] 感谢您完成本次的下单，以下是您这次购物明细 #&#123;order.token&#125;&quot;)&gt; end&gt; &gt; 12&gt;OrderMailer.notify_ship(@order).deliver!&gt; &gt; 1234567891011121314151617181920212223242526272829303132&gt; include AASM #有限状态机的架构&gt;&gt; aasm do&gt; state :order_placed, initial: true #已下单&gt; state :paid #已付款&gt; state :shipping #出货中&gt; state :shipped #到货&gt; state :order_cancelled #取消订单&gt; state :good_returned #退货&gt;&gt;&gt; event :make_payment do #付款阶段&gt; transitions from: :order_placed, to: :paid&gt; end&gt;&gt; event :ship do #送货阶段&gt; transitions from: :paid, to: :shipping&gt; end&gt;&gt; event :deliver do #收货阶段&gt; transitions from: :shipping, to: :shipped&gt; end&gt;&gt; event :return_good do #退货阶段&gt; transitions from: :shipped, to: :good_returned&gt; end&gt;&gt; event :cancel_order do #取消订单阶段(已下单、已付款都可以取消)&gt; transitions from: [:order_placed, :paid], to: :order_cancelled&gt; end&gt; end&gt; &gt; 12345678910111213&gt; def pay_with_wechat&gt;- @order.pay!&gt;+ @order.make_payment!&gt; redirect_to order_path(@order.token), notice: &quot;使用微信支付成功完成付款&quot;&gt; end&gt; &gt;app/models/order.rb&gt;event :make_payment, after_commit: :pay! do&gt; transitions from: :order_placed, to: :paid&gt;end&gt;&gt;Q：event :make_payment, after_commit: :pay! do是什么？&gt; &gt; 第11章还有很多看不明白的地方，查完这些再过一遍异动状态改变思路：先在views页面用case…when语法摆出6中状态，分别需要管理员操作的动作：取消订单、取消订单/出货、设为已出货、退货、订单已取消、已退货。订单已取消、已退货已是一种状态，不需要设置动作，需要设置的有取消订单、出货、已出货、退货4种。——设置路径，设置controller中的action即find_and_do。 12&gt;&lt;%= render &quot;admin/orders/state_option&quot;, order: @order %&gt;，order: @order是什么？&gt; &gt; 123456789&gt;app/mailers/order_mailer.rb&gt; def apply_cancel(order)&gt; @order = order #不是刚需，只因为下文要引用order.token&gt; @user = order.user #不是刚需，只因为下文引用@user.email&gt; @product_lists = @order.product_lists #不是刚需，只因为view里要引用这个model打印栏位&gt;&gt; mail(to: @user.email , subject: &quot;[JDStore] 用户#&#123;order.user.email&#125;申请取消订单 #&#123;order.token&#125;&quot;) #to:xxx是一定要的，to后面的内容可以随便&gt; end&gt; &gt;&gt;&gt;&gt;&gt;&gt; .xxx的用法在controller12&gt; if !current_cart.products.include?(@product)里的.include?&gt; &gt; 123456789&gt; if @cart_item.product.quantity &gt;= cart_item_params[:quantity].to_i&gt; @cart_item.update(cart_item_params)&gt; flash[:notice] = &quot;成功变更数量&quot;&gt; &gt; 1、cart_item_params[:quantity]是什么？&gt;&gt; 2、.to_i是什么？&gt; A：转换成integer整数。&gt; &gt; 12&gt; self.update_columns(is_paid: true )，固定用法前面有解释&gt; &gt; 12&gt; OrderMailer.notify_ship(@order).deliver!&gt; &gt; .destroy_all .include? .present? .blank? .total_price OrderMailer.apply_cancel(@order).deliver! 1234567891011+ def create+ @order = Order.new(order_params)+ @order.user = current_user+ @order.total = current_cart.total_price+ if @order.save+ redirect_to order_path(@order)+ else+ render &apos;carts/checkout&apos;+ end+ end 1、render ‘carts/checkout’ 和 render :new 的区别？ A： 2、这里的user和total两个栏位是拿来做什么的？ Routes1namespace :admin do resources member do，用于加入/退出群组、是否隐藏、加入购物车、微信支付宝支付resources collection do，用于？两者的区别是什么？ member do 和 collection do 的区别？①、member do自定义对特定元素的action，比如@product。 特定元素的意思就是：生成的url helper，需要带（@pruduct）参数，@product是特定的单一的商品。 例如，用于加入/退出群组、是否隐藏、加入购物车、微信支付宝支付。 ②、collection do自定义元素集合的action，比如products。 元素集合的意思就是：生成的url helper，不需要带（@cart）这样的参数，它是对所有的carts做同一操作，而不是对单一个cart操作。 例如，用于清空购物车、购物车结账。 1234567&gt; resources :carts do&gt; collection do&gt; delete :clean&gt; post :checkout&gt; end&gt; end&gt; &gt; 12345678&gt; resources :orders do&gt; member do&gt; post :pay_with_alipay&gt; post :pay_with_wechat&gt; post :apply_to_cancel&gt; end&gt; end&gt; &gt; 123456789&gt; resources :orders do&gt; member do&gt; post :cancel&gt; post :ship&gt; post :shipped&gt; post :return&gt; end&gt; end&gt; &gt; Views观察发现：除了index，原来show的页面也是可以调用&lt;% @xxxs.each do |xxx| %&gt; views里什么时候用（@group）,什么时候用(group)？views里的路径，括号里的内容好像变幻莫测，比如product_path(cart_item.product)。A：①、通常要帶（）的話，就是因为要知道是哪个东西要被编辑/浏览/删除，那就会是单数的情况，所以后面基本上就是带 ID 而已。②、@ 是從 controller 傳進來的，你只要記得這個就好，如果該 controller 下的 action 沒有其他的 @，view 就叫不出來。最簡單的測試，比方說controller 裡面的一個 game 的 action，那會變成： 1234&gt; def game&gt; @nic = &quot;handsome&quot; &gt; end&gt; &gt; 那你去 game.html.erb 裡面，寫一行 &lt;%= @nic %&gt;，就会看到他把讯息抛出来变成 handsome，你只要写两行就可以测试了。 ③、注意观察一下这里是不是在回圈（循环）内，回圈里面一般不用加@，有 @ 这个符号都是 controller 传进来的。你要看整个档案怎么写，不能只看一句，如果他是包在回圈里，那就是回圈生出来的，如果是有@就是controller传进来的 12345&lt;%= link_to(content_tag(:i, &apos;登入&apos;, class: &apos;fa fa-sign-in&apos;), new_user_session_path) %&gt;&lt;i class=&quot;fa fa-home&quot; &gt;&lt;/i&gt;A：以上都是调用icon的方法，需要安装gem &apos;font-awesome-rails&apos;。官网的写法是&lt;i class=&quot;fa fa-telegram&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;，如果要更大可以加上fa-lg、fa-2x、fa-3x等，注意这种写法重构到helper文件里会报错。万金油的写法是content_tag(:i, &apos;登入&apos;, class: &apos;fa fa-sign-in&apos;)，文字部分如果不输入，就只显示图标。 12show和edit表单&lt;%= simple_form_for [:admin, @product] do |f| %&gt;...&lt;%= f.input :title %&gt;...&lt;% end %&gt; 12345678910111213index页面&lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th width=&quot;100&quot;&gt; Options&lt;/th&gt;&lt;/tr&gt;&lt;tbody&gt;&lt;tr&gt; &lt;% @products.each do |product| %&gt; &lt;td&gt;&lt;%= product.title %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= link_to(&quot;Edit&quot;, edit_admin_product_path(product)) %&gt;&lt;/td&gt; &lt;% end %&gt;&lt;/tr&gt;&lt;/tbody&gt; 123show页面&lt;%= @product.title %&gt;&lt;%= @product.description %&gt; 12&lt;%= simple_form_for [@job, @resume] do |f| %&gt;中的[@job,@resume]是什么意思？&lt;%= simple_form_for [:admin, @job] do |f| %&gt;呢？A：先去找到一个job，再在job里找到resume。 12在helper中定义def是前端用的，后端用的在model中定义？A：Model是用来更数据库打交道的，是在Controller中调用的，Helper是Viewer中拿来用的。初步看起来你这个总结是对的。 123views里有时用:method =&gt; :delete，有时用method: :delete，那么是不是: xxx =&gt;和：的意思一样(至少debug的时候这些是成对的)？A：那两种方式意思一样，都可以。 12简历数量的路径admin_job_resumes_path(job)是怎么来的？A：很简单，创建rails g controller admin::job，创建后rake routes就有了。 simple_form用法&lt;%= simple_form_for xx do |f| %&gt; &lt;%= f.select/input/submit :xx %&gt; 123456&lt;% current_cart.cart_items.each do |cart_item| %&gt; &lt;%= simple_form_for cart_item, url: cart_item_path(cart_item.product_id) do |f| %&gt; &lt;%= f.select :quantity, [1,2,3] %&gt; &lt;%= f.submit &quot;更新&quot;, data:&#123;disable_with:&quot;正在更新..&quot;&#125; %&gt; &lt;% end %&gt;&lt;% end %&gt; 1、为什么写成&lt;%= simple_form_for cart_item do |f| %&gt;会报错？ 12345678910NoMethodError in CartItemsController#updateundefined method `update&apos; for nil:NilClassExtracted source (around line #6): @cart = current_cart @cart_item = @cart.cart_items.find_by(product_id: params[:id]) @cart_item.update(cart_item_params) redirect_to :back end A：分析*案例在修改前是用&lt;%= cart_item.quantity %&gt;，所以这里的f代表的应该是cart_item。——stackoverflow查到加入的url是表单数据要提交到的url。——猜测：因为当前页面http://localhost:3000/carts，那么购物车是确定的，但是cart_item很多个，而我们要更新的数据&lt;%= cart_item.quantity %&gt;不知道product_id是多少，系统无法得知要更新哪一个cart_item，所以要指定url。所以如果系统能确定要更新的资料的id位置，就不用去指定url。 2、这里cart_item的url要用哪个URL呢？ A：我觉得在cart_item的index页面不能确定，而show页面可以，所以应该是用show的路径cart_item_path(参数)。这里的参数我一开始猜测是cart_item_path(product_id: params[:id])，但在show页面从网址可以知道cart_item的id，于是我写params[:id]，两种都报错。——根据model里设置的cart、cart_item、product的关系，要讲清楚cart_item是什么就要明白它跟cart和product分别是什么关系，即通过cart_id和product_id就能确定cart_item。所以这里的参数要写cart_item.product_id。 3、为什么问题2的参数不能写params[:id]? A：猜测，是不是有定义product_id和cart_id栏位，所以不能用params[:id]？或是在 网址：localhost:3000/carts/数字a/cart_item/数字b，参数数字a传给了cart_id，参数数字b传给了product_id，因为有自定义的栏位cart_id和product_id，所以不需要rails自带的栏位params[:id]来存储参数？？ 路径类123&gt; &lt;%= form_for cart_item, url: cart_item_path(cart_item.product_id) do |f| %&gt;&gt; A：url对应一个网址；cart_item_path对应的url是：/cart_items/:id(.:format)；cart_item.product_id就是这个特定的cart_item的product_id。&gt; &gt; 图片类12345678910111213&gt; &lt;% if @product.image.present? %&gt;&gt; &lt;span&gt;目前商品图&lt;/span&gt; &lt;br&gt;&gt; &lt;%= image_tag(@product.image.thumb.url) %&gt;&gt; &lt;% else %&gt;&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class: &quot;thumbnail&quot;) %&gt;&gt; &lt;% end %&gt;&gt;&gt; 1、.thumb.url是什么？&gt; A：(对解答质疑)gem &apos;carrierwave&apos;中有设置uploader.thumb.url # =&gt; &apos;/url/to/thumb_my_file.png&apos; # size: 200x200，说明了.thumb.url是在uploader中定义的方法，具体作用就是规定了图片大小。&gt; 我的理解：image_tage()括号里是放一个网址，@product.image.thumb.url是指@product.image这个栏位在thumb这个class样式下的地址url。&gt; 2、image_tag是什么？&gt; A：测试发现，image_tag一定要包在&lt;% if.. %&gt;和&lt;% end %&gt;之间，或&lt;%= link_to xxx do %&gt;..&lt;% end %&gt;，才能用相对网址。或是在括号内写上双引号和绝对网址，如&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fl7g3xdhczj307w0503yj.jpg&quot;&gt; &gt; 1234567891011&gt; &lt;%= link_to product_path(cart_item.product) do %&gt;&gt; &lt;% if cart_item.product.image.present? %&gt;&gt; &lt;%= image_tag(cart_item.product.image.thumb.url, class: &quot;thumbnail&quot;) %&gt;&gt; &lt;% else %&gt;&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class: &quot;thumbnail&quot;) %&gt;&gt; &lt;% end %&gt;&gt; &lt;% end %&gt;&gt; 1、link_to xxx do 是什么？&gt; A：把图片就变成链接。&gt; A：&gt; &gt; .xxx的用法在views，常表示一种状态而controller中是表示一种动作12&gt; &lt;% if current_user.admin? %&gt;views里的.admin？是调用model的吗？&gt; &gt; 12&gt; &lt;%= current_cart.products.count %&gt;拿到购物车内的物品数量&gt; &gt; 12&gt; &lt;%= order.created_at.to_s(:long) %&gt;&gt; &gt; 12&gt; &lt;% if !@order.is_paid? %&gt;，其中is_paid是db的一个栏位设置了boolean。&gt; &gt; 12&gt; &lt;%= order.aasm_state %&gt;，其中aasm_state是db的一个栏位。&gt; &gt; 123456app/views/carts/index.html.erb &lt;% current_cart.cart_items.each do |cart_item| %&gt; #已在model中定义helper_method &lt;%= cart_item.product.title %&gt; &lt;%= cart_item.product.price %&gt; &lt;%= cart_item.quantity %&gt; &lt;% end %&gt; 1&lt;% if cart_item.product.price.present? %&gt;，其中present？是什么？ 123数量选择器quantity的用法：&lt;%= f.select :quantity, [1,2,3,4,5] %&gt;&lt;%= f.select :quantity, 1..cart_item.product.quantity %&gt; 12345678910111213141516171819202122232425262728293031&lt;% case order.aasm_state %&gt;&lt;% when &quot;order_placed&quot; %&gt; &lt;%= link_to(&quot;取消订单&quot;, cancel_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt;&lt;% when &quot;paid&quot; %&gt; &lt;%= link_to(&quot;取消订单&quot;, cancel_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;%= link_to(&quot;出货&quot;, ship_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt;&lt;% when &quot;shipping&quot; %&gt; &lt;%= link_to(&quot;设为已出货&quot;, shipped_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt;&lt;% when &quot;shipped&quot; %&gt; &lt;%= link_to(&quot;退货&quot;, return_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt;&lt;% when &quot;order_cancelled&quot; %&gt; &lt;span class=&quot;label label-default&quot;&gt;订单已取消&lt;/span&gt;&lt;% when &quot;good_returned&quot; %&gt; &lt;span class=&quot;label label-default&quot;&gt;已退货&lt;/span&gt;&lt;% end %&gt; Q：已下订单通知信，为什么是用order_url(@order.token)，而不能用order_path(@order.token)？ &lt;%= link_to(&quot;订单连结&quot;, order_url(@order.token)) %&gt; A：因为发送邮件要用绝对路径，否则收件人打不开邮件。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-自动化测试","slug":"1 ror-system系统/ror-system-自动化测试","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-22T08:04:08.000Z","comments":true,"path":"posts/bf9570f4/","link":"","permalink":"http://yoursite.com/posts/bf9570f4/","excerpt":"","text":"1gem &apos;rspec-rails&apos; 1gem &apos;capybara&apos; 1.3 [bug] 执行rspec leap_year_spec.rb报错问题描述：用gem install rspec安装rspec，执行rspec leap_year_spec.rb时报错： 1234567891011121314151617 apple@bogon ⮀ ~/rails/rspect_app ⮀ ⭠ master± ⮀ rspec leap_year_spec.rbAn error occurred while loading ./leap_year_spec.rb.Failure/Error: superNoMethodError: undefined method `this&apos; for #&lt;Gem::Specification:0x3fc1e0143fac rspec-support-3.7.0&gt;# ./leap_year_spec.rb:3:in `&lt;top (required)&gt;&apos;# ------------------# --- Caused by: ---# LoadError:# cannot load such file -- rspec/mocks# ./leap_year_spec.rb:3:in `&lt;top (required)&gt;&apos;No examples found.Finished in 0.00026 seconds (files took 0.16653 seconds to load)0 examples, 0 failures, 1 error occurred outside of examples 解决办法：改用官网gemfile的安装方法： 123group :development, :test do gem &apos;rspec-rails&apos;end 2-8 TDD你会发现我们不需要一开始就把全部测试案例都先写上去(这样要一次通过所有测试会很辛苦)，而是新写一段测试码让测试失败，改一下实作让测试通过，然后再新写下一个测试码让测试失败，然后再改实作，如此迭代交替。 这种技巧，在软件开发领域有一个很响亮的名称，叫做 TDD(Test-Driven Development)，流程是这样的（流程的最后一步是重构）： 3-8 debug除错方法在测试代码中，你可以直接 puts 变量，跑测试的时候就会印出来了。这是最简单的除错方式。或是你可以在任意地方放 byebug 下中断点，就会在执行到那一行时停下来，可以检查变量，输入 continue 就会继续执行下去。 ===================================================rspec测试文档vs，context 和 describe 作用一模一样，单纯只是分类组织而已，没有实际作用。 自动化测试分成几种不同类型，目前学的这种是针对单一类别的方法进行测试，叫做单元测试(Unit Testing)。 刚刚都是跑单个测试档案，如果要跑全部测试，可以执行 rake spec。通常我们会在 git push 前，尽量跑过一次全部的测试。 5-1-5-9 三步写api测试1、测试http 1expect(response).to have_http_status(200) 2、测试json。其中expect_result是一个hash。 1expect(response.body).to eq( &#123;:x=&gt;xxx, :y=&gt;xxx&#125;.to_json ) 3、测试database有无数据。 1expect(new_user.email).to eq(&quot;admin@example.com&quot;)","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-rails guides 6-10","slug":"1 ror-system系统/ror-system-rails guides 6-10","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/70576f9e/","link":"","permalink":"http://yoursite.com/posts/70576f9e/","excerpt":"","text":"六、Active Record 查询接口 七、Action View 概览 八、Rails 布局和视图渲染 render 告诉 Rails 构建响应时使用哪个视图（或其他静态资源），即渲染哪个视图。 redirect_to ，它告诉浏览器向另一个 URL 发起新请求，即重定向。 yield 标明一个区域，渲染的视图会插入这里。是保持布局简洁的利器。 3.4.6 局部变量八、表单辅助方法 12使用两个散列作为参数，我们可以把第一个散列放在大括号中，或者把两个散列都放在大括号中。form_tag(&#123;controller: &quot;people&quot;, action: &quot;search&quot;&#125;, method: &quot;get&quot;, class: &quot;nifty_form&quot;) fields_for在form_for 内使用 在模型中使用单表继承（single-table inheritance，STI）时，如果只有父类声明为资源，在子类上就不能使用记录识别技术。这时，必须显式说明模型名称、:url 和 :method。 九、Action Controller 概览 关联数组是这样的数组，它的每个数据元素与一个键相对配对，该键用于识别数据元素。由于散列函数用来创建关联数组中的指定元素，并在关联数组中查找指定元素，因此关联数组通常称为散列。在某种意义上，数组元素与列表类似，而散列元素的存放与几何类似，其元素之间没有相对次序。在Ruby中，数组与散列之间的两个最本质的区别是：数组使用数值下标来定位特定的元素，而散列使用字符串值（键）来定位元素；数组中的元素按下标排序，而散列中的元素则不是。散列的创建方法有两种：new方法或将一个字面量赋值给一个变量。 params允许批量赋值 在控制器中，可以通过实例方法 session 访问会话。会话是惰性加载的。如果在动作中不访问，不会自动加载。 闪现消息flash(:noitce、:alert、:warning)，是会话的一个特殊部分，每次请求都会清空。也就是说，其中存储的数据只能在下次请求时使用，因此可用于传递错误消息等。 :only 选项的意思是只跳过这些动作。 十、Rails 路由全解 有一个长期存在的缺陷使 form_for 辅助方法无法自动处理单数资源。有一个解决方案是直接指定表单 URL，例如： 1form_for @geocoder, url: geocoder_path do |f| 如果想把 /articles 路径（不带 /admin 前缀） 映射到 Admin::Articles 控制器上，可以这样声明： 123scope module: &apos;admin&apos; do resources :articles, :commentsend 123resources :photos do get &apos;preview&apos;, on: :memberend 如果不使用 :on 选项，创建的成员路由也是相同的，但资源 ID 就必须通过 params[:photo_id] 而不是 params[:id] 来获取了。 对于把旧系统的 URL 地址映射到新 Rails 应用上的情况，简单路由即非资源式特别适用。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-网站安全","slug":"1 ror-system系统/ror-system-网站安全","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/7286171a/","link":"","permalink":"http://yoursite.com/posts/7286171a/","excerpt":"","text":"第二章 XSS跨站脚本攻击是什么？ 是恶意用户，把代码注入网页的，安全漏洞攻击。 ①、sanitize 白名单**过滤** 只允许部分的 HTML 标籤：&lt;%= sanitize comment.content %&gt; ②、由于 Rails 默认会脱逸 HTML 的关系，所以 Rails 对 XSS 是有了基本的防御。需用.html_safe小心处理那些是安全的字符串、哪些是用户输入的不安全字符串。例如： 1str = &quot;&lt;div class =&apos;user-link&apos;&gt;&quot;.html_safe + link_to(image_tag(gravatar_url), user_path(user)) + &quot; &quot; + user.display_name + &quot;&lt;/div&gt;&quot;.html_safe 第三章 什么是 CSRF跨站请求伪造 ? 是挟制用户，对网站执行非本意操作，的攻击。（骇客挖坑让有权限的用户去跳） ①、routes里的get :highlight改成post highlight。 如何防御 POST 类型的 CSRF 攻击？ 这个防御功能 Rails 已经内建了，修改 app/controllers/application_controller.rb，打开 protect_from_forgery with: :exception。 在 Rails 产生的表单中，就有带这个参数 authenticity_token 骇客在其他网站挖的坑因为没有这个authenticity_token参数，送过来的时候就会被 Rails 阻挡住，会有以下的错误画面：（rails网站 authenticity_token失效也会报错） 第四章 什么是 SQL？ 在 Rails log 中，只要对数据库做任何 CRUD 操作，都会是一个 SQL。如@events = Event.all，即SELECT &quot;events&quot;.* FROM &quot;events&quot; 什么是 SQL Injection数据库注入攻击? 可以破坏我们的数据库、修改数据资料、跳过登入密码检查等。 如何防御 SQL 注入攻击 ？ 跟防御 XSS 一样的道理，所有用户传进来要代入 SQL 的参数，都必须加以逸出。 ①、array写法 @registrations = Registraion.where( :status =&gt; params[:status] ) ②、hash写法 @registrations = Registraion.where( &quot;status = ?&quot;, params[:status] ) 除了逸出之外，也可以采用白名单的过滤方式（因为where、order、pluck等方法在ActiveReocrd 中都没有帮我们做逸出） ，把if params[:sort]改成 if params[:sort] &amp;&amp; [&quot;id DESC&quot;, &quot;id ASC&quot;].include?(params[:sort]) 第五章 什么是hash大量赋值？ new方法接受hash做赋值，如params的用法就是一个hash 1Event.new( &#123; :name =&gt; &quot;Foo&quot;, :description =&gt; &quot;Bar&quot; &#125; ) 放在方法参数最后面的 Hash，它的 { } 是可以省略的，因此这又等同于： 1Event.new( :name =&gt; &quot;Foo&quot;, :description =&gt; &quot;Bar&quot; ) 攻击方法： 由于params中允许了:role，所以通过修改能name=”event[role]”并输入admin，就能把普通账号编程管理员。 params.require(:event).permit(:name, :description) 就是在做白名单的检查，只能允许 params[:event][:name] 和 params[:event][:description] 第六章 什么是加密cookie？ 让服务器在浏览器上留数据的功能。 对称密钥加密算法 用一把密钥来做加密，并且用这个密钥可以解密回来。 在 Rails 中，默认的 Session 实际上就是加密的 Cookie，我们在购物车教程中，使用了 session[:cart_id]来储存追踪用户是哪一台购物车。 在 Rails 中，这一把密钥就存在 config/secrets.yml 如何防御? ①、不要外泄密钥 ②、如果你的网站需要非常高的安全性，则不建议使用 Cookie 加密来做 Session。在 Rails 可以更换 Session Store存储的方式，例如换成 Active Record’s Session Store。这会将 Session 数据存在数据库中，而不是 Cookie 之中，这样骇客就完全无从下手了。 打开 config/initializers/session_store.rb 观察看看： 12config/initializers/session_store.rbRails.application.config.session_store :cookie_store, key: &apos;_hackme-app_session&apos; 第七章 什么是 DoS 拒绝服务攻击 想像你今天开一间书店，恶意的对手找了跑腿100人在你的店门口只看不买，这一种攻击就叫做 DoS 拒绝服务攻击。不像前几章，骇客的目的是窃取资料或是修改资料，DoS 攻击的目的是让你做不成生意，让你的网站无法服务正常用户。 攻击的手法就是，不断地发送 HTTP 请求让服务器忙不过来。 DoS 怎么防御 不太好防御，因为并不是因为网站有漏洞造成。大方向只能想办法去辨识攻击方的样态，然后进行封锁。 封锁攻击方的 IP 网络地址是最基本的手法 安装 rack-attack gem，这可以设定当特定 IP 位址就某一段时间内存取太多次的话，自动进行封锁 不过困难点在于太多次是多少次，设太低会阻挡到正常用户，例如公司、vpn用户共享一个IP。 改进网站效能 如果真的面临大量的DDoS 攻击，就不是Rails 应用层级可以处理得了，必须购买专门的网络防火墙，例如百度安全、云盾DDoS高防IP等等云服务商的产品。 第八章 安装gem &#39;brakeman&#39; 检测代码，执行 brakeman分析有可能有漏洞的地方。 安装 gem &#39;bundler-audit&#39; 检测套件，执行 bundle-audit检查已装gem是否有安全漏洞需要升级。bundle update 套件名称 就可以进行升级。 第九章 散列函数 是一种能将数据变成摘要(digest)的算法，执行 irb，然后输入以下代码实验看看： 1234require &apos;digest&apos;Digest::SHA1.hexdigest &apos;12345678&apos;得到 &quot;7c222fb2927d828af22f592134e8932480637c0d&quot; 相同的数据，每次都会得到一样的摘要 散列函数是单向的，无法逆推：只能从数据算出摘要，不能从摘要算出数据 散列函数的用途 摘要值拿来快速比较两个文档是否相同 Git 用这个摘要值当作每次 commit 的唯一识别 ID 网络传档的时候，透过比较这个摘要，就可以知道下载了完整正确的档案。 Asset pipeline 会将 CSS 和 JavaScript 压缩，档名就是透过散列函数产生的 用户注册时输入的密码，在实际存储进数据库时，会先经过散列函数，变成摘要值。数据库里面没有存用户的明码，而是存密码摘要后的值。 数据库不会存用户的明码，所以即使是数据库管理员，也不会知道用户真正的密码是什么。知道 encrypted_password 并没有什么用，因为我们无法逆推。 万一数据库整个外洩了，骇客也无法知道用户的密码 要怎么判断一个网站有没有存明码呢？ 只要试试看忘记密码程序即可，如果网站直接将你的密码寄给你，那就代表他的数据库存明码。 第十章 HTTPS非对称加密 可以在不交换密钥的情况下，实现浏览器和服务器的连线。 在非对称加密算法中，会有两把钥匙，一把叫做公钥、一把叫做密钥。 透过公钥加密的密文，只有密钥能够解开 透过密钥加密的密文，只有公钥能够解开 在部署 Linux 服务器时，我们会将自己的公钥放在服务器上，这样登入的时候就不需要打帐号密码，服务器就能认证你 在 Git 之中，我们会将自己的公钥放在 Github 上，这样 git push 和 pull 时，Github 就能做认证。 剩下信任问题，我们怎么知道这个公钥真的代表这个网站主？ 这就是为什么我们需要申请或购买网站安全凭证(SSL certificate)的原因。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-编程语言第二集","slug":"1 ror-system系统/ror-system-编程语言第二集","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/e7d42cb4/","link":"","permalink":"http://yoursite.com/posts/e7d42cb4/","excerpt":"","text":"函数式编程12、匿名函式 函式也是一种数据类型。又叫做 First-class function 头等函数。 以下的 Ruby 程式码中，变量 x 就是一个函式变量。它的值 -&gt;{ puts &quot;Hello World&quot;} 叫做匿名函式。匿名函式要透过 .call 才会实际调用。 12x = -&gt; &#123; puts &quot;Hello World&quot; &#125;x.call # 输出 Hello World -&gt; 等同于 lambda 等同于 Proc.new ​ 12x = function()&#123; console.log(&quot;Hello World&quot;) &#125;x() # 输出 Hello World 在 JavaScript 中调用一个函式一定要加上括号，所以用 x() 表示触发调用。 既然函式也是一种数据类型，我们就可以将这个函式变量当作参数来传递 1234567891011121314foo = -&gt; &#123; puts &quot;foo&quot; &#125;def bar(x) puts &quot;bar&quot; x.callendbar(foo)# 输出# bar# foo 注意到第一行宣告 foo 函式的时候，我们并没有真的调用它，直到 x.call 时才调用它。 直接内嵌的写法 123456789101112def bar(x) puts &quot;bar&quot; x.callendbar( -&gt;&#123; puts &quot;zoo&quot; &#125; )# 输出# bar# zoo ruby写法 如果参数列最后一个参数是匿名函式，那么就会用这种简化的写法：传入的匿名函式用 { ...} 或 do .... end 表示，然后在函式里面用 yield 这个关键字来实际调用它。 通常单行的程式会用 { ... } 的写法，多行则会用 do ... end 的写法。这只是 Coding Style 惯例而已，作用是一样的。 12345678910111213141516171819def bar puts &quot;bar&quot; yield(&quot;zoo&quot;)endbar do |x| puts x puts &quot;foo&quot;end# 输出# bar# zoo# foo其中 yield(&quot;zoo&quot;) 会将 &quot;zoo&quot; 带入匿名函式，也就是函式 bar 的 x 参数 13、匿名函式的应用 匿名函式可以将函数当作参数。 pre-and post-processing前置和后置处理 首先一定要打开档案，完成后一定要调用 close 方法 1234f = File.open(&quot;myfile.txt&quot;, &apos;w&apos;) # 前置处理f.write(&quot;Lorem ipsum dolor sit amet&quot;)f.write(&quot;Lorem ipsum dolor sit amet&quot;)f.close # 后置处理 改用传入 block 参数的写法，这样就会自动关档了： 1234File.open(&quot;myfile.txt&quot;, &apos;w&apos;) do |f| f.write(&quot;Lorem ipsum dolor sit amet&quot;) f.write(&quot;Lorem ipsum dolor sit amet&quot;)end callback function 回调函数的意思是先挖好坑，让调用这个 API 的人可以填要执行什么。 例如 Rails ActiveRecord 可以注册 callback 方法，在 save 前后做一些事情。我们在百宝箱 2-3 自订 Model 网址曾经用过 before_validation :generate_friendly_id, :on =&gt; :create，这会在 save 前去调用 generate_friendly_id 方法。 调用函式在 JavaScript 用的就更多了，例如绑事件： 12345$(&quot;div&quot;).click(function()&#123; console.log(&quot;click!&quot;)&#125;)这个 click 的参数就是一个回调函式用法，当我们真正 click 时，才会调用这个匿名函式。 Closure 闭包特性 意思是它会将外面的作用域(scope)一起包进来，函式内可以读取到函数外的变量，但是在匿名函式中新建立的变量，离开匿名函式后会清掉。 1234567891011arr = [1,2,3]outer = 1arr.each do puts outer # 可以读取到外面的 outer 变量 inner = 4 # 新建立一个 inner 变量endinner # 错误 NameError，找不到 inner 这个变量 14、Combinator functions Combinator functions，指的是处理容器的三个组合招数。 1、映射map，的意思就是将容器里面的元素，一对一变换成另一个新的容器。 123456arr = [1,2,3,4,5,6,7,8,9,10]result = arr.map &#123; |i| i+1 &#125;puts result# 输出 [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 2、过滤select，就是将容器里的元素，根据某些条件过滤建立另一个容器。 1234arr = [1,2,3,4,5,6,7,8,9,10]result = arr.select&#123; |i| i % 2 == 0 &#125; # 这个匿名函式要回传 true 或 falseputs result 3、归纳reduce，就是将一个容器里的元素，归纳成一个值： 12345arr = [1,2,3,4,5,6,7,8,9,10]result = arr.reduce(0) &#123; |sum, i| sum + i &#125;puts resultreduce 的第一个参数 0 是初始值，然后这个匿名函式依序走访容器，两个参数 sum 跟 i，前者 sum 是前一次循环的回传结果。i 是这次走访的元素。 找最大值其实也可以用 reduce 方法： 123456789101112arr = [9, 2, 10, 6, 2, 4, 5, 6, 0, 4]max = arr.reduce do |max, i| if max &gt; i max else i endendputs max# 输出 10 综合应用：假如我们想从以下的数据找出小于 1000 的最大的金额，要怎么找呢？ 12345678910111213tickets = [ &#123; name: &quot;Ticket A&quot;, amount: 100 &#125;, &#123; name: &quot;Ticket B&quot;, amount: 1123 &#125;, &#123; name: &quot;Ticket C&quot;, amount: 670 &#125;, &#123; name: &quot;Ticket D&quot;, amount: 50 &#125;, &#123; name: &quot;Ticket E&quot;, amount: 990 &#125;,]result = tickets.map&#123; |t| t[:amount] &#125;.select&#123; |a| a &lt; 1000 &#125;.reduce&#123; |x,y|(x &gt; y)? x : y &#125;puts result# 输出 990 面向对象编程15、什么是面向对象? 所谓的对象(Object)就是指一个带有状态和方法的容器。 12345678var my_object = &#123; name: &quot;ihower&quot;, move: function()&#123; console.log( this.name + &quot; is moving&quot; ) &#125;&#125;my_object.move() my_object 有两个属性，一个是 name 一个是 move，而 move 其实是一个匿名函式。这个对象有自己的状态(name 是 ihower)，有自己的方法(move)。我们把相关的数据和方法，一起包进物件里面。 my_object.move() 可以看成是朝对象 my_object 发送一个 move 讯息。接收者 my_object 接到一个 move 讯息。 所谓的类(Class)就是去定义了某一种类型的对象所拥有的属性和方法。除了 JavaScript，其他编程语言包括 Ruby，都是要先定义类(Class-based)才能创造对象。 你可以想像类(Class)就是对象(Object)的模版 由类产生出来的 Object对象，又叫做 Instance (实例) 16、Ruby 语法说明123456789101112131415161718class Person def initialize(name) @name = name end def say(word) puts &quot;#&#123;word&#125;, #&#123;@name&#125;&quot; endendp1 = Person.new(&quot;ihower&quot;)p2 = Person.new(&quot;ihover&quot;)p1.say(&quot;Hello&quot;) # 输出 Hello, ihowerp2.say(&quot;Hello&quot;) # 输出 Hello, ihover 类一定是大写开头，也是一种常数 initialize 是对象的建构方法，当调用 new 的时候的会把参数传进这里 @ 开头的变量，也就是范例中的 @name 叫做对象变量(instance variable)。这个是对象的内部状态。 def 会定义对象的方法 1234567891011class Person @@name = “ihower” def self.say puts @@name endendPerson.say # 输出 ihower 两个 @@ 开头的变量，也就是 @@name 叫做类变量(class variable)，这个是属于类的 用 self.def 开头定义的方法，也就是 def self.say 叫做类方法。用 Person.say 就会调用。 另外，对象变量(@开头)和类变量(@@开头)，都是封装在类内部，类外无法存取。都需透过定义方法才可以存取到。如下： 12 ​ attr_ 的用法 1234567class Person attr_accessor :name attr_reader :foo attr_writer :barend 其中 attr_accessor :name 等同于刚刚我们自定义的存取方法。attr_reader 只定义读、attr_writer 只定义写。 public(公开)、protected 和 private 不同，默认是 public。 privated_method 或 protected_method。这两个方法只能在内部调用。 protected 允许调用同一类的对象。private 则严格限制在内部调用。 我们希望管控有哪些 public 方法。这些 public 是公开的 API 会给程序员调用的，如果有任何修改都会影响到软件的其他地方要一起修改。但是 private 但 protected 方法就只会影响这个对象的内部而已。 17、特性一: 封装(encapsulation) 面向对象的其中一个特色就是封装，调用者不需要关心内部结构，只需根据公开接口进行操作。这样内部的结构可以根据架构需求而修改，而不会影响到其他程式。 如果改用面向对象来写，首先定义分数的类： 123456789101112131415161718192021class MyRational attr_accessor :x, :y def initialize(x, y) @x, @y = x, y end def add(target) MyRational.new(@x*target.y + @y*target.x, @y*target.y) endend# 2/3 + 3/4a = MyRational.new(2,3)b = MyRational.new(3,4)c = a.add(b)puts &quot;#&#123;c.x&#125;/#&#123;c.y&#125;&quot; ！！！！99：这个例子没看懂？？ 18、特性二: 继承(inheritance) 继承可以让父类的定义都复制到子类，在 Ruby 中用 class Child &lt; Parent 符号表示： 在 Rails 中也很常见继承，打开任一个 Model 档案，都是继承自 ApplicationRecord。再打开会发现 ApplicationRecord 继承自 ActiveRecord::Base。后者是 Rails 框架的核心类，我们之所以可以调用 .save、.find、.where 等等方法就是在 ActiveRecord::Base 中定义的。 打开任一个 Controller 档案，都是继承自 ApplicationController，然后 ApplicationController 又是继承自 ActionController::Base，我们之所以可以调用 before_action、render、redirect_to 等等方法就是在 ActionController::Base 中定义的。 module用法一：多重继承。如果有多个父类要继承，在 Ruby 中会用到 module： 其中 module Ownership 会用 include 的语法 mix-in(混入)到 Car 里面。 123456789101112131415161718192021222324252627module Ownership def show_owner puts &quot;#&#123;self.class&#125; show_owner called&quot; endendclass Vehicle def move puts &quot;move&quot; endend# Car has two parents: Car and Ownershipclass Car &lt; Vehicle include Ownershipendclass House include Ownershipendcar = Car.newhouse = House.newcar.show_owner()house.show_owner() module用法二：命名空间 12345module A class B endend如果要使用它要用 A::B。 如果 module A 已经定义过了，则可以这样写： 123class A::Cend module用法三：定义模块方法： 12345678910module MyUtil def self.foobar puts &quot;foobar&quot; endendMyUtil.foobar# 输出 foobar 19、特性三: 多态(polymorphism) 多态的意思是可以把很多不一样的东西，当作同一种东西来处理。 例如箱子有很多种，打开的实作方式各有不同(有的有锁、有的没锁)，但是这些箱子都有提供「打开」这个接口可以操作。下命令的人只需要知道呼叫这个指令即可。 1234567891011121314151617181920box1 = &#123; :name =&gt; &quot;Box1&quot;, :type =&gt; &quot;locked&quot; &#125;box2 = &#123; :name =&gt; &quot;Box2&quot;, :type =&gt; &quot;unlocked&quot;&#125;box3 = &#123; :name =&gt; &quot;Box3&quot;, :type =&gt; &quot;seal&quot; &#125;def open_box(box) if box[:type] == &quot;locked&quot; puts &quot;Open locked&quot; elsif box[:type] == &quot;unlocked&quot; puts &quot;Open unlocked&quot; elsif box[:type] == &quot;seal&quot; puts &quot;Open Seal&quot; endendarr = [box1, box2, box3]arr.each do |x| open_box(x)end这样设计的缺点是不好扩充，维护性低。因为无论是新增不同的箱子，或是修改某一个箱子打开的行为，都得修改同一个方法，复杂度全部集中在 open_box 之中。 让我们改用面向对象来写： 12345678910111213141516171819202122232425262728293031323334353637383940class Box attr_accessor :name def initialize(name) @name = name end def open puts &quot;Open default box&quot; endendclass LockedBox &lt; Box def open puts &quot;Open locked&quot; endendclass UnlockedBox &lt; Box def open puts &quot;Open Unlocked&quot; endendclass SealBox &lt; Box def open puts &quot;Open seal&quot; endendbox1 = LockedBox.new(&quot;Box1&quot;)box2 = UnlockedBox.new(&quot;Box2&quot;)box3 = SealBox.new(&quot;Box3&quot;)arr = [box1, box2, box3]arr.each do |x| x.open()end代码看起来好像变多了，但是扩充性和维护性比较好。这种多型的特型让我们不需要担心确切的数据类型，只要接口一致(都有 open 方法)就可以操作。 鸭子型别 Duck Typing 在动态语言中，不同对象只要方法的接口一样，就可以有多态的特型，这又叫做 Duck Typing：当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。 名词释疑：方法的「接口(Interface)」指的是方法的名称和参数，方法的「实作(Implement)」指的是方法内实际要做的代码。上述的 LockedBox、UnlockedBox 和 SealBox 都有一样的 open 接口，但是子类别中定义了不同的实作。 20、面向对象设计面向对象设计又是一门学问，有兴趣的学员，可以朝以下参考资源搜寻： 面向对象设计实践指南: Ruby 语言描述 人民邮电 SOLID OO 设计原则 Design Patterns 设计模式，最有名的即 GoF patterns。设计模式针对了特定的情境，提供设计解法(通常是如何设计你的类别)，并且「命名」这些模式让程序员可以方便沟通和当作命名的元素。另一方面也是提供一种可以临摹的设计范例。常见的设计模式包括 Factory, Adapter, Composite, Decorator, Iterator, Observer 等等 异常处理 Exception21、什么是异常处理 Exception RuntimeError 是一个 Ruby 内建的默认异常对象，用来储存关于这个异常的信息。Rails 还有内建其他不同的异常对象，详见 Ruby API。 raise 的大多是 Ruby 本身或是我们使用的库和框架之中，例如： 当你对一个对象调用一个不存在的方法时，Ruby 会丢出 NoMethodError 异常 在 Rails 中当URL找不到任何路由规则可以符合时，会丢出 Routing Error 异常 Ruby 语法说明: rescue 在 rescue 我们会写如何去处理(拯救)异常，而 rescue =&gt; e 的 e 是个异常对象，会储存关于这个异常的信息。 常见的 rescue 可能是显示错误讯息，告诉用户这个操作失败了，然后程序回复正常继续执行。 Ruby 语法: ensure ensure 部分则是不管有没有发生异常，都一定会执行到。 Ruby 语法: 顶层异常捕获 1234567891011def 某个方法名称 # do something raise &apos;An error has occured.&apos;rescue =&gt; e puts &apos;I am rescued.&apos;ensure puts &apos;This code gets executed always.&apos;end上述的 begin...rescue 语法，如果放在 def 方法定义中，则可以用以下的简略写法。也就是可以省略掉原本异常处理的 begin 跟结尾的 end。 22、什么是 callstack 和 backtrace 在一个复杂的软件中，方法内会调用其他方法，然后方法又在调用其他方法，例如以下范例，c 方法调用 b 方法、b 方法内又调用 a 方法。这种一层一层的关系，又叫做 callstack。 1234567891011121314151617181920212223def a puts &quot;a&quot; raise &quot;A error&quot;enddef b puts &quot;b&quot; a()enddef c puts &quot;c&quot; b()endbegin c()rescue =&gt; e puts e.message puts e.backtraceensure puts &quot;finally&quot;end 在上述的 rescue 中，我们用 e.backtrace 可以列出调用的 callstack 关系，backtrace 的意思就是回朔当初的调用关系。 在 Rails 中如果发生异常，根据 development 模式或 production 模式，最外层有不同的异常处理策略：在开发时最外层的 rescue 会显示错误的 backtrace，这样可以帮助我们了解发生错误的来龙去脉： 默认显示 Application Trace 也就是我们写的代码 backtrace，而 Framework Trace 则是发生在 Rails 框架内的 backtrace。 如果是 production 模式，默认的最外层 rescue 其实是显示 500 错误画面(也就是 public/500.html)。 23、异常处理策略 在看 Ruby API 或是 gem 的 API 文档时，你可以注意一下它们是如何处理异常情况的。——在gem的页面，搜索Exceptions即可看到相关语法。 如果你用 save 的话，如果失败只会回传 false 然后就继续执行下去，用了 save! 如果失败程序会中断。 24、关于 Rails 的异常处理 find API 如果找不到数据，会丢 ActiveRecord::RecordNotFound 的例外。在 show action 我们经常用这个 API。 在 development 开发模式中，你会看到 ActiveRecord::RecordNotFound 异常。在 production 上线模式，会显示 404 页面(public/404.html) 在百宝箱第一集的「自定义 Model 网址」中，我们新增了一个 friendly_id 字段，然后 show action 改成： 123def show @event = Event.find_by_friendly_id!(params[:id])end 为什么这里偏好用抛出异常的策略呢？如果我们改用 Event.find_by_friendly_id(params[:id]) 的话，找不到数据时会回传 nil，那么 @event 变成 nil 程序继续执行，抛出异常是 NoMethodError 最后程序中断。这时候要找到真正异常的原因就会多花一点时间。 我们希望在异常发生的第一时间就中断程序(fail fast)，而不是让程序无声地继续执行下去，最后像一个未爆弹一样最后莫名其妙地炸掉。 可以在 controller 中宣告 rescue_from 去救回特定的异常对象。 gem用于异常通知 Exception Notifier Rollbar 推荐这套，有免费额度一个月记录 5000 个异常 Airbrake 这些第三方服务可以在网站发生异常错误的时候自动将错误讯息收集起来，并且提供了还蛮不错的后台可以浏览，还可以统计及追踪异常处理的情况。免费的方案对于小网站就很够用，非常推荐使用。 元编程 Meta-Programming25、元编程: define_method 元编程(Meta-programming)的意思是让程序帮我们写程序。 这就是 Rails 很多 API 用法之所以这么 magic 背后的秘密武器。撰写元编程的能力是库和框架作者的必备技巧。 推荐Ruby元编程一书。 define_method，是个 Ruby 的类方法，可以动态定义对象方法。 define_method(:foo) { puts &quot;bar&quot; } 等同于 123def foo puts &quot;bar&quot;end 区别与def，差别在 define_method 用匿名函式来定义方法，所以有 Closure(闭包) 特性。 Rails 很多这样的宣告背后，都是用 define_method 做出来的 26、元编程: method_missing Ruby 在调用方法找不到时，会改调用这个 method_missing 这个方法。 123456789101112131415161718class Car def go(place) puts &quot;go to #&#123;place&#125;&quot; end def method_missing(name, *args) if name.to_s =~ /^go_to_(.*)/ go($1) else super end endendcar = Car.newcar.go_to_taipei# go to taipei car.blah # NoMethodError: undefined method blah 1234567 * 当调用 `go_to_XXXX` 时，因为我们并没有特别定义这个方法，所以就会改成调用 `method_missing` 方法，在这个方法中我们再检查是不是 `go_to_` 开头，如果是的话就调用 `go` 方法，不然就改调用 `super` 回到原本的行为，也就是抛出 NoMethodError 异常。 * `super` 当你在类别中复写一个方法时，透过 `super` 可以调用到上一层被你复写的方法。* 例如 ActiveRecord 的 `find_by_XXX(&quot;YYY&quot;)` 功能，会变成 `where( :XXX =&gt; &quot;YYY&quot; ).first`* 又例如在 Web API 教程中，用到 Jbuilder 样板来输出 JSON。其中的 `number`、`available_seats` 和 `created_at` 方法其实都进到 `method_missing` 了。 app/views/api/v1/trains/show.json.jbuilderjson.number @train.numberjson.available_seats @train.available_seatsjson.created_at @train.created_at 123456789101112！！！！！！！99：method_missing到底是什么鬼，完全看不懂？？？？## 27、元编程: Monkey Patch* [猴子补丁](https://zh.wikipedia.org/wiki/%E7%8C%B4%E8%A1%A5%E4%B8%81)的意思是直接复写 Class 的定义去修改行为，在 Rails 中常用这招来扩增原本 Ruby 的行为，例如：* try方法 * try 这个方法的原理是什么呢？ class NilClass def try(*args) nil endend 1234* blank? 方法 * blank? 这个方法的原理是什么呢？ class Object # 在 Ruby 中所有的类都会继承自 Object 这个类 def blank? respond_to?(:empty?) ? empty? : !self end def present? !blank? end end class NilClass def blank? true endend class FalseClass def blank? true endend class TrueClass def blank? false endend 123456789101112131415# 编码风格## 28、编码风格 Coding Style编码风格对于团队开发十分重要，维持一惯的风格可以增加代码的可读性。在 Ruby 和 Rails 社区中，大多会遵守以下的风格指南：- [Ruby 风格指南](https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md)- [Rails 风格指南](https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md)- [Udacity Frontend Nanodegree Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/index.html)- [A guide for programming in style](https://github.com/thoughtbot/guides/tree/master/style)对个人来说，编码风格也代表了你的代码有没有在编程语言社区「接地气」，更是代码给人的第一印象。一个缩进不佳的代码，给人的第一印象就是「不专业」。","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-rails guides 1-5","slug":"1 ror-system系统/ror-system-rails guides 1-5","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/30d3b38f/","link":"","permalink":"http://yoursite.com/posts/30d3b38f/","excerpt":"","text":"一、Active Record 基础 1 Active Record 是什么？ Active Record 是 MVC 中的 M（模型），负责处理数据和业务逻辑，是一种对象关系映射系统。 2 Active Record 中的“多约定少配置”原则2.1 命名约定 数据库表名：复数，下划线分隔单词（例如 book_clubs） 模型类名：单数，每个单词的首字母大写（例如 BookClub） 模型/类 表/模式 Article articles LineItem line_items Deer deers Mouse mice Person people 2.2 模式约定 主键和外键 3 创建 Active Record 模型12class Product &lt; ApplicationRecordend 上面的代码会创建 Product 模型，对应于数据库中的 products 表。同时，products 表中的字段也映射到 Product 模型实例的属性上。 4 覆盖命名约定 .table_name= 方法可以指定要使用的表名。如果这么做，还要调用 set_fixture_class 方法，手动指定固件（my_products.yml）的类名 123class Product &lt; ApplicationRecord self.table_name = &quot;my_products&quot;end 12345class ProductTest &lt; ActiveSupport::TestCase set_fixture_class my_products: Product fixtures :my_products ...end .primary_key= 方法指定表的主键 123class Product &lt; ApplicationRecord self.primary_key = &quot;product_id&quot;end 5 CRUD：读写数据5.1 创建new 方法创建一个新对象，create 方法创建新对象，并将其存入数据库。调用 user.save 可以把记录存入数据库。 5.2 读取 Active Record 为读取数据库中的数据提供了丰富的 API，如.all、.first等。 find、find_by、where三种查询API的区别？ find是找一个或多个id david = User.find_by(name: &#39;David&#39;)，查找返回第一个名为 David 的用户 users = User.where(name: &#39;David&#39;)，查找所有名为 David的用户 5.3 更新 user.name = &#39;Dave&#39; user.save，相当于是user.update(name: &#39;Dave&#39;) 量更新多个记录User.update_all &quot;max_login_attempts = 3, must_change_password = &#39;true&#39;&quot; 5.4 删除user.destroy 6 数据验证在存入数据库之前，Active Record 还可以验证模型。模型验证有很多方法，可以检查属性值是否不为空，是否是唯一的、没有在数据库中出现过，等等。 7 回调Active Record 回调用于在模型生命周期的特定事件上绑定代码，相应的事件发生时，执行绑定的代码。例如创建新纪录时、更新记录时、删除记录时，等等 8 迁移Rails 提供了一个 DSL（Domain-Specific Language）用来处理数据库模式，叫做“迁移”。迁移的代码存储在特定的文件中，通过 rails 命令执行，可以用在 Active Record 支持的所有数据库上。 二、Active Record 迁移 1 迁移概述 迁移是以一致和轻松的方式按时间顺序修改数据库模式的实用方法。它使用 Ruby DSL，因此不必手动编写 SQL。 可以把迁移看做数据库的新“版本”。数据库模式一开始并不包含任何内容，之后通过一个个迁移来添加或删除数据表、字段和记录。 Active Record 还会更新 db/schema.rb 文件，以匹配最新的数据库结构。 如果想在迁移中完成一些 Active Record 不知如何撤销的操作，可以使用 reversible do |dir| 方法，或者用 def up 和 def down 方法来代替 change 方法 2 创建迁移2.1 创建独立的迁移 rails generate migration，会创建空的迁移，并进行适当命名。 rails generate migration xxx:string:index 如果迁移名称是 AddXXXToYYY 或 RemoveXXXFromYYY 的形式，并且后面跟着字段名和类型列表，那么会生成包含合适的 add_column 或 remove_column 语句的迁移（用于补充栏位）。如下： 1234567rails generate migration RemovePartNumberFromProducts part_number:stringclass RemovePartNumberFromProducts &lt; ActiveRecord::Migration[5.0] def change remove_column :products, :part_number, :string endend 如果迁移名称是 CreateXXX 的形式，并且后面跟着字段名和类型列表，那么会生成用于创建包含指定字段的 XXX 数据表的迁移。如下： 1234567891011rails generate migration CreateProducts name:string part_number:stringclass CreateProducts &lt; ActiveRecord::Migration[5.0] def change create_table :products do |t| t.string :name t.string :part_number end endend 其他数据表 references 字段类型作为参数（还可使用 belongs_to）。如下： 1234567rails generate migration AddUserRefToProducts user:referencesclass AddUserRefToProducts &lt; ActiveRecord::Migration[5.0] def change add_reference :products, :user, foreign_key: true endend 如果迁移名称中包含 JoinTable，生成器会创建联结数据表。如下： 12345678910rails g migration CreateJoinTableCustomerProduct customer productclass CreateJoinTableCustomerProduct &lt; ActiveRecord::Migration[5.0] def change create_join_table :customers, :products do |t| # t.index [:customer_id, :product_id] # t.index [:product_id, :customer_id] end endend 2.2 模型生成器 什么是脚手架生成器？ 在项目最开始的时候，就帮你搭建好架子，脚手架工具会生成好一些基本代码，一般是遵循MVC结构代码。比如生成好 struts+spring+hibernate 三个框架整合好的脚手架代码，会包含一下简单的CRUD代码、数据源、视图层等等项目中很常用的。 模型和脚手架生成器会生成适用于添加新模型的迁移。在rails g migration xxx:xxx添加字段名称:类型,那么添加这些字段所需的语句也会被创建。 2.3 传递类型修饰符 这些类型修饰符用大括号括起来，放在字段类型之后。 12345678rails generate migration AddDetailsToProducts &apos;price:decimal&#123;5,2&#125;&apos; supplier:references&#123;polymorphic&#125;class AddDetailsToProducts &lt; ActiveRecord::Migration[5.0] def change add_column :products, :price, :decimal, precision: 5, scale: 2 add_reference :products, :supplier, polymorphic: true endend 3 编写迁移三、Active Record 数据验证 2 数据验证辅助方法2.11 uniqueness 这个辅助方法在保存对象之前验证属性值是否是唯一的。 3 常用的验证选项3-1、allow_nil 如果要验证的值为 nil 就跳过验证。 3-2、 :allow_blank 如果要验证的值为空（调用 blank? 方法判断，例如 nil 或空字符串），就跳过验证。 3-3、 :message3-4、:on 选项指定什么时候验证。 on: :create，指定只在创建记录时验证；或者使用 on: :update，指定只在更新记录时验证。 还可以使用 on: 定义自定义的上下文。必须把上下文的名称传给 valid?、invalid? 或 save 才能触发自定义的上下文。 ​ 4 严格验证 当对象无效时抛出 ActiveModel::StrictValidationFailed 异常。还可以通过 :strict 选项指定抛出什么异常： 12345class Person &lt; ApplicationRecord validates :token, presence: true, uniqueness: true, strict: TokenGenerationExceptionend Person.new.valid? # =&gt; TokenGenerationException: Token can&apos;t be blank 5 条件验证 :if 和 :unless 选项指定，这两个选项的值可以是符号、字符串、Proc 或数组。:if 选项指定何时做验证。如果要指定何时不做验证，使用 :unless 选项。 5.1 使用符号 表示要在验证之前执行对应的方法。 1validates :card_number, presence: true, if: :paid_with_card? 5.2 使用 Proc 使用 Proc 对象可以在行间编写条件，不用定义额外的方法。 1234class Account &lt; ApplicationRecord validates :password, confirmation: true, unless: Proc.new &#123; |a| a.password.blank? &#125;end 5.3 条件组合 同一个条件会用在多个验证上，这时可以使用 with_options 方法。 12345class User &lt; ApplicationRecord with_options if: :is_admin? do |admin| admin.validates :password, length: &#123; minimum: 10 &#125; admin.validates :email, presence: true end 5.4 联合条件 如果是否做某个验证要满足多个条件时，可以使用数组。 12345class Computer &lt; ApplicationRecord validates :mouse, presence: true, if: [&quot;market.retail?&quot;, :desktop?], unless: Proc.new &#123; |c| c.trackpad.present? &#125;end 6 自定义验证6.1 自定义验证类(class) 自定义的验证类继承自 ActiveModel::Validator，必须实现 validate 方法，其参数是要验证的记录，然后验证这个记录是否有效。自定义的验证类通过 validates_with 方法调用。 12345678910111213class MyValidator &lt; ActiveModel::Validator def validate(record) unless record.name.starts_with? &apos;X&apos; record.errors[:name] &lt;&lt; &apos;Need a name starting with X please!&apos; end endend class Person include ActiveModel::Validations validates_with MyValidatorend 在自定义的验证类中验证单个属性，最简单的方法是继承 ActiveModel::EachValidator 类。此时，自定义的验证类必须实现 validate_each 方法。 123456789101112class EmailValidator &lt; ActiveModel::EachValidator def validate_each(record, attribute, value) unless value =~ /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]&#123;2,&#125;)\\z/i record.errors[attribute] &lt;&lt; (options[:message] || &quot;is not an email&quot;) end endend class Person &lt; ApplicationRecord validates :email, presence: true, email: trueend 6.2 自定义验证方法 验证方法必须使用类方法 validate（API）注册，传入自定义验证方法名的符号形式。 自定义的验证方法会按照注册的顺序执行。 使用 validate 方法注册自定义验证方法时可以设置 :on 选项，指定什么时候验证。:on 的可选值为 :create 和 :update。 12345678class Invoice &lt; ApplicationRecord validate :active_customer, on: :create def active_customer errors.add(:customer_id, &quot;is not active&quot;) unless customer.active? endend 7 处理验证错误7.1 errors person.errors.messages # =&gt; {}，键是每个属性的名称，值是一个数组，包含错误消息字符串。 1234567class Person &lt; ApplicationRecord validates :name, presence: true, length: &#123; minimum: 3 &#125;end person = Person.new(name: &quot;John Doe&quot;)person.valid? # =&gt; trueperson.errors.messages # =&gt; &#123;&#125; 7.2 errors[] 如上代码，errors[] 用于获取某个属性上的错误消息，返回结果是一个由该属性所有错误消息字符串组成的数组，每个字符串表示一个错误消息。如果字段上没有错误，则返回空数组。 123456789class Person &lt; ApplicationRecord validates :name, presence: true, length: &#123; minimum: 3 &#125;endperson = Person.newperson.valid? # =&gt; falseperson.errors[:name] # =&gt; [&quot;can&apos;t be blank&quot;, &quot;is too short (minimum is 3 characters)&quot;] 7.3 errors.add add 方法用于手动添加某属性的错误消息，它的参数是属性和错误消息。 使用 errors.full_messages（或等价的 errors.to_a）方法调用 1234567891011121314class Person &lt; ApplicationRecord def a_method_used_for_validation_purposes errors.add(:name, &quot;cannot contain the characters !@#%*()_-+=&quot;) endend person = Person.create(name: &quot;!@#&quot;) person.errors[:name] # =&gt; [&quot;cannot contain the characters !@#%*()_-+=&quot;] person.errors.full_messages # =&gt; [&quot;Name cannot contain the characters !@#%*()_-+=&quot;] &lt;&lt; 的作用与 errors#add 一样：把一个消息追加到 errors.messages 数组中。 12345678910111213class Person &lt; ApplicationRecord def a_method_used_for_validation_purposes errors.messages[:name] &lt;&lt; &quot;cannot contain the characters !@#%*()_-+=&quot; endend person = Person.create(name: &quot;!@#&quot;) person.errors[:name] # =&gt; [&quot;cannot contain the characters !@#%*()_-+=&quot;] person.errors.to_a # =&gt; [&quot;Name cannot contain the characters !@#%*()_-+=&quot;] 7.4 errors.details 使用 errors.add 方法可以为返回的错误详情散列指定验证程序类型。 如果想提升错误详情的信息量，可以为 errors.add 方法提供额外的键，指定不允许的字符。 1234567891011class Person &lt; ApplicationRecord def a_method_used_for_validation_purposes errors.add(:name, :invalid_characters, not_allowed: &quot;!@#%*()_-+=&quot;) endend person = Person.create(name: &quot;!@#&quot;) person.errors.details[:name]# =&gt; [&#123;error: :invalid_characters, not_allowed: &quot;!@#%*()_-+=&quot;&#125;] 7.5 errors[:base] 错误消息可以添加到整个对象上，而不是针对某个属性。如果不想管是哪个属性导致对象无效，只想把对象标记为无效状态，就可以使用这个方法。errors[:base] 是个数组，可以添加字符串作为错误消息。 12345class Person &lt; ApplicationRecord def a_method_used_for_validation_purposes errors[:base] &lt;&lt; &quot;This person is invalid because ...&quot; endend 7.6 errors.clear 想清除 errors 集合中的所有错误消息，可以使用 clear 方法。 当然，在无效的对象上调用 errors.clear 方法后，对象还是无效的，虽然 errors 集合为空了，但下次调用 valid? 方法，或调用其他把对象存入数据库的方法时， 会再次进行验证。如果任何一个验证失败了，errors 集合中就再次出现值了。 7.7 errors.size size 方法返回对象上错误消息的总数。 8 在视图中显示验证错误 使用脚手架时，Rails 会在生成的 _form.html.erb 中加入一些 ERB 代码，显示模型错误消息的完整列表。假如有个模型对象存储在实例变量 @article 中，视图的代码可以这么写： 1234567891011&lt;% if @article.errors.any? %&gt; &lt;div id=&quot;error_explanation&quot;&gt; &lt;h2&gt;&lt;%= pluralize(@article.errors.count, &quot;error&quot;) %&gt; prohibited this article from being saved:&lt;/h2&gt; &lt;ul&gt; &lt;% @article.errors.full_messages.each do |msg| %&gt; &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt; &lt;% end %&gt; &lt;/ul&gt; &lt;/div&gt;&lt;% end %&gt; 此外，如果使用 Rails 的表单辅助方法生成表单，如果某个表单字段验证失败，会把字段包含在一个 &lt;div&gt; 中。脚手架默认添加的 CSS 规则如下： 123&lt;div class=&quot;field_with_errors&quot;&gt; &lt;input id=&quot;article_title&quot; name=&quot;article[title]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot;&gt;&lt;/div&gt; 12345.field_with_errors &#123; padding: 2px; background-color: red; display: table;&#125; 四、Active Record 回调 1 对象的生命周期 在 Rails 应用正常运作期间，对象可以被创建、更新、保存或删除。 2 回调概述 回调是在对象生命周期的某些时刻被调用的方法。 2.1 注册回调 回调在使用之前需要注册。我们可以先把回调定义为普通方法，然后使用宏式类方法把这些普通方法注册为回调： ——99：“类宏，书中给出的解释很简单, Use a class method in a class definition. 就是在一个类定义中使用一个类方法，那么这个类方法就叫类宏。”如下在User的class中使用self.login，这就是宏式类方法？before_validation就是注册？ 通常应该把回调定义为私有方法private。如果把回调定义为公共方法，就可以从模型外部调用回调，这样做违反了对象封装原则。 123456789101112class User &lt; ApplicationRecord validates :login, :email, presence: true before_validation :ensure_login_has_a_value private def ensure_login_has_a_value if login.nil? self.login = email unless email.blank? end endend 3 可用的回调3.1 创建对象 &amp; 3.2 更新对象123456789before_validationafter_validationbefore_savearound_savebefore_updatearound_updateafter_updateafter_saveafter_commit/after_rollback 3.3 删除对象1234before_destroyaround_destroyafter_destroyafter_commit/after_rollback 无论按什么顺序注册回调，在创建和更新对象时，after_save 回调总是在更明确的 after_create 和 after_update 回调之后被调用。 3.4 after_initialize 和 after_find 回调 当 Active Record 对象被实例化时，不管是通过直接使用 new 方法还是从数据库加载记录，都会调用 after_initialize 回调。 当 Active Record 从数据库中加载记录时，会调用 after_find 回调。 如果同时定义了 after_initialize 和 after_find 回调，会先调用 after_find 回调。 3.5 after_touch 回调 当我们在 Active Record 对象上调用 touch 方法时，会调用 after_touch 回调。 after_touch 回调可以和 belongs_to 一起使用： 12345class User &lt; ApplicationRecord after_touch do |user| puts &quot;You have touched an object&quot; endend 4 调用回调 下面这些方法会触发回调： 123456789101112131415createcreate!decrement!destroydestroy!destroy_allincrement!savesave!save(validate: false)toggle!update_attributeupdateupdate!valid? 此外，下面这些查找方法会触发 after_find 回调： 12345678allfirstfindfind_byfind_by_*find_by_*!find_by_sqllast 每次初始化类的新对象时都会触发 after_initialize 回调。 5 跳过回调 请慎重地使用这些方法，因为有些回调包含了重要的业务规则和应用逻辑，在不了解潜在影响的情况下就跳过回调，可能导致无效数据。 123456789101112decrementdecrement_counterdeletedelete_allincrementincrement_countertoggletouchupdate_columnupdate_columnsupdate_allupdate_counters 6 停止执行 整个回调链包装在一个事务中。只要有回调抛出异常，回调链随即停止，并且发出 ROLLBACK 消息。如果想故意停止回调链，可以这么做：throw :abort 7 关联回调 回调不仅可以在模型关联中使用，还可以通过模型关联定义。假设有一个用户在博客中发表了多篇文章，现在我们要删除这个用户，那么这个用户的所有文章也应该删除，为此我们通过 Article 模型和 User 模型的关联来给 User 模型添加一个 after_destroy 回调： 1234567891011class User &lt; ApplicationRecord has_many :articles, dependent: :destroyend class Article &lt; ApplicationRecord after_destroy :log_destroy_action def log_destroy_action puts &apos;Article destroyed&apos; endend 8 条件回调8.1 使用符号作为 :if 和 :unless 选项的值 可以使用符号作为 :if 和 :unless 选项的值，这个符号用于表示先于回调调用的断言方法。当使用 :if 选项时，如果断言方法返回 false 就不会调用回调；当使用 :unless 选项时，如果断言方法返回 true 就不会调用回调。 123class Order &lt; ApplicationRecord before_save :normalize_card_number, if: :paid_with_card?end 8.2 使用 Proc 作为 :if 和 :unless 选项的值 在验证方法非常短时最适合使用这种方式，这类验证方法通常只有一行代码： 12345class Order &lt; ApplicationRecord before_save :normalize_card_number, if: Proc.new &#123; |order| order.paid_with_card? &#125;end 8.3 在条件回调中使用多个条件 在编写条件回调时，我们可以在同一个回调声明中混合使用 :if 和 :unless 选项： 12345class Comment &lt; ApplicationRecord after_create :send_email_to_author, if: :author_wants_emails?, unless: Proc.new &#123; |comment| comment.article.ignore_comments? &#125;end 9 回调类 有时需要在其他模型中重用已有的回调方法，为了解决这个问题，Active Record 允许我们用类来封装回调方法 123456789101112131415在下面的例子中，我们为 PictureFile 模型创建了 PictureFileCallbacks 回调类，在这个回调类中包含了 after_destroy 回调方法：class PictureFileCallbacks def after_destroy(picture_file) if File.exist?(picture_file.filepath) File.delete(picture_file.filepath) end endend在上面的代码中我们可以看到，当在回调类中声明回调方法时，回调方法接受模型对象作为参数。回调类定义之后就可以在模型中使用了：class PictureFile &lt; ApplicationRecord after_destroy PictureFileCallbacks.newend 请注意，上面我们把回调声明为实例方法，因此需要实例化新的 PictureFileCallbacks 对象。当回调想要使用实例化的对象的状态时，这种声明方式特别有用。尽管如此，一般我们会把回调声明为类方法： 如果把回调声明为类方法，就不需要实例化新的 PictureFileCallbacks 对象。 1234class PictureFile &lt; ApplicationRecord after_destroy PictureFileCallbacksend 10 事务回调 after_commit 和 after_rollback 这两个回调会在数据库事务完成时触发。它们和 after_save回调非常相似，区别在于它们在数据库变更已经提交或回滚后才会执行，常用于 Active Record 模型需要和数据库事务之外的系统交互的场景。 由于只在执行创建、更新或删除动作时触发 after_commit 回调是很常见的，这些操作都拥有别名： 123after_create_commitafter_update_commitafter_destroy_commit 在事务中创建、更新或删除模型时会调用 after_commit 和 after_rollback 回调。然而，如果其中有一个回调引发异常，异常会向上冒泡，后续 after_commit 和 after_rollback 回调不再执行。 五、Active Record 关联 1 为什么使用关联 Rails 知道两个模型之间有联系，相关操作可以得到简化。 2 关联的类型 关联使用宏式调用实现，用声明的形式为模型添加功能。例如，声明一个模型属于（belongs_to）另一个模型后，Rails 会维护两个模型之间的“主键-外键”关系，而且还会向模型中添加很多实用的方法。 1234567Rails 支持六种关联：belongs_tohas_onehas_manyhas_many :throughhas_one :throughhas_and_belongs_to_many 2.1 belongs_to 关联 belongs_to 关联创建两个模型之间一对一的关系，声明所在的模型实例属于另一个模型的实例。 例如，如果应用中有作者和图书两个模型，而且每本书只能指定给一位作者 123class Book &lt; ApplicationRecord belongs_to :authorend 相应的迁移如下： 1234567891011121314class CreateBooks &lt; ActiveRecord::Migration[5.0] def change create_table :authors do |t| t.string :name t.timestamps end create_table :books do |t| t.belongs_to :author, index: true t.datetime :published_at t.timestamps end endend 2.2 has_one 关联 has_one 关联也建立两个模型之间的一对一关系，但语义和结果有点不一样。这种关联表示模型的实例包含或拥有另一个模型的实例。 例如，应用中每个供应商只有一个账户 123class Supplier &lt; ApplicationRecord has_one :accountend 相应的迁移如下： 1234567891011121314class CreateSuppliers &lt; ActiveRecord::Migration[5.0] def change create_table :suppliers do |t| t.string :name t.timestamps end create_table :accounts do |t| t.belongs_to :supplier, index: true t.string :account_number t.timestamps end endend 根据使用需要，可能还要为 accounts 表中的 supplier 列创建唯一性索引和（或）外键约束。这里，我们像下面这样定义这一列： 12345create_table :accounts do |t| t.belongs_to :supplier, index: &#123; unique: true &#125;, foreign_key: true # ...end 2.3 has_many 关联 has_many 关联建立两个模型之间的一对多关系。在 belongs_to 关联的另一端经常会使用这个关联。 声明 has_many 关联时，另一个模型使用复数形式。 例如，对应用中的作者和图书模型来说 123class Author &lt; ApplicationRecord has_many :booksend 相应的迁移如下： 1234567891011121314class CreateAuthors &lt; ActiveRecord::Migration[5.0] def change create_table :authors do |t| t.string :name t.timestamps end create_table :books do |t| t.belongs_to :author, index: true t.datetime :published_at t.timestamps end endend 2.4 has_many :through 关联 has_many :through 关联经常用于建立两个模型之间的多对多关联。这种关联表示一个模型的实例可以借由第三个模型，拥有零个和多个另一模型的实例。 physician.patients = patients会为新建立的关联对象创建联结模型实例。如果其中一个对象删除了，相应的联结记录也会删除。 自动删除联结模型的操作直接执行，不会触发 *_destroy 回调。 例如，在医疗锻炼中，病人要和医生约定练习时间 1234567891011121314class Physician &lt; ApplicationRecord has_many :appointments has_many :patients, through: :appointmentsend class Appointment &lt; ApplicationRecord belongs_to :physician belongs_to :patientend class Patient &lt; ApplicationRecord has_many :appointments has_many :physicians, through: :appointmentsend 相应的迁移如下： 1234567891011121314151617181920class CreateAppointments &lt; ActiveRecord::Migration[5.0] def change create_table :physicians do |t| t.string :name t.timestamps end create_table :patients do |t| t.string :name t.timestamps end create_table :appointments do |t| t.belongs_to :physician, index: true t.belongs_to :patient, index: true t.datetime :appointment_date t.timestamps end endend 2.5 has_one :through 关联 has_one :through 关联建立两个模型之间的一对一关系。这种关联表示一个模型通过第三个模型拥有另一模型的实例。 例如，每个供应商只有一个账户，而且每个账户都有一个账户历史 12345678910111213class Supplier &lt; ApplicationRecord has_one :account has_one :account_history, through: :accountend class Account &lt; ApplicationRecord belongs_to :supplier has_one :account_historyend class AccountHistory &lt; ApplicationRecord belongs_to :accountend 相应的迁移如下： ​123456789101112131415161718192021class CreateAccountHistories &lt; ActiveRecord::Migration[5.0] def change create_table :suppliers do |t| t.string :name t.timestamps end create_table :accounts do |t| t.belongs_to :supplier, index: true t.string :account_number t.timestamps end create_table :account_histories do |t| t.belongs_to :account, index: true t.integer :credit_rating t.timestamps end endend​ ![](https://ws3.sinaimg.cn/large/006tKfTcgy1flc9ad3xitj30u210uajb.jpg) 2.6 has_and_belongs_to_many 关联 直接建立两个模型之间的多对多关系，不借由第三个模型。 例如，应用中有装配体和零件两个模型，每个装配体有多个零件，每个零件又可用于多个装配体 1234567class Assembly &lt; ApplicationRecord has_and_belongs_to_many :partsend class Part &lt; ApplicationRecord has_and_belongs_to_many :assembliesend 相应的迁移如下： ​12345678910111213141516171819class CreateAssembliesAndParts &lt; ActiveRecord::Migration[5.0] def change create_table :assemblies do |t| t.string :name t.timestamps end create_table :parts do |t| t.string :part_number t.timestamps end create_table :assemblies_parts, id: false do |t| t.belongs_to :assembly, index: true t.belongs_to :part, index: true end endend​ ![](https://ws4.sinaimg.cn/large/006tKfTcgy1flc9hkgojnj30t00u2tf2.jpg) 2.7 在 belongs_to 和 has_one 之间选择 二者之间的区别是在哪里放置外键（外键在 belongs_to 关联所在模型对应的表中），不过也要考虑数据的语义。has_one 的意思是某样东西属于我，即哪个东西指向你。 例如，说供应商有一个账户，比账户拥有供应商更合理 2.8 在 has_many :through 和 has_and_belongs_to_many 之间选择 根据经验，如果想把关联模型当做独立实体使用，要用 has_many :through 关联；如果不需要使用关联模型，建立 has_and_belongs_to_many 关联更简单（不过要记得在数据库中创建联结表）。 如果要对联结模型做数据验证、调用回调，或者使用其他属性，要使用 has_many :through 关联。 2.9 多态关联 关联还有一种高级形式——多态关联（polymorphic association）。在多态关联中，在同一个关联中，一个模型可以属于多个模型。 例如，图片模型可以属于雇员模型或者产品模型 123456789101112class Picture &lt; ApplicationRecord belongs_to :imageable, polymorphic: trueend class Employee &lt; ApplicationRecord has_many :pictures, as: :imageableend class Product &lt; ApplicationRecord has_many :pictures, as: :imageableend 在 belongs_to 中指定使用多态，可以理解成创建了一个接口，可供任何一个模型使用。 在 Employee 模型实例上，可以使用 @employee.pictures 获取图片集合。 类似地，可使用 @product.pictures 获取产品的图片。 在 Picture 模型的实例上，可以使用 @picture.imageable 获取父对象。不过事先要在声明多态接口的模型中创建外键字段和类型字段： 12345678910111213class CreatePictures &lt; ActiveRecord::Migration[5.0] def change create_table :pictures do |t| t.string :name t.integer :imageable_id t.string :imageable_type t.timestamps end add_index :pictures, [:imageable_type, :imageable_id] endend 上面的迁移可以使用 t.references 简化： 12345678910class CreatePictures &lt; ActiveRecord::Migration[5.0] def change create_table :pictures do |t| t.string :name t.references :imageable, polymorphic: true, index: true t.timestamps end endend 2.10 自联结 设计数据模型时，模型有时要和自己建立关系。 例如，在一个数据库表中保存所有雇员的信息，但要建立经理和下属之间的关系 123456class Employee &lt; ApplicationRecord has_many :subordinates, class_name: &quot;Employee&quot;, foreign_key: &quot;manager_id&quot; belongs_to :manager, class_name: &quot;Employee&quot;end 在迁移（模式）中，要添加一个引用字段，指向模型自身： ​123456789class CreateEmployees &lt; ActiveRecord::Migration[5.0] def change create_table :employees do |t| t.references :manager, index: true t.timestamps end endend​ 3 小技巧和注意事项 为了在 Rails 应用中有效使用 Active Record 关联，要了解以下几点： 12345控制缓存避免命名冲突更新模式控制关联的作用域双向关联 3.1 控制缓存 关联添加的方法都会使用缓存，记录最近一次查询的结果，以备后用。缓存还会在方法之间共享。 123author.books # 从数据库中检索图书author.books.size # 使用缓存的图书副本author.books.empty? # 使用缓存的图书副本 应用的其他部分可能会修改数据，那么应该怎么重载缓存呢？在关联上调用 reload 即可： 12345author.books # 从数据库中检索图书author.books.size # 使用缓存的图书副本author.books.reload.empty? # 丢掉缓存的图书副本 # 重新从数据库中检索 3.2 避免命名冲突 因为创建关联时，会向模型添加同名方法，所以关联的名字不能和 ActiveRecord::Base 中的实例方法同名。如果同名，关联方法会覆盖 ActiveRecord::Base 中的实例方法，导致错误。 3.3 更新模式 对 belongs_to 关联来说，要创建外键；对 has_and_belongs_to_many 关联来说，要创建相应的联结表。 3.3.1 创建 belongs_to 关联所需的外键 为了提升查询性能，最好为外键添加索引；为了保证参照完整性，最好为外键添加约束： 12345678910111213class CreateBooks &lt; ActiveRecord::Migration[5.0] def change create_table :books do |t| t.datetime :published_at t.string :book_number t.integer :author_id end add_index :books, :author_id add_foreign_key :books, :authors endend 3.3.2 创建 has_and_belongs_to_many 关联所需的联结表 创建 has_and_belongs_to_many 关联后，必须手动创建联结表。除非使用 :join_table 选项指定了联结表的名称，否则 Active Record 会按照类名出现在字典中的顺序为表起名。因此，作者和图书模型使用的联结表默认名为“authors_books”，因为在字典中，“a”在“b”前面。 我们把 id: false 选项传给 create_table 方法，因为这个表不对应模型。只有这样，关联才能正常建立。如果在使用 has_and_belongs_to_many 关联时遇到奇怪的行为，例如提示模型 ID 损坏，或 ID 冲突，有可能就是因为创建了主键。 1234567class Assembly &lt; ApplicationRecord has_and_belongs_to_many :partsend class Part &lt; ApplicationRecord has_and_belongs_to_many :assembliesend 上述关联需要在迁移中创建 assemblies_parts 表，而且该表无主键： 123456789101112class CreateAssembliesPartsJoinTable &lt; ActiveRecord::Migration[5.0] def change create_table :assemblies_parts, id: false do |t| t.integer :assembly_id t.integer :part_id end add_index :assemblies_parts, :assembly_id add_index :assemblies_parts, :part_id endend 3.4 控制关联的作用域 默认情况下，关联只会查找当前模块作用域中的对象。 第一段代码能正常运行，因为 Supplier 和 Account 在同一个作用域中。 123456789101112module MyApplication module Business class Supplier &lt; ApplicationRecord has_one :account end class Account &lt; ApplicationRecord belongs_to :supplier end endend 但第二段代码就不行了，因为 Supplier 和 Account 在不同的作用域中。 1234567891011121314module MyApplication module Business class Supplier &lt; ApplicationRecord has_one :account end end module Billing class Account &lt; ApplicationRecord belongs_to :supplier end endend 第二段代码改成第三段，声明关联时指定完整的类名可正常关联。但啰嗦不如用第一段。 12345678910111213141516module MyApplication module Business class Supplier &lt; ApplicationRecord has_one :account, class_name: &quot;MyApplication::Billing::Account&quot; end end module Billing class Account &lt; ApplicationRecord belongs_to :supplier, class_name: &quot;MyApplication::Business::Supplier&quot; end endend 3.5 双向关联 即在两个模型中都要声明关联。这样一来，Active Record 只会加载一个 Author 对象副本，从而确保应用运行效率更高效，并避免数据不一致。 具有下述选项的关联Active Record无法自动识别： 12345:conditions:through:polymorphic:class_name:foreign_key Active Record 提供了 inverse_of 选项，可以通过它明确声明双向关联： 1234567class Author &lt; ApplicationRecord has_many :books, inverse_of: &apos;writer&apos;end class Book &lt; ApplicationRecord belongs_to :writer, class_name: &apos;Author&apos;, foreign_key: &apos;author_id&apos;end inverse_of 有些限制： 不支持 :through 关联； 不支持 :polymorphic 关联； 不支持 :as 选项； 4 关联详解4.1 belongs_to 关联详解 belongs_to 关联创建一个模型与另一个模型之间的一对一关系。用数据库术语来说，就是这个类中包含外键。 4.1.1 belongs_to 关联添加的方法 声明 belongs_to 关联后，所在的类自动获得了五个和关联相关的方法： 12345associationassociation=(associate)build_association(attributes = &#123;&#125;)create_association(attributes = &#123;&#125;)create_association!(attributes = &#123;&#125;) 对下述声明来说： 123class Book &lt; ApplicationRecord belongs_to :authorend Book 模型的每个实例都获得了这些方法： 12345authorauthor=build_authorcreate_authorcreate_author! 在 has_one 和 belongs_to 关联中，必须使用 build_* 方法构建关联对象。association.build 方法是在 has_many 和 has_and_belongs_to_many 关联中使用的。创建关联对象要使用 create_* 方法。 4.1.1.1 association 1、@author= @book.author，如果找不到关联的对象，返回 nil。 2、如果关联的对象之前已经取回，会返回缓存版本。如果不想使用缓存版本（强制读取数据库）在父对象上调用 #reload 方法。 4.1.1.2 association=(associate) 这个方法的底层操作是，从关联对象上读取主键，然后把值赋给该主键对应的对象@book.author = @author 4.1.1.3 build_association(attributes = {}) build_association 方法返回该关联类型的一个新对象。这个对象使用传入的属性初始化，对象的外键会自动设置，但关联对象不会存入数据库。 123&gt; @author = @book.build_author(author_number: 123,&gt; author_name: &quot;John Doe&quot;)&gt; 4.1.1.4 create_association(attributes = {}) create_association 方法返回该关联类型的一个新对象。这个对象使用传入的属性初始化，对象的外键会自动设置，只要能通过所有数据验证，就会把关联对象存入数据库。 123&gt; @author = @book.create_author(author_number: 123,&gt; author_name: &quot;John Doe&quot;)&gt; 4.1.1.5 create_association!(attributes = {}) 与 create_association 方法作用相同，但是如果记录无效，会抛出 ActiveRecord::RecordInvalid 异常。 4.1.2 belongs_to 方法的选项 定制的方法很简单，声明关联时传入选项或者使用代码块即可。belongs_to 关联支持下列选项： 1234567891011:autosave:class_name:counter_cache:dependent:foreign_key:primary_key:inverse_of:polymorphic:touch:validate:optional 4.1.2.1 :autosave 如果把 :autosave 选项设为 true，保存父对象时，会自动保存所有子对象，并把标记为析构的子对象销毁。 4.1.2.2 :class_name 如果另一个模型无法从关联的名称获取，可以使用 :class_name 选项指定模型名。例如，如果一本书属于一位作者，但是表示作者的模型是 Patron，就可以这样声明关联： 12345&gt;&gt; class Book &lt; ApplicationRecord&gt; belongs_to :author, class_name: &quot;Patron&quot;&gt; end&gt; 4.1.2.3 :counter_cache 如果想知道 @author.books.size 的结果，要在数据库中执行 COUNT(*) 查询。如果不想执行这个查询，可以在声明 belongs_to 关联的模型中加入计数缓存功能： 4.1.2.4 :dependent :dependent 选项控制属主销毁后怎么处理关联的对象： :destroy：也销毁关联的对象 :delete_all：直接从数据库中删除关联的对象（不执行回调） :nullify：把外键设为 NULL（不执行回调） :restrict_with_exception：如果有关联的记录，抛出异常 :restrict_with_error：如果有关联的对象，为属主添加一个错误 4.1.2.5 :foreign_key Rails 都不会自动创建外键字段 xxx_id，你要自己在迁移中创建。 4.1.2.6 :primary_key Rails 假定使用表中的 id 列保存主键。使用 :primary_key 选项可以指定使用其他列。 12345678&gt; class User &lt; ApplicationRecord&gt; self.primary_key = &apos;guid&apos; # 主键是 guid，不是 id&gt; end&gt; &gt; class Todo &lt; ApplicationRecord&gt; belongs_to :user, primary_key: &apos;guid&apos;&gt; end&gt; &gt; 执行 @user.todos.create 时，@todo 记录的用户 ID 是 @user 的 guid 值。 4.1.2.7 :inverse_of :inverse_of 选项指定 belongs_to 关联另一端的 has_many 和 has_one 关联名。不能和 :polymorphic 选项一起使用。 123456789&gt;&gt; class Author &lt; ApplicationRecord&gt; has_many :books, inverse_of: :author&gt; end&gt; &gt; class Book &lt; ApplicationRecord&gt; belongs_to :author, inverse_of: :books&gt; end&gt; 4.1.2.8 :polymorphic :polymorphic 选项为 true 时，表明这是个多态关联。 4.1.2.9 :touch 如果把 :touch 选项设为 true，保存或销毁对象时，关联对象的 updated_at 或 updated_on 字段会自动设为当前时间。还可指定要更新哪个时间戳字段： 12345&gt;&gt; class Book &lt; ApplicationRecord&gt; belongs_to :author, touch: :books_updated_at&gt; end&gt; 4.1.2.10 :validate 如果把 :validate 选项设为 true，保存对象时，会同时验证关联的对象。该选项的默认值是 false，保存对象时不验证关联的对象 4.1.2.11 :optional 如果把 :optional 选项设为 true，不会验证关联的对象是否存在。该选项的默认值是 false。 4.1.3 belongs_to 的作用域 在作用域代码块中可以使用任何一个标准的查询方法。下面分别介绍这几个： 1234whereincludesreadonlyselect 4.1.3.1 where where 方法指定关联对象必须满足的条件。 12345&gt;&gt; class book &lt; ApplicationRecord&gt; belongs_to :author, -&gt; &#123; where active: true &#125;&gt; end&gt; 4.1.3.2 includes includes 方法指定使用关联时要及早加载的间接关联。 如果经常要直接从商品上获取作者对象（@line_item.book.author），就可以在关联中把作者从商品引入图书中： 1234567891011121314&gt;&gt; class LineItem &lt; ApplicationRecord&gt; belongs_to :book, -&gt; &#123; includes :author &#125;&gt; end&gt; &gt; class Book &lt; ApplicationRecord&gt; belongs_to :author&gt; has_many :line_items&gt; end&gt; &gt; class Author &lt; ApplicationRecord&gt; has_many :books&gt; end&gt; &gt; 直接关联没必要使用 includes，常用于多对多关联。 4.1.3.3 readonly 如果使用 readonly，通过关联获取的对象是只读的。 4.1.3.4 select 1、select 方法用于覆盖检索关联对象使用的 SQL SELECT 子句。默认情况下，Rails 检索所有字段。 2、如果在 belongs_to 关联中使用 select 方法，应该同时设置 :foreign_key 选项，确保返回的结果正确。 4.1.4 什么时候保存对象 把对象赋值给 belongs_to 关联不会自动保存对象，也不会保存关联的对象。 4.2 has_one 关联详解 has_one 关联建立两个模型之间的一对一关系。用数据库术语来说，这种关联的意思是外键在另一个类中。如果外键在这个类中，应该使用 belongs_to 关联。 4.2.1 has_one 关联添加的方法 声明 has_one 关联后，声明所在的类自动获得了五个关联相关的方法：——同4.1的belongs_to 12345associationassociation=(associate)build_association(attributes = &#123;&#125;)create_association(attributes = &#123;&#125;)create_association!(attributes = &#123;&#125;) 123class Supplier &lt; ApplicationRecord has_one :accountend 12345accountaccount=build_accountcreate_accountcreate_account! 4.2.1.1 association4.2.1.2 association=(associate)4.2.1.3 build_association(attributes = {})4.2.1.5 create_association!(attributes = {})4.2.2 has_one 方法的选项 有时还是需要定制 has_one 关联的行为。定制的方法很简单，声明关联时传入选项即可。 例如，下面的关联使用了两个选项： 1234class Supplier &lt; ApplicationRecord has_one :account, class_name: &quot;Billing&quot;, dependent: :nullifyend has_one 关联支持下列选项： 1234567891011:as:autosave:class_name:dependent:foreign_key:inverse_of:primary_key:source:source_type:through:validate 4.2.2.1 :as :as 选项表明这是多态关联。前文已经详细介绍过多态关联。 4.2.2.2 :autosave 如果把 :autosave 选项设为 true，保存父对象时，会自动保存所有子对象，并把标记为析构的子对象销毁。 4.2.2.3 :class_name 如果另一个模型无法从关联的名称获取，可以使用 :class_name 选项指定模型名。例如，供应商有一个账户，但表示账户的模型是 Billing，那么就可以这样声明关联： 12345&gt;&gt; class Supplier &lt; ApplicationRecord&gt; has_one :account, class_name: &quot;Billing&quot;&gt; end&gt; 4.2.2.4 :dependent 控制属主销毁后怎么处理关联的对象： 123456&gt; :destroy：也销毁关联的对象；&gt; :delete：直接把关联的对象从数据库中删除（不执行回调）；&gt; :nullify：把外键设为 NULL，不执行回调；&gt; :restrict_with_exception：有关联的对象时抛出异常；&gt; :restrict_with_error：有关联的对象时，向属主添加一个错误；&gt; 4.2.2.5 :foreign_key 按照约定，在另一个模型中用来存储外键的字段名是模型名后加 _id。:foreign_key 选项用于设置要使用的外键名： 12345&gt;&gt; class Supplier &lt; ApplicationRecord&gt; has_one :account, foreign_key: &quot;supp_id&quot;&gt; end&gt; 4.2.2.6 :inverse_of :inverse_of 选项指定 has_one 关联另一端的 belongs_to 关联名。不能和 :through 或 :as 选项一起使用。 123456789&gt;&gt; class Supplier &lt; ApplicationRecord&gt; has_one :account, inverse_of: :supplier&gt; end&gt; &gt; class Account &lt; ApplicationRecord&gt; belongs_to :supplier, inverse_of: :account&gt; end&gt; 4.2.2.7 :primary_key 按照约定，用来存储该模型主键的字段名 id。:primary_key 选项用于设置要使用的主键名。 4.2.2.8 :source :source 选项指定 has_one :through 关联的源关联名称。 4.2.2.9 :source_type :source_type 选项指定通过多态关联处理 has_one :through 关联的源关联类型。 4.2.2.10 :through :through 选项指定用于执行查询的联结模型。前文详细介绍过 has_one :through 关联。 4.2.2.11 :validate 如果把 :validate 选项设为 true，保存对象时，会同时验证关联的对象。该选项的默认值是 false，即保存对象时不验证关联的对象。 4.2.3 has_one 的作用域 在作用域代码块中可以使用任何一个标准的查询方法。下面介绍其中几个：——同4.1的belongs_to 1234whereincludesreadonlyselect 4.2.3.1 where4.2.3.2 includes4.2.3.3 readonly4.2.3.4 select4.2.4 检查关联的对象是否存在 检查关联的对象是否存在，可以使用 association.nil? 方法： 1234if @supplier.account.nil? @msg = &quot;No account found for this supplier&quot;end 4.2.5 什么时候保存对象 把对象赋值给 has_one 关联时，那个对象会自动保存（因为要更新外键）。而且所有被替换的对象也会自动保存，因为外键也变了 如果父对象（has_one 关联声明所在的模型）没保存（new_record? 方法返回 true），那么子对象也不会保存。只有保存了父对象，才会保存子对象。 4.3 has_many 关联详解 has_many 关联建立两个模型之间的一对多关系。用数据库术语来说，这种关联的意思是外键在另一个类中，指向这个类的实例。 4.3.1 has_many 关联添加的方法 声明 has_many 关联后，声明所在的类自动获得了 16 个关联相关的方法： 12345678910111213141516collectioncollection&lt;&lt;(object, &amp;#8230;&amp;#8203;)collection.delete(object, &amp;#8230;&amp;#8203;)collection.destroy(object, &amp;#8230;&amp;#8203;)collection=(objects)collection_singular_idscollection_singular_ids=(ids)collection.clearcollection.empty?collection.sizecollection.find(&amp;#8230;&amp;#8203;)collection.where(&amp;#8230;&amp;#8203;)collection.exists?(&amp;#8230;&amp;#8203;)collection.build(attributes = &#123;&#125;, &amp;#8230;&amp;#8203;)collection.create(attributes = &#123;&#125;)collection.create!(attributes = &#123;&#125;) 这些个方法中的 collection 要替换成传给 has_many 方法的第一个参数。collection_singular 要替换成第一个参数的单数形式。对如下的声明来说： 1234class Author &lt; ApplicationRecord has_many :booksend 123456789101112131415161718每个 Author 模型实例都获得了这些方法：booksbooks&lt;&lt;(object, ...)books.delete(object, ...)books.destroy(object, ...)books=(objects)book_idsbook_ids=(ids)books.clearbooks.empty?books.sizebooks.find(...)books.where(...)books.exists?(...)books.build(attributes = &#123;&#125;, ...)books.create(attributes = &#123;&#125;)books.create!(attributes = &#123;&#125;) 4.3.1.1 collection4.3.1.2 collection&lt;&lt;(object, &amp;#8230;&amp;#8203;)4.3.1.3 collection.delete(object, &amp;#8230;&amp;#8203;)4.3.1.4 collection.destroy(object, &amp;#8230;&amp;#8203;)4.3.1.5 collection=(objects)4.3.1.6 collection_singular_ids4.3.1.7 collection_singular_ids=(ids)4.3.1.8 collection.clear4.3.1.9 collection.empty?4.3.1.10 collection.size4.3.1.11 collection.find(&amp;#8230;&amp;#8203;)4.3.2 collection.where(&amp;#8230;&amp;#8203;)4.3.2.1 collection.exists?(&amp;#8230;&amp;#8203;)4.3.2.2 collection.build(attributes = {}, &amp;#8230;&amp;#8203;)4.3.2.3 collection.create(attributes = {})4.3.3 collection.create!(attributes = {})4.3.4 has_many 方法的选项 有时还是需要定制 has_many 关联的行为。定制的方法很简单，声明关联时传入选项即可。 123456789101112:as:autosave:class_name:counter_cache:dependent:foreign_key:inverse_of:primary_key:source:source_type:through:validate 4.3.4.1 :as4.3.4.2 :autosave4.3.4.3 :class_name4.3.4.4 :counter_cache4.3.4.5 :dependent4.3.4.6 :foreign_key4.3.4.7 :inverse_of4.3.4.8 :primary_key4.3.4.9 :source4.3.4.10 :source_type4.3.4.11 :through4.3.4.12 :validate4.3.5 has_many 的作用域 在作用域代码块中可以使用任何一个标准的查询方法。下面介绍其中几个： 12345678910whereextendinggroupincludeslimitoffsetorderreadonlyselectdistinct 4.3.5.1 where4.3.5.2 extending4.3.5.3 group4.3.5.4 includes4.3.5.5 limit4.3.5.6 offset4.3.5.7 order4.3.5.8 readonly4.3.5.9 select4.3.5.10 distinct4.3.6 什么时候保存对象 把对象赋值给 has_many 关联时，会自动保存对象（因为要更新外键）。如果一次赋值多个对象，所有对象都会自动保存。 4.4 has_and_belongs_to_many 关联详解 has_and_belongs_to_many 关联建立两个模型之间的多对多关系。用数据库术语来说，这种关联的意思是有个联结表包含指向这两个类的外键。 4.4.1 has_and_belongs_to_many 关联添加的方法 声明 has_and_belongs_to_many 关联后，声明所在的类自动获得了 16 个关联相关的方法： 12345678910111213141516collectioncollection&lt;&lt;(object, &amp;#8230;&amp;#8203;)collection.delete(object, &amp;#8230;&amp;#8203;)collection.destroy(object, &amp;#8230;&amp;#8203;)collection=(objects)collection_singular_idscollection_singular_ids=(ids)collection.clearcollection.empty?collection.sizecollection.find(&amp;#8230;&amp;#8203;)collection.where(&amp;#8230;&amp;#8203;)collection.exists?(&amp;#8230;&amp;#8203;)collection.build(attributes = &#123;&#125;)collection.create(attributes = &#123;&#125;)collection.create!(attributes = &#123;&#125;) 4.4.1.1 额外的列方法 如果在多对多关联中需要使用这么复杂的数据表，应该用 has_many :through 关联代替 has_and_belongs_to_many 关联。 4.4.1.2 collection 4.4.1.3 collection&lt;&lt;(object, &amp;#8230;&amp;#8203;) 4.4.1.4 collection.delete(object, &amp;#8230;&amp;#8203;) 4.4.1.5 collection.destroy(object, &amp;#8230;&amp;#8203;) 4.4.1.6 collection=(objects) 4.4.1.7 collection_singular_ids 4.4.1.8 collection_singular_ids=(ids) 4.4.1.9 collection.clear 4.4.1.10 collection.empty? 4.4.1.11 collection.size 4.4.1.12 collection.find(&amp;#8230;&amp;#8203;) 4.4.1.13 collection.where(&amp;#8230;&amp;#8203;) 4.4.1.14 collection.exists?(&amp;#8230;&amp;#8203;) 4.4.1.15 collection.build(attributes = {}) 4.4.1.16 collection.create(attributes = {}) 4.4.1.17 collection.create!(attributes = {}) 4.4.2 has_and_belongs_to_many 方法的选项 has_and_belongs_to_many 关联支持以下选项： 123456:association_foreign_key:autosave:class_name:foreign_key:join_table:validate 4.4.2.1 :association_foreign_key 4.4.2.2 :autosave 4.4.2.3 :class_name 4.4.2.4 :foreign_key 4.4.2.5 :join_table 4.4.2.6 :validate 4.4.3 has_and_belongs_to_many 的作用域 在作用域代码块中可以使用任何一个标准的查询方法。 12345678910whereextendinggroupincludeslimitoffsetorderreadonlyselectdistinct 4.4.3.1 where 4.4.3.2 extending 4.4.3.3 group 4.4.3.4 includes 4.4.3.5 limit 4.4.3.6 offset 4.4.3.7 order 4.4.3.8 readonly 4.4.3.9 select 4.4.3.10 distinct 4.4.4 什么时候保存对象 把对象赋值给 has_and_belongs_to_many 关联时，会自动保存对象（因为要更新外键）。如果一次赋值多个对象，所有对象都会自动保存。 4.5 关联回调 关联回调和普通回调差不多，只不过由集合生命周期中的事件触发。关联回调有四种： 1234before_addafter_addbefore_removeafter_remove 关联回调在声明关联时定义。同一事件可以触发多个回调，多个回调使用数组指定： 12345678910111213class Author &lt; ApplicationRecord has_many :books, before_add: [:check_credit_limit, :calculate_shipping_charges] def check_credit_limit(book) ... end def calculate_shipping_charges(book) ... endend 如果 before_add 回调抛出异常，不会把对象添加到集合中。类似地，如果 before_remove 抛出异常，对象不会从集合中删除。 4.6 关联扩展 Rails 基于关联代理对象自动创建的功能是死的，可以通过匿名模块、新的查找方法、创建对象的方法等进行扩展。例如： 12345678class Author &lt; ApplicationRecord has_many :books do def find_by_book_prefix(book_number) find_by(category_id: book_number[0..2]) end endend 如果扩展要在多个关联中使用，可以将其写入具名扩展模块。例如： 1234567891011121314module FindRecentExtension def find_recent where(&quot;created_at &gt; ?&quot;, 5.days.ago) endend class Author &lt; ApplicationRecord has_many :books, -&gt; &#123; extending FindRecentExtension &#125;end class Supplier &lt; ApplicationRecord has_many :deliveries, -&gt; &#123; extending FindRecentExtension &#125;end 在扩展中可以使用如下 proxy_association 方法的三个属性获取关联代理的内部信息： 123proxy_association.owner：返回关联所属的对象；proxy_association.reflection：返回描述关联的反射对象；proxy_association.target：返回 belongs_to 或 has_one 关联的关联对象，或者 has_many 或 has_and_belongs_to_many 关联的关联对象集合； 5 单表继承 有时可能想在不同的模型中共用相同的字段和行为。 假如有 Car、Motorcycle 和 Bicycle 三个模型，我们想在它们中共用 color 和 price 字段，但是各自的具体行为不同，而且使用不同的控制器。 在 Rails 中实现这一需求非常简单。首先，生成基模型 Vehicle： 1$ rails generate model vehicle type:string color:string price:decimal&#123;10.2&#125; 对这个例子来说，“type”字段的值可能是“Car”、“Motorcycle”或“Bicycle”。如果表中没有“type”字段，单表继承无法工作。 然后，生成三个模型，都继承自 Vehicle。为此，可以使用 parent=PARENT 选项。这样，生成的模型继承指定的父模型，而且不生成对应的迁移（因为表已经存在）。例如，生成 Car 模型的命令是： 1$ rails generate model car --parent=Vehicle 生成的模型如下： 12class Car &lt; Vehicleend 这意味着，添加到 Vehicle 中的所有行为在 Car 中都可用，例如关联、公开方法，等等。 创建一辆汽车，相应的记录保存在 vehicles 表中，而且 type 字段的值是“Car”：对应的 SQL 如下： 1Car.create(color: &apos;Red&apos;, price: 10000) 1INSERT INTO &quot;vehicles&quot; (&quot;type&quot;, &quot;color&quot;, &quot;price&quot;) VALUES (&apos;Car&apos;, &apos;Red&apos;, 10000) 查询汽车记录时只会搜索此类车辆：对应的 SQL 如下： 1Car.all 1SELECT &quot;vehicles&quot;.* FROM &quot;vehicles&quot; WHERE &quot;vehicles&quot;.&quot;type&quot; IN (&apos;Car&apos;)","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-编程语言第一集","slug":"1 ror-system系统/ror-system-编程语言第一集","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/d7c2c06c/","link":"","permalink":"http://yoursite.com/posts/d7c2c06c/","excerpt":"","text":"程序是如何运作的？1、前言 程序在计算机中是如何执行的? Ruby 编程语言和其他程式语言有什么不同? 计算机的架构是什么？内存是干嘛的？ 操作系统是干嘛的? 各种数据型态的差异 为什么有乱码? 什么是 Unicode 万国码? 什么是正规表示法 Regular Expression，这可以干嘛？ 什么是算法、数据结构？ 如何用 BigO 评估算法效能，了解不同数据结构的效能差异 2、什么是编程语言2.1、高级语言 低级语言指的是机器语言和汇编语言，一步一步指示电脑微处理器如何动作，是最原始的编程语言。低级语言不是说比高级语言差，而是指抽象化的程度比较低，与电脑硬件的指令直接对应的意思。 机器语言会指示 CPU 进行什么操作：首先将指令和数据从内存搬进 CPU 的寄存器，接着 CPU 进行计算，然后将结果从CPU 寄存器搬回内存，代码长得像这样： 123000000 00001 00010 00110 00000 100000100011 00011 01000 00000 00001 000100000010 00000 00000 00000 10000 000000 汇编语言，基本上就是对应机器语言，只是给予符号意义，长得像这样： 123456MOV eax, 1ADD eax, 4SUB eax, 2MOV num, eaxINVOKE printf, ADDR formatStr, numret 0 低级语言写起来很费事，但电脑跑起来飞快。注意，不同 CPU 的机器码(又叫做 native code)是不一样的。因此 Intel x86 和 ARM CPU 的代码、32位元和64位元的程序是不通用的。 2.2、高级语言 在 C 语言中，使用变量需要先宣告数据型态，例如这里是 int 表示整数。它会预先跟内存要固定的空间(int 会要 4 bytes)。在 C 语言中，要使用变量都必须跟内存先讲要多少空间。 电脑可以执行机器码，但是无法直接消化高级语言，这些高级语言的源代码都必须经过一个编译(compile)的过程，转换成二进制机器语言，也就是可执行的档案。 目前绝大部分编程语言的编译器，都是用 C 语言写的，例如 Ruby 也是用 C 语言写的。 3、什么是操作系统 不同的操作系统，会提供不同的 API 让编程语言可以调用硬件资源。 4、内存管理4.1、内存 了解内存是编程非常重要的概念，因为如果你把内存用光了，操作系统就得去把硬盘模拟成内存使用，但是由于硬盘的速度跟内存差太多了，整台电脑的效能会急剧下滑，就会呈现当机的状态。一台电脑的内存是有限的，你的 MacBook 可能只有 4G 或 8G，租一台服务器，最重要的也是先看有多少内存空间可以使用。内存越多，可以同时执行的程序就越多。 C 语言中需要手动管理内存。在硬件资源有限或需要效能至上的软件中，手动管理内存有其必要，但是缺点就是降低了开发效率，开发者必须注意好内存管理，用的时候要先宣告，不用的时候要释放回操作系统。 4.2、java语言 第二重要的可能就是 Java 语言了Java 有许多重大的发明，其中面向对象我们下一个教程会教的重点，另外就是内部 Virtual Machine(VM)跨平台设计，以及和垃圾回收 Garbage Collection (GC)) 了，我们先谈谈 GC。 GC 是编程语言的一种内部功能，作用是自动把再没有用到的变量，把内存释出回操作系统。 ​ 5、编译型语言和解释型语言 编译型语言包括：C 语言、C++、Java 语言等等，这种语言要求一定要先把全部代码编译变成机器码(native code)，也就是可执行的档案。软件散布和分享的时候，是拿最后的执行档。在这类语言中，使用变量必须事先宣告类型，例如这个变量一开始宣告是 int，那就一定只能是 int，不能换成存字符串。 编译型语言每次修改代码，都必须重新把程序编译好，如果程序任一行有错，就无法编译。但是因为都先编译好了，所以执行的速度比较快，而且执行档很小。刚刚的 C 语言范例，编译后只有8K的大小。 ​ 解释型语言包括: Ruby、Python、JavaScript、PHP 等等，这种语言不需要先编译，而是透过一种叫做解释器(interpreter)的软件，逐行编译然后直接执行。软件散布和分享的时候，是拿源代码。在这类语言中，使用变量不需要事先宣告类型，一开始存整数，后来换成存字符串也可以。 解释型语言不需要先编译，修改起来比较方便，写代码也快一些，但是任何错误都要等到真正执行之后，才会知道。因为要等到执行时才编译，所以执行的速度较慢。一个只有一行的 Ruby 代码程序，如果要再另一台电脑跑起来，那台电脑也必须把 Ruby 解释器安装起来，而且跑起来至少需要 5MB 的内存，即使只是输出一行 Hello World。 「机器语言 -&gt; 组合语言 -&gt; C 语言 -&gt; Java 语言 -&gt; 动态语言」越往右边执行效能较差，但开发起来效率比较好。 另一方面由于硬件效能的增强，人力开发成本比起软件的执行期的效能，也越来越重要。在硬件资源有限的行动装置及嵌入式系统上，仍是静态语言的天下。 6、各种编程语言介绍6.1、编程语言种类 C 语言: 开发系统程式 (System Programming)、操作系统、编译器等等工具必备语言。经过编译可以移植到不同硬件上。 C++ 语言: 多了一大堆功能和面向对象的超级复杂版 C 语言，大型软件如 Google Chrome, Qt, WebKit, V8, HHVM 或是效能要求高的游戏等等，用 C++ 比较多。但是 C++ 由于语法太多太复杂，被认为是最不好上手的语言之一。Linux 和 Git 的发明人 Linus，就坚决反对 C++。 Java 语言: 提供跨平台 VM、面向对象，使用 GC 内存垃圾自动回收，由于发展已久，效能也非常好，后端很多企业软件和中间件使用，在超大型网站中也十分常见，例如阿里巴巴、Twitter、Linkedin 服务端。前端方面要 Android 软件也是用 Java 语言。 Scala 语言、Clojure 语言、JRuby 语言等等：这些语言都建构上 JVM 上，透过编译变成 Java 字节码，就可以在不同平台上执行。这些语言用自己偏好的语法设计，然后搭上 Java VM 发展成熟的便车，可以调用 Java 的库。 C# 语言: 微软的官方语言，当年是仿 Java 所推出的编程语言。它的 .NET framework 等同于 JVM 的设计。在 .NET 上还有其他微软的编程语言 VB.NET, ASP.NET, F# 等等 Objective-C 和 Swift，苹果专用的编程语言，撰写 MacOS 和 iOS 应用必备 PHP 语言，当年发明的时候叫做 Personal Home Page，所以叫做 PHP。PHP 的初衷是作为 HTML 样板(就像是 Rails 里面的 html.erb)，主攻 Web 应用。因为容易上手使用，在 2000 年初搭配 MySQL 数据库非常流行。 Python 语言: 也是动态语言的一种，和 Ruby 时常拿来对比。近年来在数据分析和机器学习领域用得很多。 JavaScript 语言: 托浏览器的福，成为全世界最风行的语言。后端可以用 Node.js 单独将 JavaScript 跑在服务器上，而不需要依赖浏览器的环境。 R 语言: 用于数据分析领域，学术领域用的很多。但不会拿来做软件应用。 6.2、应用案例 Java: Google, Oracle Swift, Objective-C: Apple C#: Microsoft, stack overflow PHP: wikipedia, vimeo, facebook Ruby: airbnb, shopify, github, twitter, groupon, basecamp, hulu+ Python: youtube, quora, google, instagram, pinterest Java 当年的一个理念是跨平台(Windows、Mac、Linux 等) Ruby 其实也是跨平台。不过很多 Ruby 库是用 C 语言写的，因此不一定能在不同平台上顺利编译成功，因为这些 C 代码可能有依赖操作系统的。 Web 应用，浏览器才是真正跨平台的软件。 开发系统程式(例如操作系统、编译器)，适合 C 语言 开发 Web 后端应用，适合 PHP/Ruby/Python/Node.js 开发 Web 前端应用，得用 JavaScript 开发 Android 应用，得用 Java 开发 iOS 应用，得用 Swift 或 Objective-C 6.3、编程语言和编程语言的实作（即编译器） 最后，「编程语言」和「编程语言的实作」是不一样的概念，前者是指语法的规格定义，后者是指编译器(或解释器)。同一门编程语言，但是有不同家的编译器(或解释器)是常见的事情，例如： JavaScript 的语法标准叫做 ECMAScript，但是 JavaScript 的实作有很多，包括 Chrome 浏览器用的 V8 引擎)、Safari 用 WebKit、Firefox 用 SpiderMonkey。虽然都叫 JavaScript 语言，但是真正跑在不同浏览器时，实际上是不同的解释器，还是有差异的。 Ruby 有 CRuby(又叫做 MRI，大家目前安装的就是 MRI 版本)、JRuby、Rubunius、 RubyMotion 等等 PHP 有 Zend Engine (这是官方版) 和 HipHop (这是 Facebook 针对 PHP 重写过的 PHP 解释器，以改进效能) Objective-C 和 Swift 当然就谨此 Apple 一家出编译器 .NET 有微软官方版和 Mono Java 有 HotSpot (这是 Oracle 的官方版本) 和 OpenJDK (这是开源版本，在 Linux 安装的话会装到这个版本) 编程语言的设计7、数据类型 Data Type: 基本数据类型 基本数据类型包括 String 字符串、Integer 整数、Float 浮点数、Boolean 布林、nil 空值等。 各个国家自定义了各自语言的字符集，例如： 123GB 2312 信息交换用汉字编码字符集，收录了6763个简体汉字Big5 大五码，收录了13,060个繁体汉字，在台湾、香港与澳门使用Shift JIS 日文 乱码是因为使用字符集去显示。 Unicode 万国码，这个计划定义了全世界所有语言的编码。在这个计划下，定义了几个字符集标准： 123UTF-32 用 4 bytes 来存一个字符UTF-16 用 2 或 4 bytes，汉字会是 4 bytesUTF-8 用不定长度 1~4 bytes，一个英文字母用 1 byte 存储，一个汉字会用 3 bytes 存储 其中 UTF-32 很少使用，因为太浪费空间了。本来一个英文字母用 1 byte 就可以存，改成用 4 bytes 后，前面三个 bytes 都是 0，耗费的空间变成四倍。 蛮多编程语言内部是用 UTF-16 时做字符串的，例如 Java 和 Python。 至于 UTF-8 则是目前最为通行的标准，既能表示所有语言，空间上又比较节省。比如ruby。 Symbol 是 Ruby 语言特有的类型，作用跟字符串很像，但是是唯一且不会变动的识别名称，用冒号 : 开头，例如 :this_is_a_symbol Float符点数有个最大的缺点就是输入与储存的值不一定精确、计算后的结果可能会有微小误差(因为无法刚好用 2 的指数来表示，只能逼近) 120.1 + 0.2 # 得到 0.300000000000000040.1 + 0.2 == 0.3 # 得到 false 在 JavaScript 语言中，所有数值都是浮点数。 Decimal 十进制数 123# 总共六位数，小位数三位t.decimal &quot;currency_rate&quot;, precision: 6, scale: 3 8、组合数据类型 (Reference Data Types) 组合数据类型，包括 Array、Hash 和程序员自订的复合资料类型(也就是 Class)，这种类型的数据是一种容器，里面可以放上述的基本数据类型，或是组合其他的组合数据类型。 Array，每个数组元素，在内存里面的大小是固定的。透过索引，我们可以很快就计算出该元素在内存中的位置。 1|1|2|3|4|5|6|7|8| 例如假设每个元素占 4 bytes，arr[0] 在内存位置 100，那 arr[3] 就是 100 + 4*3 在位置 112 了。 Hash，一种 Key-Value 的容器，通常用 Symbol 或字符串当作索引，要了解散列 Hash 的原理，需要先知道什么是散列函数。 1|aa|ab|ac|ad|.....|zx|zy|zz| 假设初始位置是 100，如果给一个 key 算出来的散列值是 ad，那我们就把值放在 100 + 4*3 在位置 112。这样设计的好处是，随便给一个 key，都可以马上算出它在内存中的位置，非常有效率。 为什么编程语言会这样设计呢？这是因为组合数据类型是个容器，这个容器可能存有非常多的数据，复制的成本是很高的。因此在默认的情况下，我们不会真的去复制它的值，而是复制引用而已。 就地编辑(in-place editing)，做排序。 1234a = [5,1,9]b = a.sortb 会是排序好的 [1,5,9]，但是 a 是没有变的，还是 [5,1,9] 1234a = [5,1,9]a.sort!这个 a 直接被修改了，变成 [1,5,9] 对 Ruby 来说，这个 ! 只是名字的一部分，没有特别的作用。只是一个惯例提醒你说这个方法会有 副作用(side-effect)。 比执行速度的话，「In-place」做修改(mutate) 是比「回传新的副本」还快，因为后者需要新的内存空间来存储。不过，实际写代码时，我们一般会偏好「回传新的副本」的方式，因为这样比较不容易有 bug。 ！！！！99问题：xx（params）参数里，值params，参数是基本类型还是引用类型？？ 组合数据类别的 = 指派只会复制引用，如果需要真的复制值，会改用 clone 方法，改了 a[0]，就不会影响到 b 了。 12345a = [1,2,3]b = a.clonea[0] = 999ab 9、作用域 Variable Scope 变量作用域 Variable Scope 指的是变量可以被存取到的范围，一般分成本地变量(Local variable)和全局变量(Global variable) 123456789def foo x = 1endx = 2foo()x # 仍然是 2 这段简单的程序中，宣告在方法里面的局部变量 x，只可以在该方法内存取的到，对外面来说是没有影响的。对 Ruby 来说，一个局部变量的 scope 就是在该方法内。 至于全局变量则是不管在程式哪里，都可以存取的到。在 Ruby 之中会用 开头，例如 1234567891011121314151617181920212223242526272829303132* Ruby 还有对象变量(Instance variable) Scope 和类变量(Class variable) scope。## 10、正则表达式 Regular Expression* [正则表达式 Regular Expression](https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F)是一种精巧比对字串的方式。例如``` /\\A[a-z0-9\\-]+\\z/ ```，检查字符串必须是小写a到z，或数字0到9，或是横线`-`。 * `.` 符合任何单一字符 * `\\w` 单字字符 * `\\d` 数字字符 * `\\s` 任何空白 * `\\S` 非空白 * `^` 行首位置 * `*` 出现 0 次以上 * `+` 出现 1 次以上 * `?` 出现 0 或 1 次 * `&#123;m,n&#125;` 出现 m 次到 n 次 * `[a-z]` a 到 z 范围内的任何单一字符 * `[^a-z]` 非 a-z 之外的任何单一字符！！！！！！99看完还是不懂``` /\\A[a-z0-9\\-]+\\z/ ```每个字符的意思？？？？# 算法和数据结构## 11、什么是算法?* 结构化程式设计 (Structured programming) ，它采用函式、程式码区块、for循环以及while循环等结构，来取代传统的 [goto](https://zh.wikipedia.org/wiki/Goto)语法。* 程式从可以随便跳来跳去的 goto 写法，变成限制成三种流程控制：循序(prodecure)、分歧(if-else)、反复(while loop)。 例如，这是一个给数组求最大值的算法，先假设第一个元素最大，然后依序走访数组每一个元素，检查哪一个比较对就指派给 max 变量。最后跑完剩下来的 max 就是最大值。 def find_max(arr) max = arr[0] arr.each do |a| if a &gt; max max = a end end return maxend 123456789101112## 12、如何评估算法* 用一种叫做 Big-O 的符号来描述算法的复杂度，复杂度可以分成时间复杂度和空间复杂度。前者计算这个算法要花多少步骤，后者则是耗费多少内存空间。通常我们比较关心前者。 ![](https://ws4.sinaimg.cn/large/006tNc79gy1flijft886ij30pp0isabu.jpg)* 在编程基础练习中，有一题是在数组中找到最大(或最小)的数字，例如 `arr = [5,1,9,4]`，以下两种算法都可以得到答案：def find_max(arr) max = arr[0] arr.each do |a| if a &gt; max max = a end end return maxend * 第二种看起来比较简单，但是现在你可以判断第一种方法是 O(n)，第二种确是 O(nlogn) 了，前者比较好。 def find_max(arr) max = arr[0] arr.each do |a| if a &gt; max max = a end end return maxend 12 def find_max(arr) arr.sort.lastend 12345678910111213141516171819202122## 13、什么是数据结构?* 数据结构定义资料之间的相互关系，是设计算法的载体，数据输入输出和设计算法步骤时，都会对应于使用的数据结构。 * 对 Ruby 程序员来说，最常用的就是 Array 和 Hash。* 插入和删除到容器里面 * 如果刚好在最后(例如 Arrar#push 方法)，是 O(1) * 如果在数组中间插入一个值，因为数组是内存中「连续」的空间，中间新插入，会需要搬动后面所有元素的位置往后移动一格，这是 O(n) 的算法 * 对散列 Hash 来说，插入是平均复杂度是 O(1)* 检查一个值都没有在容器里面 * Array 是 O(n)，需要走访整个数组依序检查 * Hash 是 O(1)，只要将 key 经过散列算法，就可以直接检查那个位置有没有数据。 ​ user system total real 0.000000 0.000000 0.000000 ( 0.005854) # 数组一 0.060000 0.010000 0.070000 ( 0.064084) # 十倍大的数组二：时间约成长 10 倍 0.000000 0.000000 0.000000 ( 0.000005) # 散列一: 0.000000 0.000000 0.000000 ( 0.000005) # 十倍大的散列二: 时间一样 ​``` 数据库打索引的原理也是一样的，没有打索引就是 O(n)，有打索引是 O(logn)。 14、算法的极限 有没有不能计算的问题？ 例如停机问题：你没办法写一个软件，去判断另一个软件会不会当机。 Big-O 是 O(2^N)，要求最佳解是不切实际的，只能用最佳化逼近解。 已知最佳解就是 O(2^N) 的算法问题，就叫做 NP 类型)的算法问题，例如河内塔步骤：假设有 N 个的环，那么最佳解的移动步骤是 2^N - 1 西洋棋必胜策略也是 NP 类型 已知有指数时间解，但是不确定有没有更好的多项式时间解，这就作 NP-Complete 类型的问题。例如 旅行推销员问题是 O(n!) n阶层时间。 15、推荐书籍这门教程的知识点非常多，包括了计算机大学本科 1. 数据结构 2. 算法 3. 操作系统 4. 编译器 5. 编程语言，大一到大三共五门必修课程的主要概念。我推荐以下的书籍可以继续进修： 改变未来的九大算法 介绍九个影响世界的重要的算法，没有代码，是科普书 一路编程，入门程度的概括性介绍软件编程 代码之随 介绍编程语言的设计 程序是怎样跑起来的 计算机是怎样跑起来的 大话数据结构 算法图解 放心，这些都不是大部头的教科书 16、关于算法和找工作面试有些公司很爱考算法题目，特别是大型公司，例如 Google、Microsof、Facebook、BAT 等大企业。因为他们偏好学历好计算机本科系刚毕业，聪明、底子好的学生，不看重作品集，招聘后再内训。 如果你对这类型公司有偏好，你需要熟悉各种数据结构的操作算法，例如 Stack、Queue、Linked List、Tree、Graph 等等。 基本的解题策略是：先很快的用暴力解(Brute-force)，先别担心算法效率。然后再最佳化，找出哪些步骤是多余重复的计算。通常考官都会逐步提示你完成最佳化。 你需要花时间练习熟悉题型：例如 http://www.coderbyte.com/ https://leetcode.com/ Cracking the Coding Interview 就算是大神，碰到这种公司不先刷题也是被拒的。 https://twitter.com/mxcl/status/608682016205344768 http://osherove.com/blog/2011/4/5/my-google-rejection-letter.html","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"tool-vps-部署-linux云服务器部署运维","slug":"6 tool-xx工具/tool-vps-部署-linux云服务器部署运维","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T06:50:37.000Z","comments":true,"path":"posts/d646e837/","link":"","permalink":"http://yoursite.com/posts/d646e837/","excerpt":"","text":"一、前半部分介绍云服务器类型IaaS、PaaS、SaaS，和常用linux指令二、后半部分以IaaS的阿里云或linode为例，示范ruby on rails在vps上的安装、部署、运维、第三方服务、域名设定1、云服务类型和厂商 IaaS：基础设施服务，Infrastructure-as-a-Service（相当于是买的房子，可以任意拆掉东西装修） vps虚拟机，如vultr、linode 云计算平台，亚马逊、微软、谷歌、阿里云、腾讯云 PaaS：平台服务，Platform-as-a-Service（相当于是租的房子，只能把东西做好摆进去） 虚拟主机，如heroku、openshift 价格比IaaS贵，大多只有美国机房，有能力运维linux服务器的都很少选用 SaaS：软件服务，Software-as-a-Service（只能执行特定软件） 如github、金数据、tower、office365 2、租用云服务器（vultr、阿里云） Linux 时，通常是讲 Linux Kernel (内核)。给一般用户安装的又分为不同的发行版本(Linux distribution)，例如 Ubuntu、Linux Mint、Debian、CentOS、Redhat 等 3、CLI命令 CLI，指用文字输入的方式来操作电脑。——高效、占用资源少 Mac 和 Linux 都是 UNIX-like 操作系统。爱用 Mac 的原因，因为接近 Linux 服务器的环境 Shell 是指和电脑沟通的指令 Terminal 是指 CLI 输入输出的介面程序 Console 指某特定的指令语言环境 GLI，指用图形用户界面输入的方式来操作电脑 4、常用命令 / 根目录 ~ 家目录 cd pwd ls mkdir touch cp mv 移动档案，或重命名 rm 删除档案 rm -r 删除整个目录及以下的档案 sudo apt-get update CLI中内建的是nano、或vi（vi和vim功能更强但较难上手），而atom是GUI gzip 压缩档案 gzip -d 解压缩档案 tar zcvf xxx.tar.gz xxx 将 xxx 目录打包并压缩成 xxx.tar.gz 档案 tar zxcf xxx.tar.gz。将 xxx.tar.gz 解压缩 5、权限管理su 指令可以切换身份，例如切换成 root 帐号，但是每次都要输入； sudo权限，可以暂时提升权限。 6、安装Linux、ruby on rails所需套件、ruby、MySQL或PostgreSQL、 Nginx + Passenger 网站服务器 在本机开发的时候，我们使用 puma 这一套由 Ruby 写的网站服务器，无论是静态档案(图片/CSS/JS)或是会进到 Rails 处理的动态网页，一律都是由 puma 来处理。 Nginx 是目前最流行的网站服务器(用C语言开发的)，可以非常高效能地提供静态档案，效能是纯 Ruby 网站服务器的数十倍以上。因此像图档/CSS/JS等等静态资源，都会由 Nginx 处理 passenger是支持ruby的web服务器。Rails 动态网页的部分，我们会安装 Passenger 这个 Nginx 的扩充模组来执行 Ruby 程序。 7、新增deploy账号 root账号权限太大，新增deploy账号，用来放Rails代码。 8、安装Capistrano Capistrano 是 Rails 社区中最常使用的布署工具 ap production deploy，这个指令会登入远端服务器，把 Github 上的代码抓下来，然后自动执行 bundle 安装套件、跑数据库 migration 和编译 assets 编译等等步骤： 要部署新代码上服务器，记得需要先 git push 到 Github 上，再执行 cap production deploy","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"部署","slug":"部署","permalink":"http://yoursite.com/tags/部署/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-system-数据库SQL","slug":"1 ror-system系统/ror-system-数据库SQL","date":"2017-12-13T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/19619b26/","link":"","permalink":"http://yoursite.com/posts/19619b26/","excerpt":"","text":"1.1、数据库 数据库，可以保存大量数据，还提供了方便的查询(Query)机制，以及提供 CRUD(Create, Read, Update, Delete) 操作。 关系型数据库，这种数据库包括开源的 SQLite、MySQL、PostgreSQL，以及需要付费的 Oracle、Microsoft SQL Server 等等。 SQLite 是一套轻量级的关系型数据库，也是 Rails 开发时默认的数据库。它的一个数据库就是一个档案。 MySQL 是目前最流行的开源数据库。可处理超级大量数据。 PostgreSQL 经常与 MySQL 相提并论，是 Heroku 默认的数据库。功能更多。 Oracle 和 MS SQL Server有更好的自调优功能。例如银行、保险业等会用。 2.1、关系型数据库的特性一: Schema Schema 纲要就是使用数据库存数据前，需要先定义 Tables(表) 和 Columns(字段)： 通常只会在数据库里面纪录档案的 metadata 例如档名、大小、MimeType 等等，而实际的档案则放在档案系统上，或是上传到七牛或AWS S3等空间。 2.2、关系型数据库的特性二: SQL 标准语法 关系型数据库都支援使用一种叫做 SQL (Structured Query Language) 的结构化查询语言。我们会用这种语法来操作数据库，例如： 123INSERT INTO events VALUES (&quot;RubyConf&quot;, 100);Event.create( :name =&gt; &quot;RubyConf&quot;, :capacity =&gt; 100) 2.3、关系型数据库的特性三: ACID 要达成这种跨 Tables 多个 SQL 操作必须同时完成(或失败)的需求，就必须用上 Transaction 事务。例如你和别人同时同一秒钟互相转帐，数据库会不会算错馀额？ 语法是用 BEGIN; 和 COMMIT; 把 SQL 句包裹在一起，要么一起成功、要么一起失败。例如： 123456BEGIN; INSERT INTO histories (user_id, amount) VALUES (1, -100); INSERT INTO histories (user_id, amount) VALUES (2, 100); UPDATE accounts SET balance=200 WHERE id=1; UPDATE accounts SET balance=300 WHERE id=2;COMMIT; 在 Rails 中，每个 model 的 save 其实都会用 Transaction 包起来，包括 model 里面的所有 callback 如果是跨 model 的话，你也可以用 ActiveRecord::Base.transaction 来包裹 Transaction 事务，例如： 12345ActiveRecord::Base.transaction do A.save B.save C.saveend ACID 其实就是在说明 Transactin 的能耐，以下取自 wikipedia: Atomicity 原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成。 Consistency 一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。 Isolation 隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力。 Durability 持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 3.1、关系型数据库使用 SQL 语言: DDL DDL(Data Definition Language)，就是告诉数据库如何去定义 Schema 纲要的SQL。 关系型数据库使用 SQL(Structured Query Language) 语言，每个 SQL 句子叫做 SQL Query 或 SQL Statement。 SQL 分成 DDL 和 DML 两种，都是用分号 ; 结尾。 3.2、建立、删除和更名数据库 PostgrSQL 可用 utf-8、MySQL 可用 utf8mb4 编码。 SQLite3的指令sqlite3 your_db_name.db。MySQL 指令是 mysql -u root -p。PostgreSQL 的指令是 psql &lt;database_name&gt;。 12新建CREATE TABLE events (name VARCHAR(50) NOT NULL, capacity INTEGER, date DATE); 1234修改改名 Table，例如 ALTER TABLE persons RENAME TO people;新增字串，例如 ALTER TABLE people ADD COLUMN status VARCHAR(50);修改和移除字段：SQLite3 没支援，需要开一个新 table 然后把资料复制过去 12删除DROP TABLE IF EXISTS people; 利用 Migration 来一致管理 Schema， Migration 代码也会放进版本控制系统 Git 里面。 3.3、关系型数据库使用SQL 语言: DML DML(Data Manipulation Language)就是操作数据的 SQL ，也就是做 CRUD 的操作。 新增资料：INSERT INTO xxxs (栏位1, 栏位2) VALUES (值1, 值2); 1234以下 SQL 会新增数据：INSERT INTO events (capacity, name) VALUES (200, &quot;JSConf&quot;);这个对应的 Rails 语法是 Event.create( :capacity =&gt; 200, :name =&gt; &quot;JSConf&quot;) 12插入多笔 INSERT INTO events (capacity, name) VALUES (300, &quot;COSCUP&quot;), (300, &quot;OSDC.TW&quot;); 查找资料：SELECT 栏位1, 栏位2 FROM xxxs; 12345捞全部 events 资料 SELECT * FROM events;对应的 Rails 语法是 Event.all 12345捞出指定的字段 SELECT name, capacity FROM events;对应的 Rails 语法是 Event.select(:name, :capacity).all 12345递增排序 SELECT name, capacity FROM events ORDER BY id; 或 SELECT name, capacity FROM events ORDER BY id ASC;递减排序 SELECT name, capacity FROM events ORDER BY id DESC;分页 SELECT name, capacity FROM events ORDER BY capacity DESC, name ASC LIMIT 20 OFFSET 20; 修改资料：UPDATE xxxs SET 栏位1=值1, 栏位2=值2 WHERE 栏位3=值3; 12345以下 SQL 会修改 events table 的所有数据把 capacity 改成 10UPDATE events SET capacity=10; 对应的 Rails 语法是 Event.update_all( :capacity =&gt; 10 ) 12345用 WHERE 可以指定只有修改 name 是 &quot;RubyConf&quot; 的数据UPDATE events SET capacity=100 WHERE name=&quot;RubyConf&quot;; 对应的 Rails 语法是 Event.where( :name =&gt; &quot;RubyConf&quot; ).update_all( :capacity =&gt; 100) 12345修改 capacity 和 nameUPDATE events SET capacity=100, name=&quot;RubyConf 2015&quot; WHERE name=&quot;RubyConf&quot;; 对应的 Rails 语法是 Event.where( :name =&gt; &quot;RubyConf&quot; ).update_all( :capacity =&gt; 100, :name =&gt; &quot;RubyConf 2015&quot; ) 1234567在 Rails 中，比较常见只修改一笔，例如：@event = Event.find(123)@event.update( :capacity =&gt; 200)对应的 SQL 会是SELECT * FROM events WHERE id = 123;UPDATE events SET capacity=200 WHERE id=123; ​ 删除数据数据","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-编程基础练习本-答案","slug":"1 ror-system系统/ror-system-编程基础练习本-答案","date":"2017-12-13T06:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/3ee41ba2/","link":"","permalink":"http://yoursite.com/posts/3ee41ba2/","excerpt":"","text":"01 12345678# 题目: 输入名字，输出 &quot;Hello, 名字&quot;print &quot;请输入你的名字，然后按 Enter: &quot;your_name = gets# ...puts &quot;Hello, #&#123;your_name&#125;&quot; 02 1234567891011121314# 题目: 交换 a, b 变数的值a = 100b = 2puts &quot;a 是 #&#123;a&#125;&quot;puts &quot;b 是 #&#123;b&#125;&quot;c = aa = bb = cputs &quot;a 应该是 2，现在是 #&#123;a&#125;&quot;puts &quot;b 应该是 1，现在是 #&#123;b&#125;&quot; 03 1234567891011# 题目: 使用者输入直角三角形的宽和高，输出三角形的面积print &quot;请输入直角三角形的高，然后按 Enter: &quot;a = getsprint &quot;请输入直角三角形的底边，然后按 Enter: &quot;b = getsc = a.to_f * b.to_f / 2puts &quot;直角三角形的面积是: #&#123;c&#125;&quot; 04 12345678910111213# 题目: 输入有多少片比萨饼和多少人，输出每人可以分到几片，以及剩下几片print &quot;请输入有多少片比萨饼，然后按 Enter: &quot;pizzas = getsprint &quot;请输入有多少人要吃，然后按 Enter: &quot;people = getsa = pizzas.to_i / people.to_ib = pizzas.to_i % people.to_iputs &quot;每人可分得几片: #&#123;a&#125; 片&quot;puts &quot;还剩下几片: #&#123;b&#125; 片&quot; 05 12345678910111213141516171819202122232425# 题目: 输入体重和身高，输出身体质量指数(BMI)和建议# BMI 公式为 bmi = ( 体重 / (身高x身高) )，单位是公斤和米# 如果 BMI &lt; 18.5，显示过轻# 如果 BMI &gt;= 24，显示过重# 如果 BMI 介于 18.5 ~ 24，显示正常print &quot;请输入您的体重(公斤)，然后按 Enter: &quot;weight = getsprint &quot;请输入您的身高(厘米)，然后按 Enter: &quot;height = getsbmi = weight.to_f / (height.to_f * height.to_f)if bmi &lt; 18.5 r = &quot;过轻&quot;elsif bmi &gt;= 24 r = &quot;过重&quot;else r = &quot;正常&quot;endputs &quot;您的 BMI 是: #&#123;bmi&#125;&quot;puts &quot;您的 BMI 结果是: #&#123;r&#125;&quot; 06 1234567891011121314151617181920212223# 题目: 输入一个数字 x，请判断是否正数、零或负数，以及是不是偶数print &quot;请输入一个整数，然后按 Enter: &quot;x = getsif x.to_f &gt; 0 a = &quot;正数&quot;elsif x.to_f &lt; 0 a = &quot;负数&quot;else a = &quot;零&quot;endif x.to_f % 2 == 0 b = &quot;偶数&quot;else b = &quot;奇数&quot;endputs &quot;这个数是#&#123;a&#125;&quot;puts &quot;这个数是#&#123;b&#125;&quot; 07 12345678910111213141516171819202122232425262728293031323334353637383940# 题目: 使用者输入 x,y,z，请根据以下的判断输出结果# 当 x &lt; 0 输出 &quot;A&quot;# 当 x &gt; 0，且# 当 y &gt; 0，且# 当 z &gt; 0 输出 &quot;B&quot;# 当 z &lt; 0 输出 &quot;C&quot;# 当 y &lt; 0# 当 z &gt; 0 输出 &quot;D&quot;# 当 z &lt; 0 输出 &quot;E&quot;print &quot;请输入一个整数x，然后按 Enter: &quot;x = getsprint &quot;请输入一个整数y，然后按 Enter: &quot;y = getsprint &quot;请输入一个整数z，然后按 Enter: &quot;z = getsx = x.to_iy = y.to_iz = z.to_iif x &lt; 0 a = &quot;A&quot;elsif x &gt; 0 &amp;&amp; y &gt; 0 if z &gt; 0 a = &quot;B&quot; else a = &quot;C&quot; endelsif x &gt; 0 &amp;&amp; y &lt; 0 if z &gt; 0 a = &quot;D&quot; else a = &quot;E&quot; endendputs &quot;结果是#&#123;a&#125;&quot; 08 12345678910111213141516171819202122232425# 题目: 使用者输入 x,y,z，请输出三个数中最大的数print &quot;请输入一个数字x，然后按 Enter: &quot;x = getsprint &quot;请输入一个数字y，然后按 Enter: &quot;y = getsprint &quot;请输入一个数字z，然后按 Enter: &quot;z = getsx = x.to_fy = y.to_fz = z.to_fif x &gt;= y &amp;&amp; x &gt;= z max = xelsif y &gt;= x &amp;&amp; y &gt;= z max = yelsif z &gt;= x &amp;&amp; z &gt;= y max = zendputs &quot;最大的数是 #&#123;max&#125;&quot; 09 123456789101112131415# 题目: 输入直角三角形的宽和高，输出三角形的面积def calculate_area(a, b) a.to_f * b.to_f / 2endprint &quot;请输入直角三角形的高，然后按 Enter: &quot;a = getsprint &quot;请输入直角三角形的底边，然后按 Enter: &quot;b = getsanswer = calculate_area(a,b)puts &quot;直角三角形的面积是: #&#123;answer&#125;&quot; 10 1234567891011121314151617181920212223242526# 题目: 使用者输入 x,y,z，请输出三个数中最大的数def find_max(x, y, z) if x &gt;= y &amp;&amp; x &gt;= z x elsif y &gt;= x &amp;&amp; y &gt;= z y elsif z &gt;= x &amp;&amp; z &gt;= y z endendprint &quot;请输入一个数字x，然后按 Enter: &quot;x = getsprint &quot;请输入一个数字y，然后按 Enter: &quot;y = getsprint &quot;请输入一个数字z，然后按 Enter: &quot;z = gets# ....answer = find_max(x,y,z)puts &quot;最大的数是 #&#123;answer&#125;&quot; 11 1234567891011# 题目: 列出 1 到 100 之间，所有 7 的倍数i = 1while ( i &lt;= 100 ) if i % 7 == 0 puts i end i+=1end 12 123456789101112131415# 题目: 求 1~100 所有偶数的和i = 1total = 0while ( i &lt;= 100 ) if i % 2 == 0 total += i end i+=1endputs total 13 123456789101112131415161718192021222324252627# 题目: 输入一个数字 N，输出 N * N 乘法表print &quot;请输入数字 N，然后按 Enter: &quot;n = gets.to_f【解法一】纵向：i = 1j = 1while (i &lt;= n) while (j &lt;= n) puts &quot;#&#123;i&#125; * #&#123;j&#125; = #&#123;i * j&#125;&quot; j += 1 end i += 1 j = iend# 【解法二】横向：# i = 1# while (i &lt;= n)# j = 1# while (j &lt;= i)# puts &quot;#&#123;i&#125; * #&#123;j&#125; = #&#123;(i * j)&#125;&quot;# j += 1# end# i += 1# end 14、真假值要用”return true”、”return false” 12345678910111213141516171819202122# 输入一个数字 N，请检查是不是质数def is_prime(n) i = 2 while (i &lt;= (n-1)) if n % i == 0 return false break end i += 1 end return trueendprint &quot;请输入数字 N，然后按 Enter: &quot;n = getsif is_prime(n.to_i) puts &quot;这是质数&quot;else puts &quot;这不是质数&quot;end 15、rand(100)用法、while(true)用法 123456789101112131415161718# 题目 猜数字游戏：程序会先产生随机数，然后用户开始猜数字。程序会针对猜的数字回答太高、太低或猜中，猜中后程序就会终止。target = rand(100)while (true) print &quot;请猜一个 0~99 的数字 N，然后按 Enter: &quot; n = gets.to_i if n == target puts &quot;恭喜猜中啦! &quot; break elsif n &gt; target puts &quot;太高了，再猜一次&quot; elsif n &lt; target puts &quot;太低了，再猜一次&quot; endend 16 12345678910111213141516171819202122# 给定一阵列内含数字，输出最大值【解法一】：def find_max(array) array.maxend# 【解法二】：# def find_max(array)# a = array[0]# array.each do |i|# if i &gt; a# a = i# end# end# return a# endarr = [8, 12, 36, 53, 9, 75, 3, 71, 59, 88]max = find_max(arr)puts &quot;Max is #&#123;max&#125;&quot; # 应该是 88 17 1234567891011121314151617181920212223242526272829303132# 使用者不断输入数字存进 Array，最后输出总和、平均、最大值、最小值arr = []while (true) print &quot;请输入数字，结束请直接按 Enter: &quot; user_input = gets if user_input == &quot;\\n&quot; break else arr &lt;&lt; user_input.to_i endendputs arr.to_sdef sum(arr) s = 0 arr.each do |i| s += i end return s.to_fenddef avg(arr) return sum(arr) /arr.sizeendputs &quot;总和是 #&#123;sum(arr)&#125;&quot;puts &quot;平均是 #&#123;avg(arr)&#125;&quot;puts &quot;最大值是 #&#123;arr.max&#125;&quot;puts &quot;最小值是 #&#123;arr.min&#125;&quot; 18 12345678910111213# 建构一个阵列有N个的元素，内容是 0, 1, 4, 9, 16, 25...... 每个元素是该索引的平方arr = []print &quot;请输入数字 N，然后按 Enter: &quot;n = gets.to_ij = 0while (j &lt; n) arr &lt;&lt; (j * j) j += 1endputs arr.to_s 19 123456789101112131415# 给定一阵列内含数字，输出另一个数组只包含偶数def filter_even(arr) x = [] arr.each do |f| if f % 2 == 0 x &lt;&lt; f end end return xendarr = [7, 68, 42, 46, 9, 91, 77, 46, 86, 1]puts filter_even(arr).to_s # 应该是 [68, 42, 46, 46, 86] 20 123456789101112131415161718# 承上题，请排序并去除重复的数字# Hint: 可用 arr.sort 排序，和 arr.uniq 去除重复def filter_even(arr) x = [] arr.each do |f| if f % 2 == 0 x &lt;&lt; f end end return x.uniq.sortendarr = [7, 68, 42, 46, 9, 91, 77, 46, 86, 1]puts filter_even(arr).to_sputs &quot;________&quot; # 应该是 [42, 46, 68, 86] 21 1234567891011121314151617181920212223242526272829# 给定一数组内含数字，请实作选择排序法进行排序。# https://zh.wikipedia.org/wiki/选择排序#【解法一】：找到最小值，交换最小值索引# 1、当i=0时，# 2、用j做循环，判断if arr[j] &lt; arr[i]即前后两个数哪个小（当j做完循环j=1、j=2、j=3..，相当于从头到尾比较了数组里每个数字的大小，即找到最小值。并记录最小值min的下标min_index）# 3、arr[i], arr[min_index] = arr[min_index], arr[i] 用于把第i个索引对应的数组值，和整个数组的最小值进行交换。#【解法二】：找到最小值，交换最小值def insertion_sort(arr) for i in 0..(arr.size-2) # min = arr[i] 这一行可以省略，因为当i=0，分别执行j=1、j=2.. for j in (i+1)..(arr.size-1) if arr[j] &lt; arr[i] min = arr[j] arr[j] = arr[i] arr[i] = min end end end return arrendarr = [7, 68, 42, 46, 9, 91, 77, 46, 86, 1]answer = insertion_sort(arr)puts answer.to_s # 应该是 [1, 7, 9, 42, 46, 46, 68, 77, 86, 91] 22 12345678910# 给定一阵列内含数字，请输出 0~9 中不见的数字def find_missing(arr) arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] arr = arr1 - arrendanswer = find_missing( [2,2,1,5,8,4] )puts answer.to_s # 应该是 [0,3,6,7,9] 23 12345678910111213141516171819202122# 给定一 Hash，输出有最大 value 的 keydef find_max(hash) arr = hash.values hash.each do |key, value| if value == arr.max return key end endendh = &#123; &quot;a&quot; =&gt; 71, &quot;b&quot; =&gt; 38, &quot;c&quot; =&gt; 21, &quot;d&quot; =&gt; 80, &quot;e&quot; =&gt; 10&#125;answer = find_max(h)puts &quot;有最大 value 的是 #&#123;answer&#125;&quot; # 应该是 d 24 1234567891011121314151617181920212223# 给定一 Hash，输出 value 是偶数的 keysdef find_even_keys(hash) arr = [] hash.each do |key, value| if value % 2 == 0 arr &lt;&lt; key end end return arrendh = &#123; &quot;a&quot; =&gt; 71, &quot;b&quot; =&gt; 38, &quot;c&quot; =&gt; 21, &quot;d&quot; =&gt; 80, &quot;e&quot; =&gt; 10&#125;answer = find_even_keys(h)puts &quot;有偶数 value 的 keys 有 #&#123;answer&#125;&quot; # 应该是数组 [b,d,e] 25 12345678910111213141516171819202122232425262728293031323334# 计算一个阵列中各个元素的出现频率#【解法一】：def count(arr) h = &#123;&#125; arr.each do |i| if h[i] == nil h[i] = 1 else h[i] += 1 end end return h # 回传一个 hashendarr = [&quot;a&quot;, &quot;d&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;c&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;e&quot;, &quot;e&quot;, &quot;d&quot;, &quot;a&quot;, &quot;c&quot;, &quot;e&quot;, &quot;a&quot;, &quot;d&quot;, &quot;e&quot;]answer = count(arr)puts answer # 答案应该是 &#123;&quot;a&quot;=&gt;3, &quot;d&quot;=&gt;6, &quot;c&quot;=&gt;5, &quot;b&quot;=&gt;1, &quot;e&quot;=&gt;5&#125;# 【解法二】：# def count(arr)# h = Hash.new(0)# # arr.each do |i|# h[i] += 1# end# # return h # 回传一个 hash# end 26 12345678910111213141516171819202122232425262728# 给定一个数组包含 Hash，请过滤和排序arr = [ &#123; &quot;name&quot; =&gt; &quot;Peter&quot;, &quot;age&quot; =&gt; 30 &#125;, &#123; &quot;name&quot; =&gt; &quot;John&quot;, &quot;age&quot; =&gt; 15 &#125;, &#123; &quot;name&quot; =&gt; &quot;David&quot;, &quot;age&quot; =&gt; 45 &#125;, &#123; &quot;name&quot; =&gt; &quot;Steven&quot;, &quot;age&quot; =&gt; 22 &#125;, &#123; &quot;name&quot; =&gt; &quot;Vincent&quot;, &quot;age&quot; =&gt; 6 &#125;,]def choose_arr(arr) brr = [] arr.each do |a| if a[&quot;age&quot;] &gt; 18 brr &lt;&lt; a end end return brr.sort_by&#123;|i| i[&quot;age&quot;]&#125;endputs &quot;所有成年人，并由小到大: #&#123;choose_arr(arr)&#125;&quot;# 答案应该是#[# &#123; &quot;name&quot; =&gt; &quot;Steven&quot;, &quot;age&quot; =&gt; 22 &#125;,# &#123; &quot;name&quot; =&gt; &quot;Peter&quot;, &quot;age&quot; =&gt; 30 &#125;,# &#123; &quot;name&quot; =&gt; &quot;David&quot;, &quot;age&quot; =&gt; 45 &#125;#] 27 12345678910111213141516class Person attr_accessor :first_name, :last_name def greet puts &quot;Hello, #&#123;first_name&#125; #&#123;last_name&#125;&quot; endendp1 = Person.newp1.first_name = &quot;Peter&quot;p1.last_name = &quot;Wang&quot;p1.greet # 输出 &quot;Hello, Peter Wang&quot;p2 = Person.newp2.first_name = &quot;William&quot;p2.last_name = &quot;Zhang&quot;p2.greet # 输出 &quot;Hello, William Zhang&quot; 28 123456789101112131415161718# 请打开 wordcount.txt，计算每个单字出现的次数doc = File.read(&quot;wordcount.txt&quot;)h = Hash.new(0)doc.each_line do |line| line = line.gsub(/[,&apos;&quot;.]/, &quot;&quot;) line = line.strip words = line.split(&quot;&quot;) words.each do |word| h[word]+=1 endendh.each do |key, value| puts &quot;#&#123;key&#125; : #&#123;value&#125;&quot;end 29 1234567891011121314151617181920212223242526272829303132333435363738394041424344# 简易 Todo 代办事项应用text = File.read(&quot;todos.txt&quot;)todos = []text.each_line do |line| todos &lt;&lt; line.chompendtodos.each_with_index do |todo, index| puts &quot;#&#123;index&#125;: #&#123;todo&#125;&quot;endwhile (true) print &quot;请输入指令 1. add 2. remove 3. save，然后按 Enter: &quot; command = gets.chomp if command == &quot;add&quot; print &quot;请输入代办事项: &quot; todos &lt;&lt; gets.chomp todos.each_with_index do |todo, index| puts &quot;#&#123;index&#125;: #&#123;todo&#125;&quot; end elsif command == &quot;remove&quot; print &quot;请输入要删除的编号: &quot; todos.delete_at(gets.to_i) todos.each_with_index do |todo, index| puts &quot;#&#123;index&#125;: #&#123;todo&#125;&quot; end elsif command == &quot;save&quot; puts &quot;存盘离开&quot; File.open(&quot;todos.txt&quot;, &quot;w+&quot;) do |f| todos.each do |i| f &lt;&lt; i f &lt;&lt; &quot;\\n&quot; end end break; else puts &quot;看不懂，请再输入一次&quot; endend todos.txt 1234Buy bookGo ShoppingWalkGogo wordcount.txt 123456789Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque quis nulla a magna tincidunt cursus. In condimentum lobortis nulla ut congue. Mauris aliquet, tortor vestibulum aliquet cursus, lorem dolor rhoncus mauris, id imperdiet nunc arcu at nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque lobortis dignissim ligula ut condimentum. Vestibulum a massa sit amet ex fringilla semper in nec ligula. Vivamus eget mauris ex.Sed accumsan justo orci, sit amet rutrum sapien dignissim ac. Mauris ullamcorper leo id vulputate lobortis. Mauris mollis at metus non gravida. Vivamus tempor auctor lacus, ac tincidunt nisi mattis at. Nullam a magna at nunc convallis ornare. Phasellus ultricies mi justo, ac faucibus dui tempus bibendum. Fusce eget ornare neque. Phasellus rutrum viverra magna in mollis. Proin nec sagittis risus. Praesent non viverra magna. Etiam aliquet nunc vitae velit sodales sollicitudin.Morbi pellentesque semper ultrices. Praesent ultricies enim sed lorem hendrerit, in tempor nibh lobortis. Maecenas metus est, commodo et felis at, dignissim dapibus justo. Nunc et malesuada massa. Nunc eu sem eget sapien maximus viverra. Duis feugiat lacus et justo finibus, in pretium enim hendrerit. Proin at iaculis est, eget bibendum velit. Proin ac eros mi. Mauris hendrerit ultrices neque eu ultrices. Praesent gravida, massa at eleifend vulputate, arcu risus luctus tellus, ac aliquam ligula eros et nulla. Aliquam finibus lectus eget posuere maximus.Proin tincidunt nisl eget neque faucibus, porta blandit massa consectetur. Nam nec augue eget ex suscipit ultrices. Vivamus pretium nibh vitae ante vulputate blandit. Phasellus ante justo, vestibulum eget mi ut, faucibus imperdiet felis. Duis accumsan posuere eros at volutpat. Aenean lacinia semper ipsum et elementum. Pellentesque ornare risus ipsum. Proin fermentum ac leo ac condimentum.Vestibulum at eleifend sem. Pellentesque maximus condimentum elit quis lacinia. Duis ac scelerisque mauris. Sed id viverra quam. Quisque in ex lacus. Nunc efficitur metus enim, in pharetra leo suscipit id. Vestibulum rutrum elementum nibh eget efficitur. Nulla quis mi maximus, commodo nisi nec, fringilla felis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Curabitur rhoncus non sapien quis laoreet. Aenean mattis nulla vitae enim scelerisque, at bibendum leo auctor.","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-编程基础练习本","slug":"1 ror-system系统/ror-system-编程基础练习本","date":"2017-12-13T02:35:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/dc81847/","link":"","permalink":"http://yoursite.com/posts/dc81847/","excerpt":"","text":"注意：tiems、while、each可以解决大部分问题。 1、前言准备2、输入、处理、输出 Puts，输出变量，并换行 print，输出变量 gets，从键盘拿到输入的值 =，赋值，指派右边的值给左边的变量 字符串”xx”或’xx’ #{}，将变量内嵌在字符中 ruby中，变量用小写字母，并且用_分开 3、基本算术 数据类型：string、integer、float、array、hash 算术：+、-、*、/、% 转换：to_i、to_f、to_s 浮点数常用方法： .round四舍五入，即大更大小更小 .ceil无条件进制，即只会更大 .floor无条件舍去，即只会更小 4、控制流程 关系运算，回传boolean即true或false == != &lt; &gt; &lt;= &gt;= 逻辑运算：&amp;&amp;且、||或、！反 boolean转型：在 Ruby 之中只要不是 false 或 nil，都会自动判断成 true。 123if &quot;&quot; # 会执行end* 123if nil # 不会执行end 5、方法 Method 调用已定义的方法 123456def hello(name) puts &quot;Hello, #&#123;name&#125;&quot;endhello(&quot;ihower&quot;) # 这样会调用 hello 方法hello &quot;ihower&quot; # 在 Ruby 语言中 () 可以省略 用return回传一个值，然后可以存进变量str 123456def get_hello(name) return &quot;Hello, #&#123;name&#125;&quot;endstr = get_hello(&quot;ihower&quot;)puts str 如果没有写 return，该方法的最后一行的值会自动被返回。例如上述程式的 return 可以省略： 123def get_hello(name) &quot;Hello, #&#123;name&#125;&quot;end ！！！！99问题：puts和return的区别？？ 6、循环 Loop 循环，就是可以重复执行某段程式码，直到满足某个条件。 12345x = 10while x &lt;= 10 puts x x = x + 1end 在 while 循环中，用 break 关键字，会提前中断循环 7、数组 Array 数组是一个有顺序的容器，用数字当作索引。索引从0开始 原则上里面的元素，数据类型最好都是一样的，例如都存整数，或是都存字符串。 数组里面还可以放数组，这样会变成二维数组： 用for走访数组，ruby中常用each 123array.each do |i| puts iend 如果走访时，需要索引值，可以改用 each_with_index 方法： 1234array.each_with_index do |i, j| puts i puts j # j 从 0 开始数end 数组的操作： array.size 会回传数组长度 array[1] 会读取第二个元素 array[1] = 999 会更改第二的元素的值 array[99999] 读取一个不存在的值，会回传 nil array[0] 或 array.first 是数组的第一个元素 array[-1] 或 array.last 是数组的最后一个元素 array.push(999) 或 array &lt;&lt; 999 会新增一个元素 999 到数组的最后面 array.unshift(999) 会新增一个元素 999 到数组的最前面 array.delete_at(i) 会删除索引值在 i 的元素 Splite字符串转化成数组，join把数组转化成字符串 12345678910str = &quot;ABCDEFG&quot;str[0] # 得到 &quot;A&quot;str[1] = &quot;x&quot;str # 变成 &quot;AxCDEFG&quot;str.split(&quot;&quot;) # 用 &quot;&quot; 拆开字符串，得到数组 [&quot;A&quot;, &quot;x&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;][&quot;x&quot;, &quot;y&quot;, &quot;z&quot;].join(&quot; &quot;) # 用 &quot; &quot; 串接成字符串，得到 &quot;x y z&quot; 8、散列 Hash 散列Hash，就是用键(key)当作索引的容器，例如： 123456789h = &#123; &quot;a&quot; =&gt; 123, &quot;b&quot; =&gt; 456 &#125;h[&quot;a&quot;] 就是 123h[&quot;b&quot;] 就是 456h[&quot;qweqkleklwqen&quot;] 如果读取一个不存在的key，结果会是 nilh[&quot;new_key&quot;] = 123 如果本来没有这个 key，就会直接新增一组 key-value 如何走访散列： 1234h.each do |key, value| puts key puts valueend h.keys 会回传一个数组包括所有 keys h.values 会回传一个数组包括所有 values h.merge(h2) 会合并散列 h2 到散列 h 9、对象 Object 对象(Object)，也是一种数据类型，这种数据除了拥有属性，也有方法可以调用。 在 Ruby 之中，其实每种数据类型，例如 String、Integer、Float、Array、Hash 等等，也都是对象(Object)。例如字符串的 size 方法和 split 方法： &quot;abc&quot;.size 会回传 3 &quot;a,b,c,d&quot;.split(&quot;,&quot;) 会回传数组 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] 其中 . 就是调用方法的意思。 需要透过类 Class 自订义 Object。Class 就像一种样板，定义出同一种类型的对象有哪些共同的属性和方法。 12345678class Car attr_accessor :color # 这会定义属性 @color def run puts &quot;This #&#123;@color&#125; car is running&quot; endend 有了类，就可以用 new 来产生出对象： 1234567car1 = Car.newcar1.color = &quot;red&quot;car1.runcar2 = Car.newcar2.color = &quot;blue&quot;car2.run 内建的类 123456789&quot;foobar&quot;.class 会回传 String 是个类String.new(&quot;foobar&quot;) 等同于 &quot;foobar&quot;[1,2,3].class 会回传 Array 是个类Array.new([1,2,3]) 等同于 [1,2,3]不过因为这些数据类型太常用了，所以就不需要写 .new 来产生，直接用符号表示就可以了。 常数，大写开头的变量Pi = 3.1415926。所有的类Class都是常数。 10、档案处理 读取档案就是将数据从硬盘放进内存里面，让程序可以操作。 写入档案则是将内存的数据写入硬盘进行保存。 开档读取和写入，用Ruby 的 File API 123读取：file = File.open(&quot;foo.txt&quot;)doc = file.read(&quot;foo.txt&quot;) 123456写入File.open(&quot;bar.txt&quot;, &quot;w+&quot;) do |f| f &lt;&lt; &quot;aaa&quot; f &lt;&lt; &quot;\\n&quot; f &lt;&lt; &quot;bbb&quot;end 11、推荐资源Ruby 基础教程, 人民邮电，如果你要找工作面试，请尽量念完这一本。 如果想继续练习基础编程，或是面试的公司有考算法，请练习以下的题库网站(请练习 Easy 程度程度即可，更高难度需要学完数据结构课程) Coderbyte LeetCode Online Judge 硅谷、BAT 大公司面试必备刷题题库网站 Codility 模拟线上算法测试，很刺激 如果这教程对你来说还是偏难太过抽象，建议你可以找啊哈磊的小学生坐在马桶上都能看懂的编程入门书，会用更浅显的对话和例子，用一整本书的长度来讲这教程的内容。 课后练习21、选择排序法123456789101112131415161718192021222324252627# 给定一数组内含数字，请实作选择排序法进行排序。# https://zh.wikipedia.org/wiki/选择排序# 解释：# 1、当i=0时，# 2、用j做循环，判断if arr[j] &lt; arr[i]即前后两个数哪个小（当j做完循环，相当于从头到尾比较了数组里每个数字的大小，即找到最小值。并记录最小值min的下标min_index）# 3、arr[i], arr[min_index] = arr[min_index], arr[i] 用于把第i个索引对应的数组值，和整个数组的最小值进行交换。def insertion_sort(arr) for i in 0..(arr.size-2) min_index = i for j in (i+1)..(arr.size-1) if arr[j] &lt; arr[i] min_index = j end end a = arr[i] arr[i] = arr[min_index] arr[min_index] = a end return arrendarr = [7, 68, 42, 46, 9, 91, 77, 46, 86, 1]answer = insertion_sort(arr)puts answer.to_s # 应该是 [1, 7, 9, 42, 46, 46, 68, 77, 86, 91] 12345678910111213141516171819# 方法二：找到最小值，交换最小值def insertion_sort(arr) for i in 0..(arr.size-2) for j in (i+1)..(arr.size-1) if arr[j] &lt; arr[i] min = arr[j] arr[j] = arr[i] arr[i] = min end end end return arrendarr = [7, 68, 42, 46, 9, 91, 77, 46, 86, 1]answer = insertion_sort(arr)puts answer.to_s # 应该是 [1, 7, 9, 42, 46, 46, 68, 77, 86, 91]","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-rails101","slug":"1 ror-system系统/ror-system-rails101","date":"2017-12-13T02:25:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/e434021/","link":"","permalink":"http://yoursite.com/posts/e434021/","excerpt":"","text":"2、基础建设rails new、git init，或者是git clone、cp config/database.yml.example config/database.yml、bundle install ①、gem ‘bootstrap-sass’，css、html、flashes ②、gem ‘devise’，做navbar的login、logout、signup ③、gem ‘simple_form’ ④、gem ‘font-awesome-rails’，加入登录和退出小图标 3、讨论群架构 讨论群要有“标题”与“叙述” group的CRUD 使用者要可以看到“讨论群一览表” 把new和edit换成partial表单 5-4、权限设置 只有登录了的使用者，才可以建立群组 设置关系，&lt;%= group.user.email %&gt; 只有群组的建立者，才可以 编辑 / 删除群组 &lt;% if current_user &amp;&amp; current_user == group.user %&gt; 没登录的路人，不能通过网址进入后台 1before_action :authenticate_user! , only: [:new, :create, :edit, :update, :destroy] 已登录的用户，不能通过网址进入后台 定义find_group_and_check_permission方法 1234567def find_group_and_check_permission @group = Group.find(params[:id]) if current_user != @group.user redirect_to root_path, alert: &quot;You have no permission.&quot; endend 6、posts的CRUD 可以在群组里面新增 / 编辑 / 删除文章 新建model前注意看model文件夹，要加入哪些外键，并设置好关系 posts的CRUD，注意create的action较难 文章必须要有“内容”，否则不允许被发表 validates限制content内容不能空、order排序用到scope、分页gem ‘will_paginate’ 6-2、我发现：1、current_user是devise这个gem的方法，代表是已登录的用户。所以可以用&lt;% if current_user %&gt;来判断用户是否登录。 2、每次新建model时，看下model文件夹下已有的跟它有没有关系，如果有就把相应的外键xx_id栏位加上。保存后设置相互关系。 6-2、posts的CRUD思路（特别是create这个action里指定外键）：①、定义post的new的action，按照网址http://localhost:3000/groups/9/posts/new需要知道@group的id 1234def new @group = Group.find(params[:group_id]) @post = Post.newend ②、首先要在view的new表格里填写content并保存，这里用到simple_form_for和[@group, @post] 1234&lt;%= simple_form_for [@group, @post] do |f| %&gt; &lt;%= f.input :content %&gt; &lt;%= f.submit &quot;保存&quot;, data:&#123;disable_with:&quot;正在保存..&quot;&#125; %&gt;&lt;% end %&gt; ③、系统提示缺少create的action。因为post有两个外键，这里需要指明它们具体是什么，即@post.group = @group、@post.user = current_user两个表达式的左边。因为第一个表达式的@group未知，所以补充了@group = Group.find(params[:group_id]) 1234567891011def create @post = Post.new(post_params) @group = Group.find(params[:group_id]) @post.group = @group @post.user = current_user if @post.save redirect_to group_path(@group) else render :new endend ④、另外，因为要在http://localhost:3000/groups/9页面显示post，即需要用到@posts.each do |post|，所以要在grroup的show的action里加入@posts = @group.posts 6-2、问题：1、跟招聘网中的一样，create的action中，因为group有外键user_id要注明@group.user = current_user，感觉应该只在creat这个action加入就可以而edit不用因为数据库在create时已经记录。①、在create的action中为什么要加@group.user = current_user ？ 【待完善的解释】： 因为user用户有很多个，用@group.user = current_user 来指明这个群组具体是谁创建的。测试发现，当user和group的model没有建立关系时，没有@group.user = current_user也能创建group；但是当group的model加入belongs_to :user后不能创建。而且原来的数据库要删除，因为user_id为nil会报错。 ②、如果model中没有写group和user的关系，会发生什么报错 ？ undefined method，跟上面①的报错类似。 12undefined method `user&apos; for #&lt;Group:0x007fc0c0f48728&gt;Did you mean? user_id 7、退出/加入群组（非常陌生） 一个使用者可以选择“加入”、“退出”讨论群 建立群成员的关系表 会员要可以在社团里面看到自己“是否群组成员”，即views层面 实作 model 层 “加入群组”、“退出群组” 实作controller里的 “加入群组”、“退出群组” 群的创始者，创群一开始就应该加在群组里 新建group后自动成为group的一员，在create中操作 难点解答：1、用类似招聘网的is_hidden和is_admin即数据库的方式，可以判断做出views层面的join/quit（加入/退出群组），但是所有用户登录进去都显示是群组成员。。【问题1】在于，不知道哪个用户是哪个群组的成员？用is_member一个栏位，要不add_to_user要不add_to_group，不管加入哪一边，另一个变量就不知道具体是指哪一个个体，所以就会出现上面描述的现象：所有用户登录进去都是显示群组成员。 【小结】目前学会的两种判断对错的方法，①、用布林值boolean，是涉及一个model对象判断对与错（比如is_admin只判断user是不是admin，比如is_hidden只判断job是否隐藏）在数据库层面通过update_columns判断。注意：这种方法可能不适用与多对多（需进一步验证）。②、多对多关系（比如这里判断user是不是属于group，涉及两个model，所以用boolean来判断会说不清楚）。设置关系后，通过.includes？、&lt;&lt;、.delete(group)等方式来判断和操作。 2、关键是，这里还想捞出 “群组的所有用户” 和 “用户参与的所有群组” ，所以必须讲清楚关系。【问题2】has_many :participated_groups和has_many :members，这里的participated和member是不是rails内建的词语，换成其他词语行不行？ 【解答】测试发现，participated和member是自定义的，改成par和mem也可以。 3、【问题3】下面这段rails c里的代码怎么解读12345u = User.first g = Group.firstg.members &lt;&lt; ug.membersu.participated_groups 定义单数的u 定义单数的g g群组包含成员u 显示g群组的成员——可以看到成员u在群组g里面 显示成员u所参加的群组——可以看到成员u所参加的群组里有g 4、【问题4】解读代码1234app/models/user.rb+ def is_member_of?(group)+ participated_groups.include?(group)+ end 这个用户参与的所有群组participated_groups中，包含了group这个群组即include?(group) 因为用的是判断式include?，所以返回的值是true或false。 123u = User.firstg = Group.firstu.is_member_of?(g) 【问题5】include？与&lt;&lt;有什么区别？ 解答：include？是一种状态的判断，如participated_groups.include?(group)是说参与的群是不是包含了group。&lt;&lt;是一个动作，如g.members &lt;&lt; u是说让g的所有用户包含用户u。 5、views层面的加入/退出群组：user的model加入is_member_of?(group)来判断6、model层面的加入/退出群组。​ 因为是用户在执行join和quit，所以在user的model里定义。 123456789app/models/user.rbdef join!(group) participated_groups &lt;&lt; group #该用户参与的所有群组包含group这个群组enddef quit!(group) participated_groups.delete(group) #[问题]如果这里用destroy行不行？end rail c里的测试解读： 1234567u = User.firstg = Group.firstu.join!(g)u.is_member_of?(g)u.quit!(g)u.is_member_of?(g)exit 7、controller里的join和quit12345678910+ def join+ @group = Group.find(params[:id])+ + if !current_user.is_member_of?(@group)+ current_user.join!(@group)+ flash[:notice] = &quot;加入本讨论版成功！&quot;+ end+ + redirect_to group_path(@group)+ end 8、创办群组的时候自动加入群组，又是在creat的action中加入。注意这里是用model里的join!方法，而不是同个文件controller里的join方法。12345678910 def create @group = Group.new(group_params) @group.user = current_user if @group.save+ current_user.join!(@group) redirect_to groups_path else render :new end end 8、 新增一个下拉选单 可以看到自己过去曾经发表的文章 可以看到自己过去曾经参与的社团 9、 了解 Helper 是什么，怎么使用 换行显示simple_format(group.description) 自定义helper，&lt;%= render_group_description(group) %&gt; 了解 Partial 是什么，怎么使用 共用表单的作用，并且可以设置参数来替代&lt;% @groups.each do |group| %&gt; &lt;%= render :partial =&gt; &quot;group_item&quot;, :collection =&gt; @groups, :as =&gt; :group %&gt; 10、上传1、上传github git remote add origin git@github.com:你的github名字/rails101-1.gitgit push -u origin master git push --all origin github报错强推git push origin master —force 2、上传heroku 修改 Gemfile 文件，把 sqlite3 从第7行搬到约第30到40行的group :development, :test do 在末尾新增一个 production group，加上 pg 这个 gem。然后bundle install 123group :production do gem &apos;pg&apos;end heroku login heroku create git push heroku ch08:master heroku run rake db:migrate 新建heroku create app名字 改名heroku apps:rename 新app名字 删除heroku apps:destroy app名字 报错强推git push -f heroku master 报错debug，heroku logs | grep -i error 清空数据 123heroku pg:reset DATABASE（清空heroku数据库，比如旧的seed档）heroku run rake db:migrateheroku run rake db:seed","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-system-招聘网","slug":"1 ror-system系统/ror-system-招聘网","date":"2017-12-13T02:25:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/f7a3e9a4/","link":"","permalink":"http://yoursite.com/posts/f7a3e9a4/","excerpt":"","text":"用户故事 身为管理者，我可以新增职缺需求； 包括「标题」「内容」「薪资上限」「薪资下限」「联系方式」 身为管理者，我可以编辑、删除、隐藏职缺需求 （在后台）； 身为使用者，我必须「登入」才能发表职缺； 身为使用者，我必须要有「admin 身份注记」才能进入后台。 5、基础建设与前后台jobrails new，或者是git clone、cp config/database.yml.example config/database.yml、bundle install ①、gem ‘bootstrap-sass’，css、html、flashes ②、gem ‘devise’，做navbar的login、logout、signup ③、gem ‘simple_form’ ④、gem ‘font-awesome-rails’，加入登录和退出小图标 基础建设 jobs和admin/jobs的CRUD，最小可行界面。 admin加入require_is_admin的验证 加入其他栏位：wage_upper_bound、wage_lower_bound、contact_emal、is_hidden 薪资不能为空，且大于0，numericality: { greater_than: 0} is_hidden用boolean值，隐藏的职位不可在前台看到，并排序 后台显示public和hidden状态，并把代码搬到helper admin/jobs的CRUD，最小可行界面 8、 把 admin#jobs（管理员用的）与 jobs（应征者用的）做个区分； 加上 sidebar 设计，即用layout “admin” 在 admin 后台的职缺状态，改成图标； 改成 Font Awesome 图标，content_tag(:span, “”, :class =&gt; “fa fa-lock或fa-globe”) 把 is_hidden 的操作改成按钮 R V C，然后重构到M 注意：这里更新栏位可有两种写法，①、self.栏位 = 值；②、self.update_columns(栏位: 值)，更新完栏位的值，记得要self.save保存。 jobs#show 被隐藏的工作不可以被查看到 11、薪资排序 和上传简历 首页可以按照职缺薪资下限排序 因为有多种情况，controller里用case..when的语法 排序order部分用scope重构到model中 首页可以按照职缺薪资上限排序 首页可以按照职缺发表时间排序 应征者可以提交自己的简历 简历的网址应该长成这样：/jobs/1/resumes/new 用户必须要登入才能提交简历 使用 Resume 这个 model 的 attachment 栏位 gem “carrierwave” public/uploaders加入.gitignore里 11-11、网址里带参数的写法？ 【问题1】①、jobs_path(:order =&gt; “by_upper_bound”)可不可以写成jobs_path(order : “by_upper_bound”)？可以的。注意：这种写法写完后，用chrome的检查，可以看到生成下面②里的网址。 ②、/jobs?order=by_lower_bound 2、controller里的判断式12345678910def index @jobs = case params[:order] when &apos;by_lower_bound&apos; Job.where(is_hidden: false).order(&apos;wage_lower_bound DESC&apos;) when &apos;by_upper_bound&apos; Job.where(is_hidden: false).order(&apos;wage_upper_bound DESC&apos;) else Job.where(is_hidden: false).order(&apos;created_at DESC&apos;) endend 11-2、上传简历1、【问题1】：resume的controller里create的写法，需要加入@resume.job = @job和@resume.user = current_user，是不是根据链接可以看到这里跟job_id和resume_id都有关，所以用于说清楚它们的关系？？【待完善的解释】：测试发现@resume.job = @job放在show里会报错，所以这行代码是不能乱放的。 因为job职位有很多个，用@resume.job = @job指明简历具体投递的是哪个职位；因为user用户有很多个，用@resume.user = current_user来指明这份简历具体是谁投递的。——从7个action来看，只有create和update适合用来记录外键值user_id、job_id，而update只能通过edit来进入，并不是每个resume都会被我们编辑到，所以通过create的action来指明。 1234567891011def create @job = Job.find(params[:job_id]) @resume = Resume.new(resume_params) @resume.job = @job #这行不加会报错 @resume.user = current_user #这行不加点击上传简历页面没有反应 if @resume.save redirect_to root_path else render :new endend 12、简历后台 管理员在后台可以看到每个职缺有多少使用者投递简历； 1job.resumes.count 管理员在后台可以看到每个职缺里面的投递简历内容，并且可以下载附件。 1&lt;%= link_to(&quot;Download Resume&quot;, resume.attachment_url) %&gt; 1&lt;%= render :partial =&gt; &quot;resume&quot;, :collection =&gt; @resumes, :as =&gt; :resume %&gt; 12-2、后台看到全部简历1、【问题1】：&lt;%= link_to(job.resumes.count, admin_job_resumes_path(job)) %&gt;这个就ok，但是&lt;%= link_to(job.resumes.count, admin_job_resume_path(job)) %&gt;这个会报错如下，要怎么改才能查看show页面？ 分析：show的地址如http://localhost:3000/admin/jobs/12/resume/1，这里需要知道job_id和resume_id，即要传入两个参数，括号里要怎么写？？——测试发现各种方案都会报错，两个参数的写法应该是(@job, @resume)。 现在的页面是http://localhost:3000/admin/jobs即job的index，一般是在http://localhost:3000/admin/jobs/12/resumes即resume的index页面里写show，测试发现ok。 12345&lt;% @resumes.each do |resume| %&gt; &lt;div class=&quot;panel-heading&quot;&gt;​ &lt;%= link_to(“简历详情show”, admin_job_resume_path(@job, resume)) %&gt; ​12&lt;% end %&gt; 2、 ①、carrierwave下载简历的链接用url写&lt;%= link_to(&quot;下载简历&quot;, resume.attachment_url) %&gt;。 ②、使用者用&lt;%= @resume.user.email %&gt;。 ③、外观用bootstrap的panel整合。 3、【拓展问题】：resume的edit的action要怎么写，用下面的写法一直报错。 13、魔改1、首页大图，用bootstrap的巨幕 1background-image:url(&apos;http://fullstack-public.oss-cn-qingdao.aliyuncs.com/2017-04-15-542213.png&apos;) 2、首页小栏目，用bootstrap的缩略图 3、后台按钮样式，用class =&gt; “btn btn-xs btn-success”，常用颜色info、danger、success、warning，default、primate 4、表格样式，class:”table table-bordered table-hover” 5、导航栏颜色样式，用bootstrap导航 6、logo和favicon，用font-awesome或img。&lt;img src=&#39;&lt;%= image_url &#39;logo.png&#39; %&gt;&#39; &gt; 7、【问题1】.btn-lg, .btn-group-lg &gt; .btn是什么意思？ 1234567+ .btn-lg, .btn-group-lg &gt; .btn &#123;+ padding: 8px 16px;//通过padding来决定btn的大小+ font-size: 20px;//btn文字大小+ letter-spacing: 3px;//调整文字间距+ border-radius: 3px;//btn圆角+ width: 200px;//这里用指定宽度把btn拉得更长+ &#125;","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"tool-atom-atom的Tree View隐藏了.gitignore里列出的文件或目录？","slug":"6 tool-xx工具/tool-atom-atom的Tree View隐藏了.gitignore里列出的文件或目录？","date":"2017-12-06T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/4561aa0/","link":"","permalink":"http://yoursite.com/posts/4561aa0/","excerpt":"","text":"原来是因为 Tree View 这个插件有个选项，可以隐藏版本控制系统里被忽略掉的文件，比如在 .gitignore 文件里列出来的东西。你可以取消这个选项。 打开 Settings - Packages 搜索 tree-view 点击 Settings 取消勾选的 Hide VCS Ignored Files","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"bug-缺少id，model关系没设置，create的action没指明model关系","slug":"2 ror-tips:bug知识点/bug-缺少id，model关系没设置，create的action没指明model关系","date":"2017-12-01T04:00:00.000Z","updated":"2018-01-14T02:18:37.000Z","comments":true,"path":"posts/523a3588/","link":"","permalink":"http://yoursite.com/posts/523a3588/","excerpt":"","text":"第一种：No route matches {:action=&gt;”show”, :controller=&gt;”orders”, :id=&gt;nil} missing required keys: [:id]123456789101112131415161718ActionController::UrlGenerationError in Account::Orders#indexShowing /Users/apple/rails/jdstore1130/app/views/account/orders/index.html.erb where line #13 raised:No route matches &#123;:action=&gt;&quot;show&quot;, :controller=&gt;&quot;orders&quot;, :id=&gt;nil&#125; missing required keys: [:id]Extracted source (around line #13):111213141516 &lt;% @orders.each do |order| %&gt; &lt;tr&gt; &lt;td&gt;&lt;%= link_to(order.id, order_path(order.token)) %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= order.created_at %&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% end %&gt; 第二种：undefined method1234567891011121314151617NoMethodError in OrdersController#showundefined method `product_lists&apos; for nil:NilClassExtracted source (around line #5):345678 def show @order = Order.find_by_token(params[:id]) @product_lists = @order.product_lists end def create 解决办法：1、检查model里的关系设置 2、检查create的action有没有指明外键（即model中有设置belongs_to :xx）相关的关系（如@productj.user = current_user） 3、检查html的输入参数，是要用常用参数(@xx)，还是用id参数(@xx.yy_id) 4、如果有新增栏位，尝试清空该栏位的空的值。比如进入rails c，输入Order.where(token: nil).destroy_all","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"tool-hexo-hexo主题篇之Next","slug":"6 tool-xx工具/tool-hexo-hexo主题篇之Next","date":"2017-11-30T16:10:00.000Z","updated":"2018-01-18T08:25:35.000Z","comments":true,"path":"posts/3b27e0ef/","link":"","permalink":"http://yoursite.com/posts/3b27e0ef/","excerpt":"","text":"序开始之前，先强调几点： hexo几篇文章看的顺序：有基础的直接按『主题篇Asnippet』做；没有基础的可以先快速浏览一遍『hexo视频篇』然后按『主题篇Asnippet』做；遇到问题可以在『主题篇Next』搜索（因为第一次是折腾Next主题所以很多问题写在这一篇）。 关于博客如何分类、md格式文章怎么写，可以看『hexo常用篇』。 hexo博客搭建到能用的程度，非常简单。但是主题等细节配置会有各种坑，如果纠结其中，可能三五天才能配置完。因此推荐用Asnippet主题，简单搭建能用就好，以免浪费太多注意力。 为什么选择hexo而不用vps搭建博客？比起wp来说，hexo轻量级的多，而且易部署（指速度优化方面），也不需要一个专门的服务器来放置（这个其实是我选择hexo的最终原因。手里虽然有vps，但是因为跑着ss加上国内ping值太高，最终肯定影响国内速度，所以就一直没用来放blog）当然没有后台也就意味着不能随时随地写了就发，这个相对WP来说是弱势，但我感觉还好，毕竟不会常常在外面跑，而且写博客基本都是在电脑前，再不济也可以先把MD文件写完后拷回去发布。 css1）两种在文字前加红竖线：box-shadow: -20px 0px 0px -10px red;，或border-left: 3px solid #FF1700; 2） 1![](./pic/pic1_50.png =100x100) 标签用哪些ruby on rails、markdown、typora、vps、atom、bug、iterm 【问题】域名实名认证是不是就是已经备案？不是的。实名认证是在网站如阿里云里认证，而备案是国家备案局的。 ChinaZ域名备案批量查询 ICP备案查询 【问题】如果没有域名解析会怎样？99初步理解，访问jiujiubad.github.io.时会解析成购买的jiujiuba.top。 【问题】域名解析要额外的钱吗？不用，购买阿里云域名的域名就可以配置解析。 【问题】用vps从头搭建博客好，还是用hexo？用hexo好，因为搭建很容易，博客能用就行没必要占用太多注意力。另外，hexo部署可以选在在gihub，也可以选在部署在vps服务器上。 【问题】博客文件开头除了title、categories，还要添加什么信息？别搞那么复杂，写几个常用的就好，包括四个：title、date、categories、tags，指定文章再加上top。 其他诸如版权、评论、密码，还是算了，太占用注意力。 1234567891011121314---title: &apos;20171014 搭建hexo博客&apos;date: 2017-12-08 12:06categories: #分类tags: #标签 - 方法- 但是top: #置顶，需要先配置comments: true #评论copyright: true #版权信息，需要先配置password: #密码，需要先配置--- Mac上搭建Hexo博客：入门篇参考链接：【转发】Mac上搭建基于GitHub的Hexo博客 Hexo官网 hexo下的next主题配置官方文档 【转发】Mac上搭建基于GitHub的Hexo博客 Hexo官网 序第一到第四步，是hexo博客及next主题的安装。剩下的步骤是主题细节配置，按自己的使用习惯选择。 一、环境配置1.Node.js用来生成静态页面。移步Node.js官网，下载v5.5.0 Stable 一路安装即可。 2.Git用来将本地Hexo内容提交到Github上。Xcode自带Git，这里不再赘述。如果没有Xcode可以参考Hexo官网上的安装方法。 二、安装Hexo当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令： 1$ sudo npm install -g hexo 输入管理员密码（Mac登录密码）即开始安装 (sudo:linux系统管理指令 -g:全局安装) 注意坑一：Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。 初始化终端cd到一个你选定的目录，执行hexo init命令： 1$ hexo init blog blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm： 1$ npm install 执行如下命令，开启hexo服务器： 1$ hexo s 此时，浏览器中打开网址http://localhost:4000，能看到如下页面： 本地设置好后，接下来开始关联Github。 三、关联Github1、部署githubStep1 新建仓库1）登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如下图中1所示： 2）PS：本地的blog文件夹下内容为： 1234567_config.yml db.json node_modules package.jsonscaffoldssourcethemes Step2 修改站点配置终端cd到blog文件夹下，vim打开站点配置文件_config.yml，用atom编辑或用linux命令vim _config.yml。 打开下滑到最后，修改成下边的样子： 1234deploy: type: git repository: https://github.com/jiujiubad/jiujiubad.github.io.git branch: master 你需要将repository后gonghonglou换成你自己的用户名，地址在上图2位置获取。 注意坑二：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记 Step3 生成静网站并部署1） 1hexo g //生成静态网站，对应专案下的public文件夹 此时若出现如下报错：ERROR Local hexo not found in ~/blogERROR Try runing: ‘npm install hexo –save’ 则执行命令：npm install hexo –save 若无报错，自行忽略此步骤。 2）执行配置命令： 1hexo d //部署到github 注意坑三：若执行命令hexo d仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git 12&gt; npm install hexo-deployer-git --save &gt; &gt; 再次执行hexo g和hexo d命令。 若你未添加Github的SSH key，则执行hexo d命令时终端会提示你输入Github的用户名和密码，即 12Username for &apos;https://github.com&apos;: 输入github用户名Password for &apos;https://github.com&apos;: 输入github密码 hexo d命令执行成功后，浏览器中打开网址http://gonghonglou.github.io（将gonghonglou换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 2、添加公钥ssh key（部署github不用输入账号密码）Step1 检查SSH keys是否存在Github执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。 1$ ls -al ~/.ssh Step2 生成新的ssh key执行如下命令生成public/private rsa key pair，注意将your_email@example.com换成你自己注册Github的邮箱地址。 1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 Step3 将ssh key添加到Github中 Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。 mac显示隐藏文件夹和文件 1defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder 再次隐藏输入 1defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder id_rsa.pub这种pub结尾的文件怎么打开？ 用atom等编辑器，打开后全部复制粘贴到github的ssh设置中 进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key: Title里任意添一个标题（或不添加），将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。 3、发布文章终端cd到blog文件夹下，执行如下命令新建文章： 1$ hexo new &quot;postName&quot; 名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。你当然可以用vim来编辑文章。我在用Mou编辑器，支持预览，虽然其预览主题并非我喜欢，如果你有好用的markdown编辑器请推荐给我，感激不尽！ 文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布： 123hexo generate //生成静态页面hexo deploy //将文章部署到Github 至此，Mac上搭建基于Github的Hexo博客就完成了。下面的内容是介绍安装theme和绑定个人域名，如果有兴趣且还有耐心的话，请继续吧。 Mac搭建Hexo博客：进阶篇一、安装主题你可以到Hexo官网主题页去搜寻自己喜欢的theme。最常用最多人用的是hexo-theme-next，以此为例。 Step1终端cd到 blog 目录下执行如下命令： 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next Step2将blog目录下_config.yml里theme的名称landscape修改为next Step3终端cd到blog目录下执行如下命令(每次部署文章的步骤)： 123456hexo clean //删除网站，即删除public文件夹hexo g //生成网站，即生成public文件夹hexo d //部署到github，要先站点配置添加github地址hexo s //运行hexo，打开网址http://localhost:4000/查看博客ctrl+c //停止hexo s 至于更改theme内容比如名称、描述、头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。 NexT 使用文档里有极详细的介绍。 【bug】、解决 deploy 后博客空白问题昨晚更新了一下 blog 做了个部署，结果blog就挂了，打开 gonghonglou.com 页面显示一片空白。然而 hexo s开启本地服务器 localhost:4000 访问是没问题的。上网查了一下，原来是 GitHub Pages 禁止了 source/vendors 目录的访问。Github 在 11 月 3 日更新了版本。其中包括升级了 Jekyll 到 3.3。Jekyll 为了加快构建速度，忽略 vendor 和 node_modules 文件夹。所以部署到 GitHub 后，识别不到本地下的的这个文件夹 blog/themes/next/source/vendor，你只需要给这个文件夹换个名字再重新部署一次就 OK 了。nexT 在 GitHub 上的 isusses 已经给出了解决方案：#1214 还有另一种解决方案就是升级 nexT 主题，cd 到 blog/themes/next/ 下执行命令 git pull 更新。然而，有可能升级后多说评论等第三方工具会失效，慎用。 进阶前、需要知道的命令：①、修改本地配置后要ctrl+c关闭hexo s的窗口，再重新hexo s才会在localhost:4000/上生效。②、如果是继续上传更多文件，把文件放入专案/source/_posts文件夹中，然后hexo g，重新hexo s在localhost:4000上可以查看本地效果。最后hexo d 上传到github。③、如果想清空文章重新上传，先hexo clean，把文件放入专案/source/_posts文件夹中，然后hexo g，重新hexo s在localhost:4000上可以查看本地效果。最后hexo d 上传到github。进阶一、绑定个人域名现在使用的域名是Github提供的二级域名，也可以绑定为自己的个性域名。购买域名，可以到GoDaddy官网，网友亲切称呼为：狗爹，也可以到阿里万网购买。我是在万网买的，可直接在其网站做域名解析。 1.Github端Step1 新建CNAME1）touch source/CNAME，最好用touch新建，试过在atom用右键新建文件类型不一样。 2）CNAME写入你的域名，如jiujiubad.top。 3）重新部署。注意三个命令都要执行，否则CNAME不会部署到github。 123hexo cleanhexo ghexo d 注意坑四：网上许多都是说在Github上直接新建CNAME文件，如果这样的话，在你下一次执行hexo d部署命令后CNAME文件就消失了，因为本地没有此文件嘛。 2.域名解析如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析 –&gt; 添加解析 记录类型：CNAME 主机记录：将域名解析为example.com（不带www），填写@或者不填写 记录值：gonghonglou.github.io. (不要忘记最后的.，gonghonglou改为你自己的用户名)，点击保存即可，如下图： 此时，点击访问http://gonghonglou.com和访问http://gonghonglou.github.io效果一致。 大功告成！ 进阶二、将个人博客同时部署到 GitHub 和 Coding！！！不要折腾了，Coding有广告不好用1、首先到 Coding 上注册并开一个项目，项目名称和用户个性后缀相同（方便二级域名访问博客），拿到项目的 https 地址 2、打开本地 blog 目录下的 _config.yml 文件，修改如下 123456deploy: type: git repository: github: https://github.com/gonghonglou/gonghonglou.github.io.git coding: https://git.coding.net/gonghonglou/gonghonglou.git branch: master 3、cd 到本地 blog/source 目录下执行如下命令新建 Staticfile 文件 1$ touch Staticfile #名字必须是Staticfile 原因是 coding.net 需要以这个文件来作为静态文件部署的标志，就是说看到这个 Staticfile 就知道按照静态文件来发布。 4、执行发布命令 hexo g 、 hexo d 5、个人域名添加两条 CNAME 解析。将 gonghonglou.github.io. 解析为 [海外] ，将 gonghonglou.coding.me. 解析为 [默认] 这样就是为了从国内访问 gonghonglou.com 就是访问 Coding 上的博客项目，从国外访问 gonghonglou.com就是访问 GitHub 上的博客项目。 6、到 Coding 上的博客项目主页，点击 Pages服务 输入部署分支 master 立即开启 这样就可以访问自己在 Coding 上的个人博客了 gonghonglou.coding.me/gonghonglou 如果像这样你的用户后缀名与博客项目名称相同你还可以省略项目名称直接访问 gonghonglou.coding.me 【bug】显示仓库尚未初始化，不能选择部署分支？ 解决办法：原因是代码还没上传，回到终端或item看看，发现没有登录。 7、添加域名绑定，输入个人域名就 OK 了，可能需要耐心等待几分钟，这样在国内访问自己的博客就快得多了。 试了一下在国内访问 gonghonglou.com 拦不住 要飞起来了😂 【bug】这一步没做，直接输入网址出现404 解决办法：升级银牌会员（补充个人资料即可）注意别漏填了最上方的手机号，然后绑定域名。 8、可以为coding.net上的设置，也添加SSH公钥，方法跟上面github的操作一样，因为一台电脑用一个公钥所以不用重复生成，直接复制代码即可。 搭建后的美化（只选参考链接中自己需要的功能）参考链接：hexo博客的背景设置 5. 修改文章内链接文本样式实现效果图 具体实现方法修改文件 themes\\next\\source\\css\\_common\\components\\post\\post.styl，在末尾添加如下css样式，： 12345678910// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 border-bottom: 1px solid #fc6423;这一行是下划线。 注意：这样设置后是不能在链接前加 的，加后颜色不能改变。 9. 博文压缩！！不要折腾了，没卵用感觉更慢作用是去掉多余代码，加速网站。在站点的根目录下执行以下命令： 12$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 在如下图所示，新建 gulpfile.js ，并填入以下内容： 123456789101112131415161718192021222324252627282930313233var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩 public 目录 cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public 目录 htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩 public/js 目录 jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;]); 生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩（以后使用hexo g可以看到每个文件在压缩的进度百分之多少）。 10. 修改“代码块自定义样式实现效果图 具体实现方法 打开\\themes\\next\\source\\css\\_custom\\custom.styl,向里面加入：(颜色可以自己定义) 123456789101112131415// 小代码块的样式code &#123; color: #ff7600; background-color: rgba(255,255,255,0.1); font-size: 16px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 16. 添加 README.md 文件每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md文件的。 在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将skip_render 参数的值设置为 1skip_render: README.md 保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。 18. 实现统计功能实现效果图 具体实现方法 在根目录下安装 hexo-wordcount,运行： 1$ npm install hexo-wordcount --save 然后在主题的配置文件中，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 20. 在文章底部增加版权信息 1、主题默认的版权声明配置在themes\\next\\_config.yml文件中，设置如下： 12345# Declare license on postspost_copyright: enable: false license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 2、打开next\\layout/_macro/，新建my-copyright.swig： 1234567891011121314&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 HH:MM:ss&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;版权声明:&lt;/span&gt;本博客所有文章除特别声明外，均采用 &lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-sa/3.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)&quot;&gt; BY-NC-SA 3.0 许可协议&lt;/a&gt;，转载请注明出处！&lt;/p&gt; &lt;/div&gt;&#123;% endif %&#125; 3、打开/next/source/css/_common/components/post/， 添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 96%; max-width: 65em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border-left: 3px solid #FF0000; font-size: 0.85rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #000000; font-weight: normal;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 如果想要更改版权模块的红条颜色、背景颜色、透明度等，可以在.my_post_copyright标签里更改。 4、修改next/layout/_macro/post.swig，在代码 12345&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125; 之前添加增加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 5、修改 next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： 1@import &quot;my-post-copyright&quot; 6、PS：如果要在该博文下面增加版权信息的显示，需要在文章头部中增加copyright: true的设置，类似： 1234567---title: date: tags: categories: copyright: true--- 如果你感觉每次新建文章都要添加比较麻烦，可以直接更改文章的模板文件，这样新建文章时就会自动添加copyright: true。 打开根目录/scaffolds/post.md， 做类似设置： 1234567title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:comments: password: copyright: true 22. 隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图： 用谷歌检查和command+shift+f全局搜索，替换成自己喜欢的文字。 24. 文章加密访问实现效果图 具体实现方法 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 代码如下： 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章上写成类似这样： 25. 添加jiathis分享在主题配置文件中，jiathis为true，就行了，如下图 默认是这样子的：如果你想自定义话，打开themes/next/layout/_partials/share/jiathis.swig修改画红线部分就可以了 26. 博文置顶修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为： 12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 在文章中添加 top 值，数值越大文章越靠前，如 12345678---title: 解决Charles乱码问题date: 2017-05-22 22:45:48tags: 技巧categories: 技巧copyright: truetop: 100--- Hexo NexT Disqus 评论插件注册Disqus账号 登陆disqus.com注册账号。注册过程，不多做说明。 进行邮箱确认 注册了disqus账号之后，一定要去邮箱点击一下确认。我当时就是没有点击确认，好像就没有进行下去，还是区点击一下确认吧。 进入 Disqus Home 页应该在disqus.com/home 之后点击右上角的齿轮，再点击 Add Disqus To Site。找到页面最下边的 Get Started 按钮。 之后点击下面的install Disqus。 注意WebsiteName，这个名字要用到配置文件中的。起一个你喜欢的。 设置主题配置文件 打开主题配置文件。找到如下的位置： 12345# Disqusdisqus: enable: true shortname: ****** count: true shortname的位置就填写刚刚的 WebSite Name 的名字。这样就配置好了。 重新部署123hexo cleanhexo ghexo d PS 不过，Disqus墙没墙掉我也不太清楚，让我很是无奈。 【】参考链接http://www.cnblogs.com/MuYunyun/p/6919600.html#_label1 1）文章链接唯一化也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。 安装 npm install hexo-abbrlink --save 在站点配置文件中查找代码permalink，将其更改为: permalink: posts/:abbrlink/ # “posts/” 可自行更换 这里有个知识点： 百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。 搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。 然后在站点配置文件中添加如下代码: 1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 可选择模式： crc16 &amp; hex crc16 &amp; dec crc32 &amp; hex crc32 &amp; dec 2）新建文件时，怎么在md即markdown文件的开头加入标题等信息打开scaffolds/post.md，修改如下： 123456789---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories: 未分类 #分类，设为未分类，以后找到统一更改tags: #标签copyright: true #版权信息，转发的文章再手动去掉truepassword: #密码，需要就加数字top: #置顶，需要就加数字，越大越靠前--- 3）添加酷炫的\b\b打赏二维码看了好些博客，支付宝的\b收款码和微信的收款码都是分开的，且是没有美化过的二维码，让人\b打赏的欲望自然就下降了。来看一下我的赞赏二维码(支持\b微信和支付宝支付哟) 实现这个酷炫二维码的流程\b如下： 首先，分别获得支付宝和微信的收款码 接着到芝麻二维码里将两张二维码合并 最后到第九工场生成自己喜欢的造型 讲生成的图片pay.png放到根目录的source文件中，并在主题配置文件中加上 alipay: /pay.png 打赏字体不闪动\b修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下： 123456789101112/* 注释文字闪动函数 #wechat:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; #alipay:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/ 在不同电脑上进行Hexo写作与同步 【问题4】hexo next怎么做文章管理，如果电脑坏掉的话？私人文章会不会泄露? ①、本地文件夹做分类，一是断网的时候可以查找。 ②、保证电脑坏了posts也不会丢失，定期打包放到google。如果google也坏了，那就没有源文件了，但起码hexo上还有文章可以慢慢复制。 ③、1）github干脆不要放posts了，有些私人文章。2）或是把所有私人文章都加一个统一前缀和密码，在push到github前把它们从post文件夹移到其他位置，push后再移动回post文件夹执行hexo g和hexo d。3）私人文章加统一前缀，自己在电脑和google放着，不发布。——偏向第2种，因为公开的文章在github和hexo都能被复制走，隐藏的文章加密码在手机或其他设备还能查看，又不会在github上直接泄露密码。但是，如果频繁更改hexo配置，就先用第3种，等到配置完成了再用回第2种方法。 ②、github备份专案，方便换电脑写文章。把post文件夹里的私人文件移开（留几篇公开文章）、然后git push到github（最好先检查_config.yml里有没有密钥，有就先移开），push后再把私人文件移回去执行hexo g和hexo d。如果没有更改配置，就不要随便git push了，每次都要移动私人文件太麻烦。 12345678910.gitignore.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_config.yml 【问题1】图片二维码插入？【问题4】背景白色改成用图片？ 首先找到一个背景图片放到 hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; images 的路径下； hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom ，打开\\themes\\next\\source\\css\\_custom\\custom.styl，加上一代码 body { background:url(/images/backGround.jpg（背景图片的名字）);} 效果图： 【问题3】背景色修改在 source/css/_variables/base.styl 中： 12// Background color for &lt;body&gt;$body-bg-color = white 修改themes/next/source/css/_schemes/Mist/_header.styl文件中头部的背景色为base.styl定义的背景色 1234567891011.header &#123; background: $whitesmoke; &#125; #在这里改颜色.header-inner &#123; padding: 40px 0 40px; #这里改header的大小 clearfix(); +mobile() &#123; width: auto; margin-bottom: 50px; padding: 10px; &#125;&#125; 修改themes/next/source/css/_schemes/Mist/index.styl中footer相关定义，可以修改footer颜色值 123456789101112131415.footer &#123; margin-top: 80px; padding: 10px 0; background: $whitesmoke; #这里改颜色 color: $grey-dim;&#125;.footer-inner &#123; margin: 0 auto; text-align: left; +mobile() &#123; width: auto; text-align: center; &#125;&#125; 【问题5】header里的文字改成英文？修改themes/next/languages/zh-Hans.yml，把对应的首页、标签、关于、分类等改成英文。 27. 修改文章正文字体大小打开\\themes\\next\\source\\css\\ _variables\\base.styl文件，将$font-size-base改成16px，如下所示： 1$font-size-base =16px 【问题8】文章题目、标题h1/h2/h3加横线/色块/大小/颜色/字体等？1.1、改标题h1/h2/h3字体打开themes/next/source/css/_schemes/Mist/_base.styl，原来的样式是h1, h2, h3, h4, h5, h6 { margin: 20px 0 10px; }，修改样式为： 1234567891011121314151617181920h4, h5, h6 &#123; margin: 10px 0 0; &#125;h1 &#123; margin: 60px 0 10px; font-size: 2em; background-color: rgba(211,211,211,0.2); &#125;h2 &#123; margin: 20px 0 10px; font-size: 1.8em; border-bottom: 1px #d8d8d8 solid; &#125;h3 &#123; margin: 20px 0 0; font-size: 1.4em; box-shadow: -20px 0px 0px -10px red;&#125;h4 &#123; margin: 10px 0 0; font-size: 1.1em;&#125;p &#123; margin: 0; padding: 17px 0 1px; letter-spacing: 0.08em;&#125;ul li &#123; letter-spacing: 0.08em;&#125;a &#123; border-bottom-color: $grey-light; &#125;hr &#123; margin: 20px 0; height: 2px;&#125; 小技巧：不知道文件位置，可以用chrome的查找，用css代码在atom里全文搜索shift+command+f 1.2、改文章题目字体还是在themes/next/source/css/_schemes/Mist/_base.styl加入： 1234567//文章题目/大标题样式.posts-expand .post-title &#123; position: relative; font-size: 36px; font-weight: 400; background-color: rgba(255,255,255,0);&#125; 【问题10】字体font-family怎么改？——只能改标题打开themes/next/source/css/_variables/custom.styl，输入 12$font-family-headings = KaiTi,&quot;Microsoft YaHei&quot;,Georgia, sans // 标题，修改成你期望的字体族$font-family-base = KaiTi // 修改成你期望的字体族 但是，只有标题字体改变了，正文的字体还是不变。。。 Lato,”PingFang SC”,”Microsoft YaHei”,sans-serif font-sans = “Helvetica Neue”, “Helvetica”, “Hiragino Sans GB”, “Microsoft YaHei”, “Source Han Sans CN”, “WenQuanYi Micro Hei”, Arial, sans-serif 参考资料https://maoao530.github.io/2017/01/25/hexo-blog-seo/ 1、内容宽度themes/next/source/css/_variables/custom.styl 1234// 修改成你期望的宽度$content-desktop = 900px// 当视窗超过 1600px 后的宽度$content-desktop-large = 1100px 2、无序列表ul显示为实心，li显示为空心打开themes/next/source/css/_common/components/post/post-expand.styl，删除ul li { list-style: circle; }。 如果想要ul、li全都改为实心，用ul li { list-style: disc; } 【问题7】打赏直接在固定位置插入图片，怎么做？——先不搞【问题9】侧边栏文章目录栏大字体左对齐？左对齐打开themes/next/source/css/_common/components/sidebar/sidebar.styl，搜索.sidebar-inner，删除text-align: center; 去掉自动序列号数字编辑主题下的 _config.yml 文件，把 number 的 true 改成 false。 123456# TOC in the Sidebartoc: enable: true # Automatically add list number to toc. number: true 【问题11】大代码块样式？hugo 好用多了！ 【问题12】国内访问速度优化？转 GitHub Pages 吧，非裸域 CNAME 的话有 Fastly CDN 加成，速度也不差，无数的开源项目都在用，可用性高。 【问题13】seo搜索引擎访问优化？【问题14】数据统计？ 【问题15】图标优化成网站风格的？ 【问题16】首页显示的文章数量，首页显示的文章字数？ 1）修改站点配置文件的per_page: 10，数字就是文章数量。 2）修改主题配置文件auto_excerpt下的length: 250，数字就是文章字数。 【问题17】什么时候hexo clean、hexo g、hexo s、hexo d的？1）更改目录层文件，如站点配置文件_config.yml时，需要用ctrl+c关闭hexo s再重启； 2）更改themes/next里的文件，如主题配置文件、html、css等，直接刷新页面就能看到结果； 3）继续发布新文章、或更改旧文章（先放到source/_posts文件夹里），直接hexo g可以在http://localhost:4000/看到结果； 4）删除博客上的文章，用hexo clean 5）在本地调试好后，上传到github用hexo d 【问题18】如何注解代码？ 1）styl文件用// 2）yml文件用# 参考李安、anndo、巧玉、韵儿爸爸的博客，修改后可以上传一次分支【bug】站内搜索第二次失效！！pubilc是有生成search.xml文件，也有写入文章内容，但是在网页上一直显示加载中，吐血！！！！！ 方法一：搜索引导到site:jiujiubad.top 方法二：站内地图sitemap 方法三：重新做一个hexo——草草草！！！这个折腾根本就不想去搞什么备份，如果电脑坏了不如直接重新搭一个，太多东西搞来搞去会搞坏，相当不自由。很有用vps自己搭一个的想法。 ps：按照anndo的博客，看下有哪些还要测试的比如font-family、js载入优化的帖子，然后重新搭一个。 【bug】站内搜索第三次失败！！从头开始重新做了一个专案，简单3个post文件测试成功后。 1）又加入10个平时写的md文件，hexo g上传后搜索又炸了。。。。 2）把新加入的全部文档移走，搜索又能正常使用。确定是文章的问题。 3）问题出在多行代码块中的html代码上，多出了一个会隐藏的点*。很有可能是typora编辑器对代码的处理问题。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"bug-购物网6-1第四题 undefined method `update' for nil/NilClass","slug":"2 ror-tips:bug知识点/bug-购物网6-1第四题 undefined method `update' for nil:NilClass","date":"2017-11-30T01:15:00.000Z","updated":"2018-01-14T02:18:11.000Z","comments":true,"path":"posts/b36ae94d/","link":"","permalink":"http://yoursite.com/posts/b36ae94d/","excerpt":"","text":"12345678910NoMethodError in CartItemsController#updateundefined method `update&apos; for nil:NilClassExtracted source (around line #6): @cart = current_cart @cart_item = @cart.cart_items.find_by(product_id: params[:id]) @cart_item.update(cart_item_params) redirect_to :back end 分析：因为这里不是show/new/edit页面，而是/carts页面，购物车里有很多个cart_item，所以系统不知道我们要删除哪一个。看变量名都知道，这里是cart_items而不是类变量单数@cart_item——因此，在simple_form_for里要加入url，指明要删除的cart_item，这个url是表单要提交到的url地址，可以用show的url。解答：加入url: cart_item_path(cart_item.product_id)1234&lt;%= simple_form_for cart_item, url: cart_item_path(cart_item.product_id) do |f| %&gt; &lt;%= f.select :quantity, 1..cart_item.product.quantity %&gt; &lt;%= f.submit &quot;更新&quot;, data:&#123;disable_with:&quot;正在更新..&quot;&#125; %&gt; &lt;% end %&gt;","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网5-3 NameError/ uninitialized constant Product//ImageUploader","slug":"2 ror-tips:bug知识点/bug-购物网5-3 NameError: uninitialized constant Product::ImageUploader","date":"2017-11-29T20:30:00.000Z","updated":"2018-01-14T02:18:02.000Z","comments":true,"path":"posts/3abd616e/","link":"","permalink":"http://yoursite.com/posts/3abd616e/","excerpt":"","text":"NameError: uninitialized constant Product::ImageUploader错误：执行rails c，输入Product.last报错1234567891011121314151617181920 apple@apple ⮀ ~/rails/jdstore1130 ⮀ ⭠ test± ⮀ rails cRunning via Spring preloader in process 6299Loading development environment (Rails 5.0.6)2.3.1 :001 &gt; Product.lastNameError: uninitialized constant Product::ImageUploader from /Users/apple/rails/jdstore1130/app/models/product.rb:4:in `&lt;class:Product&gt;&apos; from /Users/apple/rails/jdstore1130/app/models/product.rb:1:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies/interlock.rb:12:in `block in loading&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/concurrency/share_lock.rb:150:in `exclusive&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/activesupport-5.0.6/lib/active_support/dependencies/interlock.rb:11:in `loading&apos; from (irb):1 from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console.rb:65:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/console_helper.rb:9:in `start&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:78:in `console&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands/commands_tasks.rb:49:in `run_command!&apos; from /Users/apple/.rvm/gems/ruby-2.3.1/gems/railties-5.0.6/lib/rails/commands.rb:18:in `&lt;top (required)&gt;&apos; from /Users/apple/rails/jdstore1130/bin/rails:9:in `&lt;top (required)&gt;&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from /Users/apple/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&apos; from -e:1:in `&lt;main&gt;&apos; 解决办法：因为CarrierWave在ORM (ActiveRecord)之前加载了，解决的方案是在environment.rb中加入require &#39;carrierwave/orm/activerecord&#39;重启下server后错误消失。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网4-4 nil is not a valid asset source","slug":"2 ror-tips:bug知识点/bug-购物网4-4 nil is not a valid asset source","date":"2017-11-29T18:40:00.000Z","updated":"2018-01-14T02:17:54.000Z","comments":true,"path":"posts/de723084/","link":"","permalink":"http://yoursite.com/posts/de723084/","excerpt":"","text":"原因：12345&lt;% if @product.image.present? %&gt; &lt;%= image_tag(@product.image.thumb.url, class:&quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt; admin后台设置了以上代码，如果新建商品没有上传图片，返回products的index页面时就会报错，因为它的代码如下： 12345&lt;% @products.each do |product| %&gt; &lt;%= link_to product_path(product) do %&gt; &lt;%= image_tag(product.image.thumb.url, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt;&lt;% end %&gt; 这里是直接拿@products做循环，遇到image的值为nil时就会报错。 解决办法：在products的index也加上这段代码12345&lt;% if @product.image.present? %&gt; &lt;%= image_tag(@product.image.thumb.url, class:&quot;thumbnail&quot;) %&gt; &lt;% else %&gt; &lt;%= image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class:&quot;thumbnail&quot;) %&gt; &lt;% end %&gt;","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网大类 No route matches {/action=>\"index\", /controller=>\"admin/resumes\"} missing required keys/ [/job_id]","slug":"2 ror-tips:bug知识点/bug-购物网大类 No route matches {:action=>\"index\", :controller=>\"admin:resumes\"} missing required keys: [:job_id]","date":"2017-11-28T20:20:00.000Z","updated":"2018-01-14T02:18:29.000Z","comments":true,"path":"posts/3e73ee3b/","link":"","permalink":"http://yoursite.com/posts/3e73ee3b/","excerpt":"","text":"ActionController::UrlGenerationError in Admin::Jobs#indexShowing /Users/apple/rails/job-listing1129/app/views/admin/jobs/index.html.erb where line #22 raised: No route matches {:action=&gt;”index”, :controller=&gt;”admin/resumes”} missing required keys: [:job_id] Extracted source (around line #22): 202122232425 &lt;%= link_to(job.title, admin_job_path(job)) %&gt; &lt;/td&gt; &lt;td&gt;&lt;%= link_to(job.resumes.count, admin_job_resumes_path) %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.wage_lower %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.wage_upper %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= job.contact %&gt;&lt;/td&gt; Rails.root: /Users/apple/rails/job-listing1129 原因：1、model里没有做关联2、model关联后，所有外键（比如简历resume里有user_id、job_id）要在controlller的create的action里给一个表达式，指明这份简历具体属于哪一个用户、具体属于哪一个职位的。比如12345def create @job = Job.find(params[:job_id]) @resume.job = @job @resume.user = current_userend 3、views的路径没有给参数，比如admin_job_resumes_path(@job)里的@job","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-=~是什么？","slug":"2 ror-tips:bug知识点/ror-tips-=~是什么?","date":"2017-11-27T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/99eb1fd3/","link":"","permalink":"http://yoursite.com/posts/99eb1fd3/","excerpt":"","text":"正则匹配符号，假如：s=”asdfasdfasd”，s=~/asd/匹配上返回起始位置0（即第一个字母的索引号，从0开始），s=~/sdf/匹配上返回起始位置1，没有匹配上返回nil","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-delete_all和destroy_all的区别","slug":"2 ror-tips:bug知识点/ror-tips-delete_all和destroy_all的区别","date":"2017-11-24T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/e4cee3cd/","link":"","permalink":"http://yoursite.com/posts/e4cee3cd/","excerpt":"","text":"delete_all和destroy_all的区别1、delete 是 sql 操作，直接在数据库执行 sql，不触发回调，直接删除不管其他。delete_all删除大量数据时速度更快些，但是危险的。所以，限制 delete 的方法是在 db 层面增加校验，而在 Rails（或 ActiveRecord） 里增加回调和 validates 保护数据。 2、destroy 是 model 操作，触发各种回调，在回调里也许做判定或其他事情，对于 Rails 来说是安全的删除方法。destroy不会删除model之间的关联，而delete会。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-招聘网10-3 按薪资下限排序不生效","slug":"2 ror-tips:bug知识点/bug-招聘网10-3 按薪资下限排序不生效","date":"2017-11-24T01:00:00.000Z","updated":"2018-01-14T02:18:56.000Z","comments":true,"path":"posts/d7488f13/","link":"","permalink":"http://yoursite.com/posts/d7488f13/","excerpt":"","text":"解法：不按教材的代码走，薪资上限wage_upper_bound栏位按降序排列即DESC，薪资下限wage_lower_bound ASC按升序排列即ASC。搞定！ 12345678910def index @jobs = case params[:order] when &apos;by_lower_bound&apos; Job.where(is_hidden: false).order(&apos;wage_lower_bound ASC&apos;) when &apos;by_upper_bound&apos; Job.where(is_hidden: false).order(&apos;wage_upper_bound DESC&apos;) else Job.where(is_hidden: false).recent endend","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网8-1 按生成订单按钮网址转到orders但页面不跳转（代码跟课程的一样）","slug":"2 ror-tips:bug知识点/bug-购物网8-1 按生成订单按钮网址转到orders但页面不跳转（代码跟课程的一样）","date":"2017-11-23T04:10:00.000Z","updated":"2018-01-14T02:18:19.000Z","comments":true,"path":"posts/ef2eddfe/","link":"","permalink":"http://yoursite.com/posts/ef2eddfe/","excerpt":"","text":"检查代码跟课程一样，按生成订单按钮网址转到orders但页面不跳转。 ——重新按教程贴一遍，没有发现差异，但是bug不见了。。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"tool-vps-科学上网-参考资料-搬瓦工Ubuntu16.04安装魔改版BBR","slug":"6 tool-xx工具/tool-vps-科学上网-参考资料-搬瓦工Ubuntu16.04安装魔改版BBR","date":"2017-11-23T03:30:00.000Z","updated":"2018-01-18T08:01:44.000Z","comments":true,"path":"posts/d0137a83/","link":"","permalink":"http://yoursite.com/posts/d0137a83/","excerpt":"","text":"搬瓦工Ubuntu16.04安装魔改版BBR点击主控制面板，先关机： 如果只是用来做梯子用，只推荐重装成Ubuntu 16.04 x86_64系统，不要问我为什么，CentOS对脚手架的速度优化并不友好（不能替换内核，不能一键BBR）~~ 重装完系统，记得把搬瓦工告诉你的新的SSH登录密码给记好，记事本存在本地就好，别忘了~~ 下面步骤请严格按照执行，对你肯定是有好处的，不要侥幸偷懒~~ SSH登陆无须赘述，想必这些都懂，你要是不懂，我也得给你讲清楚： 去百度软件中心，下载最新版Xshell http://rj.baidu.com/soft/detail/15201.html?ald 记住，别点“高速下载”，点“普通下载”就好了，要不然会附带百度全家桶~~ 一路安装，这个就没什么要说的了，然后，打开软件~~ Alt+O打开会话，点击“属性”： 以下是必填项： 用户名默认是root，密码是搬瓦工给你的： 设置完成，点击“确定”，再打开“会话”框，就可以连接了： 阅读本文前，必须掌握的快捷键： 在ssh中选中字符的操作和在Windows下是一样的，鼠标左键点住拖动即可，选中部分的底色会发生变化。 Linux的复制/粘贴命令快捷键和Windows下有所不同： Ctrl+Insert 从VPS里复制文字出来到你的电脑 Shift+Insert 把你电脑里的文字粘贴进入VPS里。 很明显，在我们的教程里，你用Shift+Insert这个快捷键的频率更高一些~~ vi /xxx/xxxx.xxx 这条命令是指打开某个文件并进行修改，打开后，可以按键盘上的“上下左右键”来移动光标。 如果你想输入或修改内容，请按键盘上的“Insert”键： 待里面内容修改完成后，我们在纯英文输入状态下，按键盘上的“Esc”键，在底部输入（下面那个冒号是英文，不是中文） :wq 按回车（Enter），更改生效。 如果你在编辑文件的时候，因为一些不可抗力意外推出了，因为Linux也有Swap（虚拟内存）机制，一些缓存在虚拟内存（也是由硬盘空间虚拟出来的）里的数据还没来得及刷新至硬盘空间里，所以系统会有以下提示： 无需纠结这些问题，按“E”键（Editanyway）继续编辑，并正常保存并退出即可。 如果发现自己输错了，要么按键盘上的退格（BackSpace）键删除，如果一次性输错（一般是因为粘贴错了）了太多，干脆按“Esc”键，再输入： :q! 按回车，所有更改不生效 下面正式进入部署环节：先更新一下软件安装源： apt-get update 如果你执意用Debian，Debian版本推荐搬瓦工里提供的这个镜像： 再次重申，千万别用CentOS+搬瓦工一键酸酸乳部署包，到时候防火长城会把你的裤子扒下来干你！ 再次重申，千万别用CentOS+搬瓦工一键酸酸乳部署包，到时候防火长城会把你的裤子扒下来干你！ 再次重申，千万别用CentOS+搬瓦工一键酸酸乳部署包，到时候防火长城会把你的裤子扒下来干你！ 用Debian的话，我推荐你安装Vim编辑器，你要是不选择装，到时候修改参数内容的时候够你喝一壶的： apt-get install vim vim-gnome -y Tips：据有些同学测试发现，经过搬瓦工后面板重装过后的Ubuntu 16.04系统，执行apt-get update命令后，会弹出以下提示： 错误主要集中在： E: Could not get lock/var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock theadministration directory (/var/lib/dpkg/), is another process using it? 这段错误的大致含义，是指由apt-get命令执行时，具有相关性的文件目录缓存出现了问题，故使apt命令置于锁定状态。 解决办法： 输入“reboot”，重启下机器，然后重新ssh连接试试。（重启包治百病） 如果发现还是不行，请使用以下命令，删除锁定文件： rm /var/lib/apt/lists/lock 然后继续删除缓存目录中的锁定文件： rm /var/lib/dpkg/lock 修复dpkg安装软件依赖关系： dpkg –configure –a 继续执行apt-get命令，就没有问题了。 如果你没有碰到过上面这个奇怪的问题，就不要执行这一步。 把系统内核更到最新，自带原版BBRwget –no-check-certificate -qO ‘BBR.sh’ ‘https://moeclub.org/attachment/LinuxShell/BBR.sh‘ &amp;&amp; chmod a+x BBR.sh 指定安装4.12.14内核版本，目前魔改版BBR不支持最新的4.13内核： bash BBR.sh -f v4.12.14 安装新内核后，系统会重新启动，重新连接即可 一键安装魔改版BBR（适配4.12.14并安装4.9版GCC，如果系统自带GCC版本高于此，则不会安装） wget –no-check-certificate -qO’BBR_POWERED.sh’ ‘https://moeclub.org/attachment/LinuxShell/BBR_POWERED.sh&#39;&amp;&amp; chmod a+x BBR_POWERED.sh &amp;&amp; bash BBR_POWERED.sh -f v4.12.14 安装SSR安装流程已简化，直接将以下命令复制并执行即可： wget –no-check-certificate -O shadowsocksRR.sh https://git.io/vdMUr &amp;&amp; chmod +x shadowsocksRR.sh &amp;&amp;./shadowsocksRR.sh 2&gt;&amp;1 | tee shadowsocksR.log 目前经过测试，以下几个端口算是“良民”，可长期设置使用： 20、21、22、80、115、152、443、989、990、992、3306、3389（带红色的极力推荐） 协议推荐auth_chain_b（如果你不用任何iOS和Mac OS设备，我推荐你用auth_chain_d） 加密推荐chacha20-ietf 混淆推荐：tls1.2_ticket_auth 确认无误后，按回车键继续安装，如果发现自己有某个选项选错了，请按Ctrl+C取消安装流程，并重新执行刚才的步骤。 看到形如下面这张图里附带的红底白字图样，就说明安装成功啦~~ 安装后，进行一些优化，加快访问速度：ulimit优化输入 ulimit -n 51200 &amp;&amp; echo ulimit -n 51200&gt;&gt; /etc/rc.local 回车（加大ulimit数值并加入开机启动） limits优化输入echo “ soft nofile 51200” &gt;&gt;/etc/security/limits.conf回车输入echo “ hard nofile 51200” &gt;&gt; /etc/security/limits.conf回车 然后优化一下BBR算法： 首先看一下VPS现有算法： sysctl net.ipv4.tcp_available_congestion_control 如果不带hybla字样，需要开启hybla算法： /sbin/modprobe tcp_hybla 带了hybla字样，说明安装成功 开始修改sysctl.conf文件： vi /etc/sysctl.conf 按键盘上的Page Down键浏览这个文件的最后部分，直接粘贴以下： #TCP optimization fs.file-max = 51200 #Increase transmission limits net.core.rmem_max =67108864 net.core.wmem_max =67108864 net.core.netdev_max_backlog= 250000 net.core.somaxconn = 4096 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_tw_recycle = 0 net.ipv4.tcp_fin_timeout =30 net.ipv4.tcp_keepalive_time= 1200 net.ipv4.ip_local_port_range= 10000 65000 net.ipv4.tcp_max_syn_backlog= 8192 net.ipv4.tcp_max_tw_buckets= 5000 net.ipv4.tcp_fastopen = 3 net.ipv4.tcp_mem = 2560051200 102400 net.ipv4.tcp_rmem = 409687380 67108864 net.ipv4.tcp_wmem = 409665536 67108864 net.ipv4.tcp_mtu_probing =1 net.ipv4.tcp_congestion_control= hybla #END OF LINE 示例： 更改完成，按“Esc”键，再输入 :wq 退出（:wq命令一定是英文的冒号哟，不是中文的）。 输入以下命令，保存生效： sysctl -p 重启SSR /etc/init.d/shadowsocksrestart 维护服务器/SSR：安全加固修改端口： vi /etc/ssh/sshd_config 修改Port 值，为自己需要的端口。 “Esc”退出、“:wq”保存生效 修改系统时间：虽然SSR的auth_chain_b协议允许客户端和服务器端的时间差不超过1天（用于身份、加密、连接有效性校验），但我还是强烈推荐你将VPS上的时间设置成你所在的时区（一般都是将国外时区的VPS设置成国内时区）： 输入： dpkg-reconfigure tzdata 选择“Asia”（亚洲）： “↓”键按住不动，选择“Shanghai”（上海），我也不知道为啥没有“Beijing”（北京） Local time is now 显示的是本机当前时间： 安装fail2ban，自动ban掉反复试密码的，防止被破解安装fail2ban apt-get install fail2ban -y 重启： service fail2ban restart 乱入一张网速测试： TCP、UDP优化对应的产品和一句话原理： 其实SSR也没什么好维护的，无非就是重启、更换密码/协议，下面就来简单说一下： 重启： /etc/init.d/shadowsocksrestart 根据auth_chain_b协议的特性，定期更换密码，即可以有效有效防止自己的流量特征被qiang识别，下面就来说明一下更改SSR配置文件的命令： vi /etc/shadowsocks.json 若其他配置没有发生异常，请勿随意更改，仅更改password项即可： 一点小提示：你可以用随机生成的乱序密码先保存在本地txt文档里，再把它直接复制到ssh里，这样方便一些： 按“Insert”键输入： 先删除整行，再按“Shift+Insert”键粘贴即可。 更改完成，按“Esc”键，再输入 :wq 更改生效 再次重启SSR服务，本地客户端的密码也要随之改变才行。 如果是在ssh里，重启整个VPS系统，用这个命令即可： reboot 以下是我自用的混淆参数，复制下来填写到你客户端的混淆参数里即可： az813057.vo.msecnd.net,az817829.vo.msecnd.net,media.gettyimages.com,origin.cdn77.com,mail.yandex.com,mc.yandex.ru,upics.yandex.net,tns-counter.ru,yastatic.net,captcha.yahoo.co.jp,b6.yahoo.co.jp,s.yimg.com,s2.yimg.com,s3.yimg.com,s.yimg.jp,search.yahoo.com,csc.beap.bc.yahoo.com,yrtas.btrll.com,shim.btyll.com,comet.yahoo.com,downloads.yahoo.com,hk.mail.yahoo.com,pr.comet.yahoo.com,geo.yahoo.com,ucs.query.yahoo.com,clientlog.portal.office.com,outlook.live.com,cdn.optimizely.com,spoprod-a.akamaihd.net,spoprod-c.akamaihd.net,icloud.cdn-apple.com,icloud.com,edge.icloud.com,p12-contacts.icloud.com,support.icloud.com,beta.icloud.com,icloud-beta.icloud.com,appleid.apple.com,apple.co,cdn.apple-cloudkit.com,cdn.apple-livephotoskit.com,webcourier.push.apple.com,images.apple.com,securemetrics.apple.com,secure-appldnld.apple.com,lotte.com,image.lotte.com,pathfinder.lotte.com,static.criteo.net,rt.buzzni.com,inpref-asia.s1.amazonaws.com,inpref-asia.s2.amazonaws.com,inpref-asia.s2.amazonaws.com,hsmoa.com,asia.frosmo.com,maxcdn.bootstrapcdn.com,b97.yahoo.co.jp,users.storage.live.com,clientlog.portal.office.com,r4.res.office365.com,swx.cdn.skype.com,a.config.skype.com,b.config.skype.com,emailcufeeducn-my.sharepoint.com,cloudflare.com,cn.bing.com,s1.cn.bing.com,s2.cn.bing.com,s3.cn.bing.com,s4.cn.bing.com,tse1.mm.bing.net,tse2.mm.bing.net,tse3.mm.bing.net,apps.bdimg.com,akamaitechnologies.com,akamai.com,maxcdn.com,cloudfront.net,jsdelivr.net,cloudfront.com,qiniucdn.com,yahoo.com,51cdn.com,lxdns.com,upaiyun.com,qcloud.com,alicdn.com,aliyun.com,qingcloud.com,incapdns.net,azureedge.net 相关资源：SSR Windows版4.8.1下载链接： https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.8.1/ShadowsocksR-win-4.8.1.zip SSR 安卓3.5.1.1版下载链接： https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.1.1/shadowsocksr-android-3.5.1.1.apk SSR Mac电脑版下载链接： https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.3-R8-build2/ShadowsocksX-NG-R8.dmg SSR iOS版，需要更换你的Apple ID到美区，教程： https://zhuanlan.zhihu.com/p/28625807 如何购买、使用iOS上的小火箭（shadowrocket）呢？这个坑我再想着慢慢填~~","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"科学上网","slug":"科学上网","permalink":"http://yoursite.com/tags/科学上网/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-vps-科学上网-参考资料-搬瓦工vps","slug":"6 tool-xx工具/tool-vps-科学上网-参考资料-搬瓦工vps","date":"2017-11-23T03:10:00.000Z","updated":"2018-01-18T08:01:57.000Z","comments":true,"path":"posts/7d9ea51f/","link":"","permalink":"http://yoursite.com/posts/7d9ea51f/","excerpt":"","text":"背景和工具介绍 非技术出身，不懂 Linux、SS、SSR MacOs系统 搬瓦工 VPS ShadowsocksR ip111用于测试vpn状态 Test your IP 1. 明确需求，做出选择 VPS 服务商选搬瓦工、Vultr 还是 Linode？ 服务器地址选香港、日本、美国还是韩国、俄罗斯等国家？ VPS 的框架选 Openvz、KVM 还是 XEN 框架？ 服务器系统选 CentOS、Debian 还是 Ubuntu？ 加速选锐速、TCP BBR、Final Speed 还是 Google BBR？ 用 SS 还是 SSR？ 我的选择依次为搬瓦工、美国洛杉矶、KVM、CentOS-6-x86_64-bbr、SSR。 因为搬瓦工是公认的性价比高，而且搬瓦工的教程最多、最齐全，我没有专人指导，最好找资料丰富的方式。 我选择的套餐就是洛杉矶机房的，因为之前的 SS 用下来，我发现洛杉矶机房的速度最快，延迟最少、最稳定，我自己也不喜欢切换来切换去，直接锁定洛杉矶就行了。 至于 Openvz、KVM、XEN 的选择很简单。我看过一篇教程帖，知道了 Openvz 是被淘汰的选择，现在主流就是 KVM，它内置了 BBR 内核优化，访问速度会比 Openvz 好很多。 Shadowsocks 和 ShadowsocksR 的选择，我毫不犹豫选了后者。一方面是我之前的 VPN 服务商发了一封通告告诉大家要强制换用 SSR 让我了解到 SSR 更加密（加入了混淆算法），后来又搜到了不少谈论它们两者区别的文章，让我下定决心使用 SSR。另外，之前 SS 换 SSR 的时候，我就已经找到了 SSR 的安装包，这就省了很多时间。 2. 购买 VPS搬瓦工 Special 20G KVM-洛杉矶-中国直连，可更换机房，内存 1024 MB，20G SSD，月流量 2000 GB，年付 39.99 美元，使用优惠码 BWH1ZBPVK，后 37.59 美元一年，支付宝付款。 3. 配置服务器4. 上网测试ShadowsocksRWindows 下载地址 SS SSR-4.7.0 ShadowsocksR 分为 dotnet 2.0 和 4.0，实际功能无区别，只是电脑安装 .NET Framework v2.0 或 4.0 的支持库版本不同。一般 Win7 以后都默认安装了 v2.0；Win8 以后都默认安装了 2.0 和 4.0，只有 XP 系统两个都默认没有安装，需要手动安装支持库。 Android 下载地址 SS SSR-3.4.0.5 Mac 下载地址 ShadowsocksX-NG-R electron-ssr iOS 下载地址 Wingy Shadowrocket 我的不足（我没弄明白的地方） 我不知道最终生效是因为我成功登陆了 putty 还是在服务器中安装了 OpenVPN 服务？ 我不知道直接在服务器中一键安装 SSR 服务，跟我用 putty 手动安装有多大差别？ 服务器的 SS 和 SSR 服务都安装了，会不会有冲突，能否同时用呢？（虽然都安装了，但我只用 SSR，并没有同时开启 SS 和 SSR） 我不知道目前的状态需不需要再做多用户配置？ 我不知道需不需要加一段代码，让服务器自动启动？（目前是可以的，所有账户都不需要做另外的操作，打开 SSR 就能成功翻墙） 我的 Windows 系统有 SS 和 SSR 之分，可是 MAC 端只有 ShadowsocksX-R，不知道会不会有问题？（MAC 端的 ShadowsocksX-R 需要用全局模式才能上 Pixiv 站，PAC 模式能上 Google 和 Youtube） 不知道 ShadowsocksR 开发者是否会持续维护？ SSR 服务端加密方式 chacha20 和 aes-256-cfb 有多大区别，编译安装 libsodium？ IPv6 有必要开启嘛，KVM 系统不支持 IPv6？ 总结经验 优先看官方文档，官方论坛，尽快补全基本知识 一些小众的问题需要单独搜索，也多开几个页面互相补充知识 很多教程受限于时间，其实后来有更好的解决办法 根据自己的需求去做决定，不要盲目跟随别人的选择 有些选择很纠结，但你做完前面所有操作之后，你可能会发现它已经不成问题了 遇到问题的时候，不要蛮干，实在做不好就先放松心情，等会继续 一定会有人遇到跟你一样的问题，搜不到解决方法的时候换一个检索词 你解决了一个问题时，不妨输出成文章，兴许能帮助到其他人 写教程的时候，不仅要写 What 和 How，也要写上 Why，还有参考资料，能帮别人省很多事 参考网站总网站 Shadowsocks 的衍生版本下载镜像、Shadowsocks 官方网站下载地址 ShadowsocksR 各版本下载地址 ShadowsocksR 开发者-BreakWa11 的个人博客 ShadowsocksR 在 Google+ 的社群 单篇教程 关于 Shadowsocks 的小白常见问题 总结篇 ShadowsocksR 客户端 小白使用教程 新手用户搬瓦工 VPS 购买图文指导教程 BandwagonHost搬瓦工VPS主机教程-KiwiVM面板应用 搬瓦工搭建 Shadowsocks 并优化速度 使用搬瓦工bandwagonhost VPS安装Shadowsocks Server 大陆翻墙新秘技教学，无 VPN 照上 Facebook，ShadowsocksR 全攻略 （这里面有介绍 SS 和 SSR 的区别） ShadowsocksR 单端口多用户配置方法 Shadowsocks Configure Multiple Users putty 与 xshel l及 winscp 初级使用方法 Linux SSH 链接工具 Putty 新手详细使用教程 LinuxVPS 基本命令","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"科学上网","slug":"科学上网","permalink":"http://yoursite.com/tags/科学上网/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"bug-购物车8-1 checkout页面一刷新，就出了报错，显示：“The Action 'show' could not be found for CartsController\"","slug":"2 ror-tips:bug知识点/bug-购物车8-1 checkout页面一刷新，就出了报错，显示：“The Action 'show' could not be found for CartsController\"","date":"2017-11-23T02:15:00.000Z","updated":"2018-01-14T02:17:36.000Z","comments":true,"path":"posts/3d6294/","link":"","permalink":"http://yoursite.com/posts/3d6294/","excerpt":"","text":"问题：checkout页面一刷新就出了报错，显示：“The Action ‘show’ could not be found for CartsController”。且只在chrome存在，在safari试验时正常，会跳出一个弹窗询问“是否要重新发送表单”。助教的解答：助教有这么几种看法：1. checkout定义的是post的路径，所以第一次进去的时候是可以的。第二次刷新过后，浏览器变成了get的请求，get请求会自动去找show action，所以会报错。查看sever log，用chrome测试发现刷新后请求编程get，用safari测试刷新了还是post。2、chrome清楚缓存和cookie还是不行。3、又下载了QQ浏览器发现没有这个问题。 ——可能是浏览器问题，先跳过","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网4-3 localhost 将您重定向的次数过多","slug":"2 ror-tips:bug知识点/bug-购物网4-3 localhost 将您重定向的次数过多","date":"2017-11-23T00:10:00.000Z","updated":"2018-01-14T02:17:42.000Z","comments":true,"path":"posts/936990c3/","link":"","permalink":"http://yoursite.com/posts/936990c3/","excerpt":"","text":"删除cookie没用，删除redirect_to root_path有效123456def admin_required if !current_user.admin? redirect_to root_path flash[:alert] = &quot;请用管理员账号登录&quot; endend 代码里的redirect_to root_path，和路由里的root &quot;admin/products#index&quot;冲突，导致网页无限循环重定向。解决办法：修改主页如root &quot;welcome#index&quot;","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-购物网4-4 carrierwave上传图片translation missing- en.errors.messages.mini_magick_processing_error","slug":"2 ror-tips:bug知识点/bug-购物网4-4 carrierwave上传图片translation missing- en.errors.messages.mini_magick_processing_error","date":"2017-11-21T17:10:00.000Z","updated":"2018-01-14T02:17:47.000Z","comments":true,"path":"posts/5082df0b/","link":"","permalink":"http://yoursite.com/posts/5082df0b/","excerpt":"","text":"JDSTORE4-3，carrierwave和minimagic设置后，上传图片报错 translation missing: en.errors.messages.mini_magick_processing_error 一、新的解法输入brew install imagemagick，会提示gem已安装是否要更新。 输入brew upgrade imagemagick，更新完成，然后bundle搞定。 二、旧的解法（仍有bug）原因：网上goolge，有的是说初始化问题，可以尝试重装。但是自己重新无效临时解决办法：在config/initializers下新建一个文件carrierwave.rb，然后写入代码，最后重开rails s123456CarrierWave.configure do |config| config.storage = :file config.enable_processing = false config.fog_attributes = &#123;&apos;Cache-Control&apos;=&gt;&apos;max-age=315576000&apos;&#125; config.cache_dir = Rails.root.join(&apos;tmp&apos;, &apos;uploads&apos;) end 新问题：上传的图片是原始大小","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-cp config/database.yml.example config/database 是什么？","slug":"2 ror-tips:bug知识点/ror-tips-cp config:database.yml.example config:database 是什么？","date":"2017-11-20T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/a72a0756/","link":"","permalink":"http://yoursite.com/posts/a72a0756/","excerpt":"","text":"config/database.yml文件今天在练习job-listing时，从github上fork专案后，直接运行rails s，在localhost:3000上发生报错： 图中信息提示，没有文件config/database.yml文件 这是因为我们一般要保护config/database.yml文件，因此在上传到github之前会创建一个config/database.yml.example文件用来代替config/database.yml文件但是它不是真正的config/database.yml文件 因此，如果想保证专案能正常运行，需要建立一个config/database.yml文件，并将config/database.yml.example文件内容复制过去 所以需要运行命令 cp config/database.yml.example config/database.yml","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"tool-atom-atom技巧及常用packages","slug":"6 tool-xx工具/tool-atom-atom技巧及常用packages","date":"2017-11-19T16:10:00.000Z","updated":"2018-01-14T05:57:06.000Z","comments":true,"path":"posts/c5bd9801/","link":"","permalink":"http://yoursite.com/posts/c5bd9801/","excerpt":"","text":"atom终端快速删除命令小技巧有时候在linux终端中执行某个命令时，往往会输错命令，想删除掉重敲可以按backspace键，但这样较慢，一种简便技巧是，按住esc键同时按backspace键会较快删除【esc+backspace】组合键。或者【ctrl+u】组合键 install常用的packagesdash收集了各种官方文档供我们查询。 在atom中选中要查的语句然后ctrl+h，会跳出dash的查询结构。 emmet可以自动补全那些烦琐的标签头尾，然后自动把光标跳到中间。 1试试.row然后按`tab 1试试div&gt;div&gt;h2+(table&gt;(thead&gt;tr&gt;th*6)+(tbody&gt;tr&gt;td*6))+br+div+hr+div然后按`tab 1试试.container&gt;tbody&gt;thead&gt;tr&gt;td*5 1试试a.dropdown.dropdown-toggle[data-toggle=&quot;dropdown&quot;]#my.dropdown 1、修改快捷键 &quot;%%&quot;: &quot;&lt;%= | %&gt;&quot;, &quot;%&quot;: &quot;&lt;% | %&gt;&quot;, 2、替换注释功能，解决atom和emmet冲突 3、更多请看看这个图表：https://docs.emmet.io/cheat-sheet/ minimap可以查看整个代码页面位置（相当于小地图） 常用快捷键快速打开指定文件command+t或command+p ，然后进行模糊搜索，比如/app/views/admin/orders/index.html.erb只要输入ad or in即可快速定位文件。 进入Settingscommand+, 多用⌘+return,作用：无论你的光标在什么位置，快速在下面切入新的一行。 多用⌘+shift+return,作用：无论光标位置，快速在上方切入新的一行。 commond+d,可以选中相同字符位置（需多次），批量编辑。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"常用","slug":"常用","permalink":"http://yoursite.com/tags/常用/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-system-购物网","slug":"1 ror-system系统/ror-system-购物网","date":"2017-11-19T16:10:00.000Z","updated":"2018-01-14T04:43:01.000Z","comments":true,"path":"posts/218e855f/","link":"","permalink":"http://yoursite.com/posts/218e855f/","excerpt":"","text":"atom设置快捷键lt、ltp、ltd表示，&lt;%= link_to(“XXXX”, XXXX_path, class:”btn btn-danger btn-lg pull-right”, method: :post) %&gt; tb表示，table.table.table-bordered&gt;(thead&gt;tr&gt;th3)+(tbody&gt;tr&gt;td3) sf表示，&lt;%= simple_form_for @xx do |f| %&gt;&lt;% end %&gt; 记住：controller中定义action都是按照find_and_do的思路。一再遇到的 bug1、gem ‘carrierwave’加上gem ‘mini_magick’后，上传图片的时候报错上传不了。 解决办法：更新brew upgrade imagemagick，然后bundle 2、cart.add_product_to_cart(product)在rails c测试时，product = Product.last把小写的product写成大写，折腾半天。 3、current_cart的定义，@current_cart ||= find_cart错写成@current_cart || find_cart，另外if cart.blank?错写成if current_cart.blank? 4、6-1第四题，update会报错，是因为simple_form_for里要指明url，系统才能知道我们具体要删除哪一个cart_item，因为这里不是show页面。 5、8-1checkout结算页在chrome浏览器里刷新，会跳出缺少order的show action的bug。换个浏览器就好了。 6、最常出现No route matches {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;admin/resumes&quot;} missing required keys: [:job_id]。原因如下： 1、Model层，model里没有做关联 2、Controller层，model关联后，所有外键（比如简历resume里有user_id、job_id）要在controlller的create的action里给一个表达式，指明这份简历具体属于哪一个用户、具体属于哪一个职位的。比如 123456app/controllers/resumes_controller.rb def create @job = Job.find(params[:job_id]) @resume.job = @job @resume.user = current_user end 3、Views层，路径没有给参数，比如admin_job_resumes_path(@job)里的@job 一、简单版4、后台4.1、基础建设4.1.1 fork、或新建专案 https://github.com/quanzhanying/jdstore 4.1.2 gem ‘bootstrap-sass’ css html flashes+js app/views/common/_flashes.html.erb 12345678&lt;% if flash.any? %&gt; &lt;% user_facing_flashes.each do |key, value| %&gt; &lt;div class=&quot;alert alert-dismissable alert-&lt;%= flash_class(key) %&gt;&quot;&gt; &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt; &lt;%= value %&gt; &lt;/div&gt; &lt;% end %&gt;&lt;% end %&gt; app/helpers/flashes_helper.rb 1234567891011module FlashesHelper FLASH_CLASSES = &#123; alert: &quot;danger&quot;, notice: &quot;success&quot;, warning: &quot;warning&quot;&#125;.freeze def flash_class(key) FLASH_CLASSES.fetch key.to_sym, key end def user_facing_flashes flash.to_hash.slice &quot;alert&quot;, &quot;notice&quot;,&quot;warning&quot; endend 4.1.3 gem ‘devise’ 注册、登录、退出 4.1.4 gem ‘simple_form’ 4.1.5 gem ‘font-awesome-rails’ 4.2、上架后台CRUD 使用者必须要是 admin 才能登入 http://localhost:3000/admin/products 商品栏位必须要有 title, description, quantity, price admin 后台 products 完整的 CRUD 4.3、admin 可以登录后台 管理者（商家）必须先登录网站才能进入（商店）后台 管理者必须有 admin 权限才能进入后台 后台用layout ‘admin’自定义页面样式 4.4、上传图片 可以上传图片、且是剪切过的图片（gem ‘carrierwave’、gem ‘mini_magick’） 图片文件夹加入.gitignore中 设定 localhost:3000 为商品首页 商品index、show展示 重构后台各个views，加入图片 5、购物车实做5.2 Step 1 : 建立加入购物车的 action 先做按钮和flashes 5.3 Step 2: 购物车设计 Part 1 cart、cart_item、product 实作add_product_to_cart(@product) rails c 下测试功能 5.4 Step 3: 购物车设计 Part 2 显示购物车内物品数量 实作current_cart rails c下测试功能 5.5 Step 4 : 显示购物车明细 carts的index 5.6 Step 5 : 计算总价 先在views里做，测试ok后重构到helper和model中 6、购物车实做（解答）6.1 购物车练习作业 （解答） 请设计一个功能，可以一键清空购物车内所有的商品 某商品突然不想买了，我可以在购物车内删除它 已经加入购物车的商品，不能重复被加入 可以更改购物车内购买的商品数量(原本预设数量都是1) 库存为 0 的商品不能购买 在购物车新增数量时，不能更新超过原有库存的商品数量 8、订单实做8.1 Step 1 : 建立结帐页 按下「确认结帐」按钮后，可以显示结帐明细order页，并且可以让消费者输入寄送地址 8.2 Step 2 : 建立购买明细 有时候商品会下架、价格会变，新建product_list的model 订单create时的购买明细缓存 购买明细show页面 8.3 Step 3 : 将网址改为秘密 token 9、订单实做（解答）9.1 订单练习作业（解答） 使用者可以在 /account/orders/ 看到过去所有订单 使用者在下拉式选单可以看到过去所有的订单 订单排序 10、支付订单与寄信10.1 Step 1 : 消费者可以针对订单付款 使用 is_paid（boolean 属性）判断是否已付费 使用 payment_method 判断，实际付款渠道为：微信、支付宝 已付款过的订单不可以再付 10.2 Step 2 : 寄送订单确认通知信 使用者在下单后会收到一封订单确认信，rails g mailer OrderMailer gem ‘letter_opener’，并在console下测试信件预览 在订单建立时寄通知信 11、后台出货订单操作11.1 情境和 Model 准备效果：「有限状态机」这个架构去做后台订单切换状态。 已下订（order_placed） 已付款（paid） 卖家发货中（shipping） 已交货（shipped） 取消订单（order_cancelled） 退货（good_returned） 11.2 订单状态切换 建立 admin/orders 可以看到系统内所有订单 admin 的 order 列表应要能显示订单状态 使用者可以“申请取消订单” 使用者“申请取消订单”后，管理员应该要收到“申请通知信” 后台管理员可以“取消订单”、“出货” 后台管理“出货”后，系统应该寄出通知信 后台管理员“取消订单”后，系统应该寄出通知信 12、部署到 Heroku （七牛云）12.1 本章学习指南12.2 一些安全概念 (本节只需要看，不需要实作)12.3 使用七牛云（用来存储图片）12.4 使用 Figaro 管理密码12.5 将JDStore部署到Heroku12.6 JDStore 商店创意大赛（第二季）参赛指南12.7 使用SendCloud服务发送邮件12.8 Rails 环境架构12.9 如何在 Heroku 上 Debug13-部署到 Heroku (海外用户方案)13.1 本章部属指南13.2 申请AWS S3（用来储存图片）13.3 使用 Figaro 管理密码13.4 将JDStore部署到Heroku13.5 泄漏 S3 密钥的处理方式二、提示版4、后台4.1、基础建设4.1.1 fork、或新建专案 方法一：for专案网址 https://github.com/quanzhanying/jdstore 1234567git clone https://github.com/quanzhanying/jdstore.git rails/jdstore004 cd rails/jdstore004cp config/database.yml.example config/database.ymlbundle checkbundle installgit checkout -b testrails s 方法二：新建专案 123rails new rails/jdstore1201git initrails s 4.1.2 gem ‘bootstrap-sass’ css mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss 1234app/assets/stylesheets/application.scss@import &quot;bootstrap-sprockets&quot;;@import &quot;bootstrap&quot;; html rails g controller welcome，新建index并设置为首页 footer 1234567&lt;footer class=&quot;container&quot; style=&quot;margin-top: 100px;&quot;&gt; &lt;p class=&quot;text-center&quot;&gt; Copyright ©2017 JDStore &lt;br&gt; Design by yourname &lt;/p&gt;&lt;/footer&gt; 增加_navbar.html.erb、_footer.html.erb、_flashes.htm.erb，设置全局html 12345678910app/views/layouts/application.html.erb &lt;body&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;%= render &quot;common/navbar&quot; %&gt; &lt;%= render &quot;common/flashes&quot; %&gt; &lt;%= yield %&gt; &lt;/div&gt; &lt;%= render &quot;common/footer&quot; %&gt; &lt;/body&gt; flashes+js js加入//= require bootstrap/alert app/views/common/_flashes.html.erb 12345678&lt;% if flash.any? %&gt; &lt;% user_facing_flashes.each do |key, value| %&gt; &lt;div class=&quot;alert alert-dismissable alert-&lt;%= flash_class(key) %&gt;&quot;&gt; &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt; &lt;%= value %&gt; &lt;/div&gt; &lt;% end %&gt;&lt;% end %&gt; app/helpers/flashes_helper.rb 1234567891011module FlashesHelper FLASH_CLASSES = &#123; alert: &quot;danger&quot;, notice: &quot;success&quot;, warning: &quot;warning&quot;&#125;.freeze def flash_class(key) FLASH_CLASSES.fetch key.to_sym, key end def user_facing_flashes flash.to_hash.slice &quot;alert&quot;, &quot;notice&quot;,&quot;warning&quot; endend 在welcome的index测试flashes 4.1.3 gem ‘devise’ 安装devise 1234gem &apos;devise&apos;rails g devise:installrails g devise userrake db:migrate 注册、登录、退出 12345678910111213141516app/views/common/_navbar.html.erb- &lt;li&gt; &lt;%= link_to(&quot;登入&quot;, &apos;#&apos;) %&gt; &lt;/li&gt;+ &lt;% if !current_user %&gt;+ &lt;li&gt;&lt;%= link_to(&quot;注册&quot;, new_user_registration_path) %&gt; &lt;/li&gt;+ &lt;li&gt;&lt;%= link_to(&quot;登入&quot;, new_user_session_path) %&gt;&lt;/li&gt;+ &lt;% else %&gt;+ &lt;li class=&quot;dropdown&quot;&gt;+ &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;+ Hi!, &lt;%= current_user.email %&gt;+ &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;+ &lt;/a&gt;+ &lt;ul class=&quot;dropdown-menu&quot;&gt;+ &lt;li&gt; &lt;%= link_to(&quot;登出&quot;, destroy_user_session_path, method: :delete) %&gt; &lt;/li&gt;+ &lt;/ul&gt;+ &lt;/li&gt;+ &lt;% end %&gt; js加入//= require bootstrap/dropdown 4.1.4 gem ‘simple_form’ 12gem &apos;simple_form&apos;rails generate simple_form:install --bootstrap 4.1.5 gem ‘font-awesome-rails’ 1gem &apos;font-awesome-rails&apos; 1@import &quot;font-awesome&quot;; 123&lt;%= link_to(content_tag(:i, &apos;登入&apos;, class: &apos;fa fa-sign-in&apos;), new_user_session_path) %&gt;&lt;%= link_to(content_tag(:i, &apos;登出&apos;, class: &apos;fa fa-sign-out&apos;), destroy_user_session_path, method: :delete) %&gt; 4.2、上架后台CRUD 使用者必须要是 admin 才能登入 http://localhost:3000/admin/products 商品栏位必须要有 title, description, quantity, price admin 后台 products 完整的 CRUD 1、R：admin::products 2、M：想到views里会用到栏位title/description/quantity/price ​ 3、C：new和create 4、V：new页面，最简单的就好 ​ 5、C：index 6、V：index页面，最简单一个栏位就好 ​ 7、C：edit和update，顺便把destroy加上 8、V：edite页面 4.3、admin 可以登录后台 管理者（商家）必须先登录网站才能进入（商店）后台 管理者必须有 admin 权限才能进入后台 后台用layout ‘admin’自定义页面样式 1、before_action :authenticate_user!、before_action :admin_required 2、C：def admin_required 3、M：def admin? 4、栏位：add_is_admin_to_user，boolean 5、 12345678910db/seeds.rbu = User.newu.email = &quot;admin@test.com&quot; # 可以改成自己的 emailu.password = &quot;111111&quot; # 最少要六码u.password_confirmation = &quot;111111&quot; # 最少要六码u.is_admin = trueu.save ​ 6、C：layout “admin” 7、V：app/views/layouts/admin.html.erb 4.4、上传图片 可以上传图片、且是剪切过的图片（gem ‘carrierwave’、gem ‘mini_magick’） 图片文件夹加入.gitignore中 设定 localhost:3000 为商品首页 商品index、show展示 重构后台各个views，加入图片 1、 12gem &apos;carrierwave&apos;gem &apos;mini_magick&apos; rails g uploader image 2、栏位：add_image_to_product 3、 1234app/models/product.rbclass Product &lt; ApplicationRecord+ mount_uploader :image, ImageUploaderend 4、 12345678910include CarrierWave::MiniMagick+ process resize_to_fit: [800, 800]+ version :thumb do+ process resize_to_fill: [200,200]+ end+ version :medium do+ process resize_to_fill: [400,400]+ end 5、C：params中加入image栏位 6、V：new表单加入上传图片&lt;%= f.input :image, as: :file %&gt; 7、V：edit表单加入现有图片&lt;% if @product.image.present? %&gt;，以及上传图片&lt;%= image_tag(@product.image.thumb.url) %&gt; 8、public/uploads加入.gitignore ​ 9、C：product的index 10、V：index页面，并修改首页路径。页面显示图片、标题、价格，当没有图片是用http://placehold.it/200x200&amp;text=No Pic ​ 11、C：show 12、V：show页面&lt;%= image_tag(@product.image.medium.url) %&gt;，当没有图片是用http://placehold.it/400x400&amp;text=No Pic ​ 13、前后台navbar加入product 14、美化后台product的index页面如下： 5、购物车实做5.2 Step 1 : 建立加入购物车的 action 先做按钮和flashes 1、R：路由add_to_cart 2、V：按钮及路径 3、C：先做find_and_do的find，直接返回redirect_to :back 5.3 Step 2: 购物车设计 Part 1 cart、cart_item、product 实作add_product_to_cart(@product) rails c 下测试功能 效果：current_cart.add_product_to_cart(@product) 1、M：新增cart和cart_item，并设置两者的关联 2、栏位：cart_item加入cart_id、product_id、quantity, default: 1 3、M：cart中定义add_product_to_cart(product) 123456+ def add_product_to_cart(product)+ ci = cart_items.build+ ci.product = product+ ci.quantity = 1+ ci.save+ end 4、rails c中测试可否执行add_product_to_cart(product)，如下： 12345Cart.createcart = Cart.firstcart.add_product_to_cart(product)cart.cart_itemsexit 5.4 Step 3: 购物车设计 Part 2 显示购物车内物品数量 实作current_cart rails c下测试功能 效果：我们的目的是为了每个进店的客户（不管是否有登入，都准备一台购物车）。然后消费者随时可以察看购物车的产品数量。 1、V：显示车的icon，显示车的数量&lt;%= current_cart.products.count %&gt; 2、C：定义current_cart 123456789101112131415161718app/controllers/application_controller.rb+ helper_method :current_cart+ def current_cart+ @current_cart ||= find_cart+ end+ private+ def find_cart+ cart = Cart.find_by(id: session[:cart_id])+ if cart.blank?+ cart = Cart.create+ end+ session[:cart_id] = cart.id+ return cart+ endend 3、C：补齐add_to_cart的定义，即current_cart.add_product_to_cart(@product) 5.5 Step 4 : 显示购物车明细 carts的index 1、R：路由加入carts 2、V：navbar的购物车按钮及链接 3、V：index页面 注意：为什么这里不用在controller里定义index？？——因为没有用到@carts，不用拿它来做@carts.each do |cart|。 5.6 Step 5 : 计算总价 先在views里做，测试ok后重构到helper和model中 1、V：测试运算&lt;% sum = sum + cart_item.quantity * cart_item.product.price %&gt; 2、helper：把步骤1的逻辑重构helper，测试运算。 3、M：用def total_price，把步骤2的运算重构到model中 6、购物车实做（解答）6.1 购物车练习作业 （解答） 请设计一个功能，可以一键清空购物车内所有的商品 1、R：路由collection，clean 2、V：按钮加入路径 3、C：定义clean，出现clean！ 4、M：定义clean!，用cart_items**.destroy_all 某商品突然不想买了，我可以在购物车内删除它 1、R：路由cart_item 2、V：按钮加入路径 3、C：cart_item里定义destroy 已经加入购物车的商品，不能重复被加入 1、C：在add_to_cart的action里，用if !current_cart.products.include?(@product)判断 可以更改购物车内购买的商品数量(原本预设数量都是1) 1、V：加入&lt;%= f.select :quantity, [1,2,3,4,5] %&gt; 2、C：cart_item的update的action 库存为 0 的商品不能购买 1、V：&lt;% if @product.quantity &gt; 0 %&gt; 2、C：update的action，if @cart_item.product.quantity &gt;= cart_item_params[:quantity].to_i 在购物车新增数量时，不能更新超过原有库存的商品数量 1、V：&lt;%= f.select :quantity, 1..cart_item.product.quantity %&gt; 8、订单实做8.1 Step 1 : 建立结帐页 按下「确认结帐」按钮后，可以显示结帐明细order页，并且可以让消费者输入寄送地址 1、R：路由加入checkout 2、V：改views里按钮的路径 3、C：checkout的action里新建一个order表单 4、V：点击checkout发现页面没变化，console里提示缺少checkout页面。——新建checkout.html.erb（需调用cart_item的商品信息、制作填表用上order栏位） 5、M：加入order所需栏位total、user_id、billing_name/address、shipping_name/address。并设置与user关系。 6、R：路由加入order 7、C：生成订单需要order的create的action。 8.2 Step 2 : 建立购买明细 有时候商品会下架、价格会变，新建product_list的model 订单create时的购买明细缓存 购买明细show页面 效果：用produst_list代替cart_item存储已下单的商品信息，达到订单里的商品信息不随商品更新而改变的目的。 问题、为什么要新建product_list的model ？——order和product_list的model，相当于是把cart和cart_item的商品信息转移过来。在购物车cart里商品会随着管理员产品信息更新而更新，而在订单order里商品的信息不再改变，已经单独储存在product_list中。 1、M：①新建product_list的model；②加入栏位order_id、product_name、product_price、quantity；③设置与order关系 2、C：订单creat的action中建立product_list的缓存信息 3、C：订单建立后会进入详情页即show，于是设置show的action 4、V：show的views，因为要用order和product_list来替代cart和cart_item，所以这里用order和product_list调用信息。 8.3 Step 3 : 将网址改为秘密 token 效果：订单号乱序显示 1、栏位：新建add_token_to_order 2、M：定义generate_token的action（SecureRandom.uuid），并加入before_create 3、C：修改order里的id调用，比如redirect_to order_path(@order)改成redirect_to order_path(@order.token)，find改成find_by_token 9、订单实做（解答）9.1 订单练习作业（解答） 使用者可以在 /account/orders/ 看到过去所有订单 使用者在下拉式选单可以看到过去所有的订单 订单排序 1、R：路由加入 2、C：order的index，并按时间排序 3、V：index页面，并在navbar中加入链接。token报错，进入rails c，输入Order.where(token: nil).destroy_all 10、支付订单与寄信10.1 Step 1 : 消费者可以针对订单付款 使用 is_paid（boolean 属性）判断是否已付费 使用 payment_method 判断，实际付款渠道为：微信、支付宝 已付款过的订单不可以再付 效果：用is_paid判断是否付费，用payment_method判断支付方式。 1、R：路由加入pay_with_alipay、pay_with_wechat 2、V：加入支付的按钮并链接路径 3、C：定义pay_with_alipay和pay_with_wechat的action 4、栏位：add_payment_method_to_order，string 5、M：定义set_payment_with!(method)、和 pay! ，用到上一步新建的栏位。这里的用法是self.update_columns(栏位: 设定的值 ) ​ 6、栏位：add_is_paid_to_order，boolean 7、V：加入if判断显示支付按钮，还是显示“订单已完成付款” 10.2 Step 2 : 寄送订单确认通知信 使用者在下单后会收到一封订单确认信，rails g mailer OrderMailer gem ‘letter_opener’，并在console下测试信件预览 在订单建立时寄通知信 1、rails g mailer OrderMailer，产生mailer相关文件 2、app/mailers/application_mailer.rb，设置寄信人邮箱 3、app/mailers/order_mailer.rb，设置寄信表头内容（完整代码见下面11章） 1234 def notify_order_placed(order) @user = order.user mail(to: @user.email , subject: &quot;xxx&quot;)end 4、V：notify_order_placed.html.erb，生成订单后的寄信内容（如果没有页面会在rails s报错） 5、 gem &#39;letter_opener&#39;, group: :development * config/environments/development.rb设置`config.action_mailer.delivery_method = :letter_opener` 6、rails c 中测试自动发送信件，OrderMailer.notify_order_placed(Order.last).deliver! 7、C：在order的create的action中加入清空购物车、发送邮件 11、后台出货订单操作11.1 情境和 Model 准备效果：「有限状态机」这个架构去做后台订单切换状态。 1、aasm的github摘抄如下内容 gem ‘aasm’ 12345678910111213141516171819202122class Job include AASM #载入 aasm do state :sleeping, :initial =&gt; true #初始状态 state :running #状态2 state :running #状态3 event :run do #定义run的动作，可以在controller中用run!调用 transitions :from =&gt; :sleeping, :to =&gt; :running #状态由sleeping转换为running end event :clean do transitions :from =&gt; :running, :to =&gt; :cleaning end event :sleep do transitions :from =&gt; [:running, :cleaning], :to =&gt; :sleeping #当有多种状态时用[] end endend 下面这几个用到after_commit 123456789101112131415event before_all_transactionsevent before_transactionevent aasm_fire_event (within transaction)event after_commit (if event successful)event after_transactionevent after_all_transactionsaasm do state :sleeping, :initial =&gt; true state :running event :run, :after_commit =&gt; :notify_about_running_job do transitions :from =&gt; :sleeping, :to =&gt; :running endend 2、增加栏位：add_aasm_state_to_order， :string, default: “order_placed”，目的是设置初始值 3、六个状态state注意是状态： 已下订（order_placed） 已付款（paid） 卖家发货中（shipping） 已交货（shipped） 取消订单（order_cancelled） 退货（good_returned） 4、五种个model里的动作，即五种状态切换 注意：这里是model的动作，常常会在controller的action行为下调用，因为在后面加!所以可以同名 make_payment（付款） ship卖家发货（货物离开启运地或者发货人交运给承运人） deliver交货（货物到达目的地或者交付收货人） return（退货） cancel（取消订单） 4、C：- @order.pay!，然后+ @order.make_payment! 5、M：修改有限状态机 1event :make_payment, after_commit: :pay! do 6、测试：重新操作订单新建到付款，rails c，Order.last，看aasm_state是否显示为转换后的状态paid 11.2 订单状态切换 建立 admin/orders 可以看到系统内所有订单 admin 的 order 列表应要能显示订单状态 使用者可以“申请取消订单” 使用者“申请取消订单”后，管理员应该要收到“申请通知信” 后台管理员可以“取消订单”、“出货” 后台管理“出货”后，系统应该寄出通知信 后台管理员“取消订单”后，系统应该寄出通知信 1、R：路由加入admin::order 2、C：index，按id排序 3、V：index页面，用order调用信息：订单号、创建人、创建时间、订单状态 ​ 4、C：show，显示product_lists 5、V：show页面，用product_lists和@order调用信息 6、helper：render_order_paid_state(order)，显示已付款、未付款 7、V：调用 ​ 后台操作： 8、V：app/views/admin/orders/_state_option.html.erb，用case..when语法罗列6种订单状态，然后分别在各种状态下列出需要出现的操作按钮，发现总共需要4种按钮、2种状态： 已下订（order_placed）——申请取消订单cancel 已付款（paid）——申请取消订单cancel+卖家发货ship 卖家发货中（shipping）——交货deliver 已交货（shipped）——退货 取消订单（order_cancelled）——状态：订单已取消 退货（good_returned）——状态：已完成退货 123456789101112131415161718192021222324252627282930313233app/views/admin/orders/_state_option.html.erb&lt;% case order.aasm_state %&gt; &lt;% when &quot;order_placed&quot; %&gt; &lt;%= link_to(&quot;取消订单&quot;, cancel_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;% when &quot;paid&quot; %&gt; &lt;%= link_to(&quot;取消订单&quot;, cancel_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;%= link_to(&quot;出货&quot;, ship_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;% when &quot;shipping&quot; %&gt; &lt;%= link_to(&quot;设为已出货&quot;, shipped_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;% when &quot;shipped&quot; %&gt; &lt;%= link_to(&quot;退货&quot;, return_admin_order_path(order), class: &quot;btn btn-default btn-sm&quot;, method: :post) %&gt; &lt;% when &quot;order_cancelled&quot; %&gt; &lt;span class=&quot;label label-default&quot;&gt;订单已取消&lt;/span&gt; &lt;% when &quot;good_returned&quot; %&gt; &lt;span class=&quot;label label-default&quot;&gt;已退货&lt;/span&gt; &lt;% end %&gt; 9、R：路由加入4种动作ship、shiped、return、cancel 10、C：设置4种动作的find_and_do，其中do的部分已经在11-1的aasm..do里设置过，可以直接调用 1234567891011121314151617181920212223def ship @order = Order.find(params[:id]) @order.ship! redirect_to :backenddef deliver @order = Order.find(params[:id]) @order.deliver! redirect_to :backenddef cancel @order = Order.find(params[:id]) @order.cancel! redirect_to :backenddef return @order = Order.find(params[:id]) @order.return! redirect_to :backend 11、V：show里加入刚刚步骤8做的页面 &lt;%= render “state_option”, order: @order %&gt; ​ 前台用户操作： 12、R：加入用户取消订单动作apply_to_cancel 13、V：申请取消订单的按钮附上链接，加条件&lt;% if @order.order_placed? || @order.paid? %&gt; 14、C：定义apply_to_cancel ​ 寄信设置： 15、C：分别加入寄信OrderMailer.notify_ship(@order).deliver! 前台用户，apply_to_cancel申请取消订单apply_cancel(@order) 后台，ship卖家已发货notify_ship(@order) 后台，cancel订单已取消notify_cancel(@order) 16、修改OrderMailer的表头 123456789app/mailers/order_mailer.rbdef apply_cancel(order) @order = order @user = order.user @product_lists = @order.product_lists mail(to: &quot;admin@test.com&quot; , subject: &quot;[JDStore] 用户#&#123;order.user.email&#125;申请取消订单 #&#123;order.token&#125;&quot;)end V：加入寄信页面，几个页面内容一样，可以用partial 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172app/views/order_mailer/apply_cancel.html.erb&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-12&quot;&gt; &lt;h2&gt; 订单明细 &lt;br&gt; &lt;small&gt; &lt;%= link_to(&quot;订单连结&quot;, order_url(@order.token)) %&gt; &lt;/small&gt; &lt;/h2&gt; &lt;table class=&quot;table table-bordered&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th width=&quot;70%&quot;&gt;商品明细&lt;/th&gt; &lt;th&gt;单价&lt;/th&gt; &lt;th&gt;数量&lt;/th&gt; &lt;th&gt;小记&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% @product_lists.each do |product_list| %&gt; &lt;tr&gt; &lt;td&gt; &lt;%= product_list.product_name %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.product_price %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.quantity %&gt; &lt;/td&gt; &lt;td&gt; &lt;%= product_list.quantity * product_list.product_price %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;% end %&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;total group clearfix&quot;&gt; &lt;h4 class=&quot;pull-right&quot;&gt; 总计 &lt;%= @order.total %&gt; CNY &lt;/h4&gt; &lt;/div&gt; &lt;hr&gt; &lt;h2&gt; 寄送资讯 &lt;/h2&gt; &lt;table class=&quot;table table-striped table-bordered&quot;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; 订购人 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;%= @order.billing_name %&gt; - &lt;%= @order.billing_address %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 收件者 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;%= @order.shipping_name %&gt; - &lt;%= @order.shipping_address %&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt; 17、在rails c中测试，OrderMailer.notify_order_placed(Order.last).deliver! 12、部署到 Heroku （七牛云）12.1 本章学习指南12.2 一些安全概念 (本节只需要看，不需要实作)12.3 使用七牛云（用来存储图片）12.4 使用 Figaro 管理密码12.5 将JDStore部署到Heroku12.6 JDStore 商店创意大赛（第二季）参赛指南12.7 使用SendCloud服务发送邮件12.8 Rails 环境架构12.9 如何在 Heroku 上 Debug13-部署到 Heroku (海外用户方案)13.1 本章部属指南13.2 申请AWS S3（用来储存图片）13.3 使用 Figaro 管理密码13.4 将JDStore部署到Heroku13.5 泄漏 S3 密钥的处理方式","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"ror-tips-ARGV[0]是什么？","slug":"2 ror-tips:bug知识点/ror-tips-ARGV[0]是什么？","date":"2017-11-18T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/2fb899c2/","link":"","permalink":"http://yoursite.com/posts/2fb899c2/","excerpt":"","text":"12345argc：命令行总的参数的个数，即argv中元素的格式。*argv[ ]：字符串数组，用来存放指向你的字符串参数的指针数组,每一个元素指向一个参数。argv[0]：指向程序的全路径名。argv[1]：指向在DOS命令行中执行程序名后的第一个字符串。argv[2]：指向第二个字符串。 12345argc是参数个数,定义为intargv是字符串数组,存的是参数,定义为char**或者char* argv[]比如你编译好的程序为my.exe在命令行执行 my.exe 1 2 3那argc就是4，argv[0]是&quot;my.exe&quot;，argv[1]是&quot;1&quot;，argv[2]是&quot;2&quot;，argv[3]是&quot;3&quot;;","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"www-interview-简历设计感3要素","slug":"7 www-xx心得/www-interview-简历设计感3要素","date":"2017-11-18T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/8f6e08ea/","link":"","permalink":"http://yoursite.com/posts/8f6e08ea/","excerpt":"","text":"参考资料：by韵儿爸爸 三个妙招，做出接近90分的网站页面！&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=9xn7rHtIuzeXNRCX%2B0u6N5wKKYsPgnlUOR73tZXcTCmgBiBtkMcESBxabI6YZzWn) 1、对齐。 2、重复。字体、颜色、字号，以及版块重复。并压低字体亮度（没改之前，整页简历看起来非常刺眼）。 3、留白。 拉勾网简历模板分析1、图形颜色：深绿色#009676，顶部分割直线。 浅绿色#a2d6ca，大标题前的色块、分割线|。 浅灰色#cbcbcb，其他分割直线。颜色再浅可以用#dbdbdb。 2、字体颜色：黑色#000并加粗，大标题。 黑色#000，内容文字。 深灰色#808080，个人信息。 3、字体选择：拉勾网用微软雅黑。 中文字体按推荐顺序：1）冬青黑体简体中文，好看、粗细合适且有两个字号，打印效果最好。（打印效果最好） 1）苹果-简，好看、粗细合适且有多个字号，阅读效果最好。但如果对方电脑没有。。（阅读效果最好） 2）方正兰亭黑，好看、只有一个字号，下载折腾麻烦 2）思源黑体，好看、粗细字号最多，打印效果比冬青黑体稍差。下载折腾也麻烦（面面及格） 3）宋体-简，好看、字太细，据说能用但不要加粗，因为默认没有加粗字体所以打印会模糊。 4）华文黑，不好，行距太小 5）微软雅黑，据说是老屏幕用的最不推荐的 英文字体：1）Helvetica Neue，mac自带、字号超多。 2）Calibri，需要下载 99在mac电脑上的选择：冬青黑体简体中文+ Helvetica Neue 4、字号大小及粗细：名字最大，30px，加粗； 大标题，18px； 副标题，16px，加粗； 内容文字，14px；","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"interview","slug":"interview","permalink":"http://yoursite.com/tags/interview/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"ror-tips-clone和dup的区别","slug":"2 ror-tips:bug知识点/ror-tips-clone和dup的区别","date":"2017-11-17T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/2a3e03d/","link":"","permalink":"http://yoursite.com/posts/2a3e03d/","excerpt":"","text":"ruby中clone和dup都是对一个对象的浅拷贝，其区别如下：1.clone会拷贝单例方法，而dup不会。 1234567a = Object.newdef a.hello &quot;hello&quot;enda.dup.hello # raises NoMethodErrora.clone.hello # return &quot;hello&quot; 2.dup不能对frozen状态的对象进行拷贝，而clone可以。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"web-page-landding_page模板之bootstrap配置","slug":"4 web-page页面/web-page-landding_page模板之bootstrap配置","date":"2017-11-17T16:10:00.000Z","updated":"2018-01-14T08:13:36.000Z","comments":true,"path":"posts/f5818f78/","link":"","permalink":"http://yoursite.com/posts/f5818f78/","excerpt":"","text":"一、这里是99的配置123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！这里配置user-scalable=no移动设备优先 --&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; app/assets/stylesheets/application.scss配置 123456789101112131415161718192021@import url(&apos;https://fonts.googleapis.com/earlyaccess/notosanssc.css&apos;);/*==== Common ====*/body &#123; overflow-x: hidden; //裁剪内容，超出视窗不显示 font-family: &apos;Noto Sans SC&apos;, sans-serif; letter-spacing: 1px; color: #666; .col-center&#123; float: none; margin: 0 auto; &#125; a &#123; color: #666; &#125; a:hover &#123; color: #7f8c8d; transition: 0.5s; text-decoration: none; &#125;&#125; 二、以下是参考资料bootstrap基本模板如下：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;title&gt;Bootstrap 101 Template&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt; &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;你好，世界！&lt;/h1&gt; &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 1、最基本Bootstrap 将全局 font-size 设置为 14px，line-height 设置为 1.428。这些属性直接赋予 &lt;body&gt; 元素和所有段落元素。另外，&lt;p&gt; （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）。 1234&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; ...&lt;/html&gt; 2、移动设备优先为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; 在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 user-scalable=no 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！ 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; 3、布局容器.container 类用于固定宽度并支持响应式布局的容器。 123&lt;div class=&quot;container&quot;&gt; ...&lt;/div&gt; .container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 123&lt;div class=&quot;container-fluid&quot;&gt; ...&lt;/div&gt; 4、媒体查询在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值。 1234567891011/* 超小屏幕（手机，小于 768px） *//* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） *//* 小屏幕（平板，大于等于 768px） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中等屏幕（桌面显示器，大于等于 992px） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大屏幕（大桌面显示器，大于等于 1200px） */@media (min-width: @screen-lg-min) &#123; ... &#125; 我们偶尔也会在媒体查询代码中包含 max-width 从而将 CSS 的影响限制在更小范围的屏幕大小之内。 1234@media (max-width: @screen-xs-max) &#123; ... &#125;@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;@media (min-width: @screen-lg-min) &#123; ... &#125; 5、列偏移使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。例如，.col-md-offset-4 类将 .col-md-4 元素向右侧偏移了4个列（column）的宽度。","categories":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}],"tags":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/tags/web页面/"}],"keywords":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}]},{"title":"web-page-landding_page模板之anndo&吉米","slug":"4 web-page页面/web-page-landding_page模板之anndo&吉米","date":"2017-11-16T16:10:00.000Z","updated":"2018-01-14T08:14:28.000Z","comments":true,"path":"posts/f5818f78/","link":"","permalink":"http://yoursite.com/posts/f5818f78/","excerpt":"","text":"不同页面分别用什么注释标记：welcome#index.html.erb用：&lt;!--==== 轮播（Carousel）指标 ====--&gt; css用：/*===== Intro 首页-广告轮播 =====*/、/* 标题 */ 参考链接：by anndo 如何科学的“抄” jobs/index页面而不变成僵尸页面？ by anndo &amp; 吉米【JA魔改秘笈】还卡在前端的坑吗？教你如何第一次做Landing Page就上手！！ 一、css的小技巧1、怎么抄别人的代码？1）将抄来的CSS代码用一个ID选择器包裹起来，如下图： ​ 2）将html代码也用同样的ID包裹起来，如下图： 由于ID选择器是唯一的，这样一来，我们就完全不怕抄来的代码命名冲突或重复了； 2、如何快速引用版块？1）找到对应的HTML代码，并复制到你的index页面里 每一个板块都是用&lt;section&gt;&lt;/section&gt;包住 请记住这个板块的Class名称，此范例为show-box 2、找到对应的CSS代码，并复制到你的application.scss页面里 可直接搜索CSS名称，此范例为show-box，里面会包含所有此&lt;section&gt;所用到的CSS 3、从新专案到做出首页的顺序？3.1、命名方法： 比如products文件夹，index第一层用&lt;div class=&quot;box-product&quot;&gt; ，show用box-product-show（这样方便搜索，搜box-就是文件名，搜-box就是模块名），后面每个模块改用&lt;section class=&quot;模块名-box&quot;&gt;包起来。 asset/images，照片命名用名字_序号.png css注解，/*===== Push 首页-立即购买 =====*/。html注解&lt;!--===== 广告轮播 =====--&gt;。 3.2、实作1）rails new 2）bootstrap、fontawesome、 3）footer、navbar、welcome#index 4）首页图片放入asset/images，包括合作品牌brand_1-9.png、分类category_1-3、用户说founder_1-2、大图轮播intro_1-3、产品图item_1-9。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;div class=&quot;welcome-box&quot;&gt; &lt;!--===== 广告轮播 =====--&gt; &lt;section class=&quot;intro-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-12&quot;&gt; &lt;div id=&quot;intro&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--===== 品牌故事 =====--&gt; &lt;section class=&quot;story-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-10 col-md-offset-1&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--===== 商品分类 =====--&gt; &lt;section class=&quot;categories-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4 category-content&quot;&gt; &lt;%= link_to &apos;#&apos; , class: &quot;category_3&quot; do %&gt; &lt;%= link_to &apos;#&apos; , class: &quot;category_3&quot; do %&gt; &lt;div class=&quot;category-box&quot;&gt; &lt;%= image_tag(&quot;category_3.jpg&quot;) %&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;锅碗&lt;/h3&gt; &lt;p&gt;相較於琺瑯和陶瓷材質的牛奶鍋，不鏽鋼的質感多了一點硬派的感覺。&lt;/p&gt; &lt;/div&gt; &lt;% end %&gt; &lt;/div&gt; ... &lt;/div&gt; &lt;/section&gt; &lt;!--===== 推荐商品 =====--&gt; &lt;section class=&quot;show-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-10 col-md-offset-1&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;%= link_to &apos;#&apos; do %&gt; ... &lt;% end %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--===== 合作品牌 =====--&gt; &lt;section class=&quot;brand-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-10 col-md-offset-1&quot;&gt; &lt;%= image_tag(&quot;brand_1.png&quot;) %&gt; &lt;%= image_tag(&quot;brand_1.png&quot;) %&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--===== 立即购买 =====--&gt; &lt;section class=&quot;push-box&quot;&gt; &lt;%= link_to(&apos;立即购买&apos;, &apos;#&apos;, class:&apos;btn btn-push&apos; ) %&gt; &lt;/section&gt; 5）navbar的js 12345678+$(window).scroll(function () &#123; + /*===== Welcome#index - 首页导览列变化 =====*/ + if ($(this).scrollTop() &gt; 125) &#123; + $(&apos;#navbar&apos;).addClass(&apos;scroll_navbar&apos;) + &#125; else &#123; + $(&apos;#navbar&apos;).removeClass(&apos;scroll_navbar&apos;) + &#125; +&#125;) 相应的css 12345678910111213141516171819202122232425262728293031323334353637/*===== 基础栏位设定======*/.width-25 &#123; width: 25%; &#125;.width-100 &#123; width: 100%; &#125;/*===== Navbar 导览列 ======*/+ .navbar-default &#123; + background: rgba(0,0,0,0.5); //半透明背景 + /* 文字连结 */ + a &#123; + color: #fff !important; + &#125; a:focus &#123; color: #0070DE !important; &#125;+ /*===== 导览列滑动特效 ======*/ + &amp;.scroll_navbar &#123; + background-color: #fff; //背景颜色 + + /* 文字连结 */ + a &#123; + color: #000 !important; + &#125; + a:hover, + a:active, + a:focus &#123; + color: #0070DE !important; + &#125; + /* 搜索栏 */ .search-box &#123; margin-top: 7.5px; input &#123; height: 35px; &#125; html 1234567+&lt;div class=&quot;row&quot;&gt; + &lt;div class=&quot;col-md-12&quot;&gt; + &lt;div class=&quot;navbar navbar-default navbar-fixed-top&quot; role=&quot;navigation&quot; id=&quot;navbar&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 6）footer的css 123456789 /*===== Footer 页脚 ======*/ .footer&#123; text-align: center;- min-height: 200px;- background-color: #02061A;+ min-height: 175px; //最小高度+ background-color: #222;... background: image_url(&quot;start.jpg&quot;) no-repeat scroll top center/ cover; //背景图片 html 123456789&lt;footer class=&quot;footer&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt; 4、通用css代码怎么写？4.1、什么需要通用？1）对于body： 裁剪内容 body的位置position: relative; 字的大小font-size、间距letter-spacing、行距 链接a下划线text-decoration:none !important 页面内容container-fluid 12345678910111213141516/*===== 網站通用設置 ======*/body &#123; overflow-x: hidden; //裁切內容，超出視窗不顯示 position: relative; letter-spacing: 1px; font-size: 14px; a &#123; text-decoration:none !important; &#125; /*===== 頁面內容設定 ======*/ .container-fluid &#123; margin-top: 55px; min-height: 550px; &#125; 换页按钮 立即购买按钮，更改btn-default样式，加入hover、active、focus样式 12345678910.btn-default &#123; margin-top: 30px; padding: 15px 20px 15px 20px; &#125; .btn-default:hover, .btn-default:active, .btn-default:focus &#123; background-color: #fff; &#125; 基础栏位.width-25、.width-50、.height-200等 表格标题th、内容td设置居中vertical-align: middle !important; div排版 1234567.left-box &#123; float: left; &#125; .right-box &#123; float: right; &#125; ​ 2）对于一个页面-box： 字体大小h1/h2/h3，设置font-size、font-weight short-line 123456.short-line &#123; background: #eb5424; margin: 15px auto 35px auto; width: 125px; height: 2px; &#125; 按钮如.btn-push，和.btn-intro，设置通用的hover、active、focus，以及transition淡入淡出效果 123456789101112131415.btn-push:hover, .btn-intro:hover &#123; background-color: rgba(235, 84, 36, 0.5); border-color: #eb5424; color: rgba(255, 255, 255, 0.9); &#125; .btn-push, .btn-intro &#123; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; transition: all 0.4s ease-in-out; &#125; 3）字体直接接入字体库 1234@import url(&apos;https://fonts.googleapis.com/css?family=Oswald&apos;);@import url(https://fonts.googleapis.com/css?family=Raleway:400,900,700,600,500,300,200,100,800);@import url(https://fonts.googleapis.com/css?family=Acme); 【问题1】尝试设置通用代码、找好bootstrap套件，做一个完整首页？——以前经常遇到的解决不了的问题： 导航栏手机端缩成汉堡型无法展开，如果不收缩又会完全挡住大图； 导航栏置顶也是用navbar-fixed-top 导航栏搜索框怎么自己设置 大图如果自适应，文字不会居中会乱跑；大图如果用bootstrap的巨幕，又只能设置固定大小不能自适应 footer置底并没有看到什么相关代码，是怎么做到的？ 1、大图轮播模块1）下载图片素材，发现除了合作商标、用户头像外，其余模块图片都是一样大小。 2）设置首页welcome#index，首页所用图片放入app/asset/images 3）带标题的大图模块引入，并在第一行加入data-ride=&quot;carousel&quot;（同一页有多个轮播时才能正常自动轮播） 轮播失效请检查app/assets/javascripts/application.js是否缺少//= require bootstrap/alert、//= require bootstrap/dropdown、//= require bootstrap-sprockets 12345678910111213141516171819202122232425262728&lt;div id=&quot;myCarousel&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt; &lt;!-- 轮播（Carousel）指标 --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- 轮播（Carousel）项目 --&gt; &lt;div class=&quot;carousel-inner&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/07/slide1.png&quot; alt=&quot;First slide&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt;标题 1&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/07/slide2.png&quot; alt=&quot;Second slide&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt;标题 2&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;/wp-content/uploads/2014/07/slide3.png&quot; alt=&quot;Third slide&quot;&gt; &lt;div class=&quot;carousel-caption&quot;&gt;标题 3&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 轮播（Carousel）导航 --&gt; &lt;a class=&quot;carousel-control left&quot; href=&quot;#myCarousel&quot; data-slide=&quot;prev&quot;&gt;&amp;lsaquo;&lt;/a&gt; &lt;a class=&quot;carousel-control right&quot; href=&quot;#myCarousel&quot; data-slide=&quot;next&quot;&gt;&amp;rsaquo;&lt;/a&gt;&lt;/div&gt; 4）加入外层标签 1div.box-welcome&gt;section.intro-box&gt;div.row&gt;div.col-md-12 5）修改图片；加入文字；变成链接，用&lt;%= link_to &#39;#&#39;, target: &quot;_blank&quot; do %&gt;意思是新窗口打开。 注意文字层是加&lt;div class=&quot;carousel-caption&quot;&gt;，否则文字会在图片下另起一行。 123456789&lt;div class=&quot;item&quot;&gt; &lt;%= link_to &apos;#&apos;, target: &quot;_blank&quot; do %&gt; &lt;%= image_tag(&quot;intro_3.jpg&quot;) %&gt; &lt;div class=&quot;carousel-caption&quot;&gt; &lt;h3&gt;精选厨具&lt;/h3&gt; &lt;p&gt;优质进口厨具，做菜更加便利&lt;/p&gt; &lt;/div&gt; &lt;% end %&gt;&lt;/div&gt; 6）上一步的代码加入css 文字用百分比margin-top: -40%;，手机自适应不会乱跑 12345678910111213141516/*==== intro 轮播图 ====*/.intro-box &#123; .item &#123; h3 &#123; margin-top: -40%; font-size: 50px; letter-spacing: 5px; &#125; p &#123; font-size: 20px; &#125; img &#123; width: 100%; &#125; &#125;&#125; 7）换页按钮html，把&amp;lsaquo;换成font-awesome图标。 &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;是残障人士用用屏幕阅读器阅读的效果，可以不加。 1234&lt;a class=&quot;carousel-control left&quot; href=&quot;#myCarousel&quot; data-slide=&quot;prev&quot;&gt; &lt;i class=&quot;fa fa-angle-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt; 8）换页按钮css，一样的文字用百分比margin-top: 140%; 123456.carousel-control &#123; i &#123; margin-top: 140%; //按钮高度 font-size: 50px; //按钮大小 &#125; &#125; 2、品牌故事模块1）html基本信息写入 12345678910&lt;h2&gt;品牌故事&lt;/h2&gt;&lt;h1&gt;JDStore&lt;/h1&gt;&lt;div class=&quot;short-line&quot;&gt;&lt;/div&gt;&lt;%= image_tag(&quot;founder_1.png&quot;) %&gt;&lt;h3&gt;Victor&lt;/h3&gt;&lt;p&gt;我們希望能為大家帶來種類多樣、價格低廉並且設計獨特，且讓大多數人可以負擔的起的家具家飾品，爲了實現這樣的想法，我們從產品設計、原料採購、生產製造，到在分店中的經營，都不斷在創新和尋求改善。 &lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;Kelly&lt;/h3&gt;&lt;p&gt;我們知道如果要提供顧客便宜、品質又好的商品，企業必須有效的管理成本及運用創新的製造方法，這是從未改變的信念，最有效的利用原料，尋找更經濟、更有效率及更有創意的製作或包裝方式，降低成本，回饋給大家! &lt;/p&gt;&lt;%= image_tag(&quot;founder_2.png&quot;) %&gt; 2）模块居中用偏移col-md-offset-1还是自定义col-center ？还是自定义好些，因为如果模块占用col-md-9这种单数，不管怎么偏移都不会对称居中。 模块中的细节位置再用col-md-offset-1调整，如步骤3）中。 123456789/*==== Common ====*/body &#123; font-family: &apos;Noto Sans SC&apos;, sans-serif; color: #666; .col-center&#123; float: none; margin: 0 auto; &#125;&#125; 排版1 1section.story-box&gt;div.row&gt;div.col-md-10.col-center 3）排版2。新开一行row，头像占col-md-3 col-md-offset-1 ，文字占col-md-7 4）box-welcome的css，每个模块反复用到的元素 用div定义短线，方法与&lt;hr/&gt;一样，这里保留hr宽度满屏于是div做short-line来区分开。粗细用height，宽度width，左右方向位置居中是margin: 0 auto;的auto，上下方向位置加入margin: 30px auto;或margin: 15px auto 30px auto; 12345678910111213/*==== box-welcome ====*/.box-welcome &#123; h2 &#123; font-size: 24px; font-weight: 600; &#125; .short-line &#123; background-color: #0070DE; margin: 15px auto 30px auto; width: 150px; height: 1.5px; &#125;&#125; 5）story-box的css 以前喜欢用row标签的margin-top来调模块位置，这里用section标签的story-box，设置padding p标签用text-align: justify;，两端对齐的意思 img标签用border-radius: 50%显示原形，50%以上都是圆形 img标签，用width: 150px;设置图片大小。 轮播大图用百分比，好处是大小屏幕保持图片占满窗口； 这里人物头像用150px（苹果6是375px），即便手机看也不会挡住。而且，如果用百分比，大概ipad大小到手机屏幕大小，图片会变成单独一行一张图，变得特别大。——凡是元素用到px，特别是宽度，都要看一下是否会影响手机端显示。 12345678910111213141516171819/*==== story 品牌故事 ====*/.story-box &#123; background-color: #fff; text-align: center; padding: 50px 62.5px 50px 62.5px;//位置 h3 &#123; font-size: 20px; text-align: left; &#125; p &#123; color: #333; line-height: 24px; text-align: justify; &#125; img &#123; border-radius: 50%; width: 150px; &#125;&#125; 3、服务优势模块1）html基本信息写入 1234567891011&lt;h2&gt;服务优势&lt;/h2&gt; &lt;div class=&quot;short-line&quot;&gt;&lt;/div&gt; &lt;%= image_tag(&quot;service_1.png&quot;) %&gt; &lt;h3&gt;品质保证&lt;/h3&gt; &lt;p&gt;本店的商品皆通过市场验证，使用最高级的材料制作而成，品质为业界领先标准。&lt;/p&gt; &lt;%= image_tag(&quot;service_2.png&quot;) %&gt; &lt;h3&gt;快速送达&lt;/h3&gt; &lt;p&gt;全国皆享有当天下单、隔日送达的服务，过程中有任何损坏皆由我们负责，请放心购买。&lt;/p&gt; &lt;%= image_tag(&quot;service_3.png&quot;) %&gt; &lt;h3&gt;安心使用&lt;/h3&gt; &lt;p&gt;设计皆考量人体工学及真实使用情境，使用起来更安心。&lt;/p&gt; 2）排版1 1section.service-box&gt;div.row&gt;div.col-md-10.col-center 3）排版2，新增row 1div.row&gt;(div.col-md-4.col-sm-4.col-xs.12&gt;div.service-item)*3 4）service-box的css 123456789101112131415161718192021/*==== service 服务优势 ====*/.service-box &#123; background-color: #f8f8f8; text-align: center; padding: 50px 62.5px 50px 62.5px; .service-item &#123; margin: 0 25px; img &#123; width: 100px; &#125; h3 &#123; font-size: 18px; &#125; p &#123; color: #666; line-height: 24px; text-align: justify; margin-top: 25px; &#125; &#125;&#125; 4、商品分类模块1）html基本信息写入 123456789&lt;%= image_tag(&quot;category_1.jpg&quot;) %&gt; &lt;h3&gt;器皿&lt;/h3&gt; &lt;p&gt;不鏽鋼材質便於清洗，不怕碰撞，緻密紋理相當迷人。鍋體兩側都有尖口，左右撇子都好用。可以煮兩到三人份的奶茶、一人份的湯麵、粥類，料理後亦可直接端上桌，可愛又方便！&lt;/p&gt; &lt;%= image_tag(&quot;category_2.jpg&quot;) %&gt; &lt;h3&gt;厨具&lt;/h3&gt; &lt;p&gt;工房Aizawa最受歡迎的牛奶鍋，由創立於大正11年、以製作金屬食器聞名的老舖Aizawa工房製作而成。在職人們的手中，金屬冷硬的質感，帶上了手工製作的細緻與溫度。&lt;/p&gt; &lt;%= image_tag(&quot;category_3.jpg&quot;) %&gt; &lt;h3&gt;锅碗&lt;/h3&gt; &lt;p&gt;相較於琺瑯和陶瓷材質的牛奶鍋，不鏽鋼的質感多了一點硬派的感覺，鍋體上細緻的金屬紋理相當迷人。由白梣木手工製成的木柄，如同松鼠尾巴般圓潤好握、防燙，傾倒的角度也相當順手。&lt;/p&gt; 2）排版1 1section.category-box&gt;div.row&gt;div.col-md-10.col-center 3）排版2 1div.row&gt;(div.col-md-4.col-sm-4.col-xs-12.category-item)*3 4）排版3，图片链接 1&lt;%= link_to &apos;#&apos; do %&gt;... &lt;% end %&gt; 5）通用css，加在common位置 12345678a &#123; color: #666; &#125; a:hover &#123; color: #7f8c8d; transition: 0.5s; text-decoration: none; &#125; 6）css 12345678910111213141516171819/*==== category 商品分类 ====*/.category-box &#123; background-color: #fff; text-align: center; padding: 50px 62.5px 50px 62.5px; .category-item &#123; img &#123; width: 250px; &#125; h3 &#123; font-size: 18px; padding: 20px 0; &#125; p &#123; line-height: 24px; text-align: justify; &#125; &#125;&#125; 5、推荐商品模块1）html基本信息写入。 【问题】如果两行都用p，要分别定义位置就不能直接用p标签来定义，而是要加多一层div？ 解法一：&lt;p class=&quot;p1&quot;&gt;和&lt;p class=&quot;p2&quot;&gt;，然后定义.p1{}和.p2{} 解法二：一个改成h6标签，但注意h会自动加粗。建议用第一种 123456789101112131415161718192021222324252627282930313233343536373839&lt;!--==== 推荐商品 ====--&gt;&lt;h2&gt;推荐商品&lt;/h2&gt;&lt;div class=&quot;short-line&quot;&gt;&lt;/div&gt;&lt;%= image_tag(&quot;item_1.jpg&quot;) %&gt;&lt;p&gt;两手锅&lt;/p&gt;&lt;p&gt;$550&lt;/p&gt;&lt;%= image_tag(&quot;item_2.jpg&quot;) %&gt;&lt;p&gt;平底锅&lt;/p&gt;&lt;p&gt;$750&lt;/p&gt;&lt;%= image_tag(&quot;item_3.jpg&quot;) %&gt;&lt;p&gt;铁制茶壶&lt;/p&gt;&lt;p&gt;$450&lt;/p&gt;&lt;%= image_tag(&quot;item_4.jpg&quot;) %&gt;&lt;p&gt;茶壶&lt;/p&gt;&lt;p&gt;$250&lt;/p&gt;&lt;%= image_tag(&quot;item_5.jpg&quot;) %&gt;&lt;p&gt;八角点心盘&lt;/p&gt;&lt;p&gt;$150&lt;/p&gt;&lt;%= image_tag(&quot;item_6.jpg&quot;) %&gt;&lt;p&gt;点心盘&lt;/p&gt;&lt;p&gt;$80&lt;/p&gt;&lt;%= image_tag(&quot;item_7.jpg&quot;) %&gt;&lt;p&gt;木盘&lt;/p&gt;&lt;p&gt;$125&lt;/p&gt;&lt;%= image_tag(&quot;item_8.jpg&quot;) %&gt;&lt;p&gt;酱料碟&lt;/p&gt;&lt;p&gt;$20&lt;/p&gt;&lt;%= image_tag(&quot;item_9.jpg&quot;) %&gt;&lt;p&gt;酱料碟&lt;/p&gt;&lt;p&gt;$50&lt;/p&gt;&lt;%= image_tag(&quot;item_10.jpg&quot;) %&gt;&lt;p&gt;马克杯&lt;/p&gt;&lt;p&gt;$80&lt;/p&gt;&lt;%= image_tag(&quot;item_11.jpg&quot;) %&gt;&lt;p&gt;陶锅&lt;/p&gt;&lt;p&gt;$650&lt;/p&gt;&lt;%= image_tag(&quot;item_12.jpg&quot;) %&gt;&lt;p&gt;8号锅&lt;/p&gt;&lt;p&gt;$500&lt;/p&gt; 2）排版1 1section.recommend-box&gt;div.row&gt;div.col-md-10.col-center 3）排版2 1div.row&gt;(div.col-md-3.col-sm-6.col-xs-12.recommend-item)*12 4）排版3，图片和文字整个模块变成链接，并给图片加上div.recommend-part1（为了给图片加边框效果） 1&lt;%= link_to &apos;#&apos; do %&gt;... &lt;% end %&gt; 5）css，其中hover用opacity: 0.6;是最简单粗暴的动画效果。图片阴影用box-shadow: 2px 2px 5px #888。 12345678910111213141516171819202122232425/*==== 推荐商品 ====*/.recommend-box &#123; background-color: #f8f8f8; text-align: center; padding: 50px 0; .recommend-item &#123; .recommend-part1 &#123; img &#123; width: 100%; &#125; box-shadow: 2px 2px 5px #888; margin-top: 15px; &#125; .recommend-part1:hover &#123; opacity: 0.6; &#125; h6 &#123; font-size: 14px; margin-top: 30px; &#125; p &#123; margin-bottom: 40px; &#125; &#125;&#125; 6、用户反馈模块1）bootstrap轮播模块，替换照片&lt;%= image_tag(&quot;feedback_1&quot;) %&gt;。 2）此时既不会自动轮播、点击小圆也没反应。 3）把4个myCarousel的id换成feedback，此时点击小圆会翻页，但仍不会自动轮播。 4）轮播第一行即有id的一行，加上data-ride=&quot;carousel&quot;，可以轮播了。 5）html基本信息，放到轮播的item中 123456789101112131415161718 &lt;h2&gt;用户反馈&lt;/h2&gt; &lt;div class=&quot;short-line&quot;&gt;&lt;/div&gt; &lt;div class=&quot;item active&quot;&gt; &lt;p class=&quot;p1&quot;&gt;这是我用过最好的网站，商品众多、下单方便、送货快速，还能订制特殊规格的锅具，强力推荐。&lt;/p&gt; &lt;%= image_tag(&quot;feedback_1.png&quot;) %&gt; &lt;p class=&quot;p2&quot;&gt;Eddie - 上班族&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;item&quot;&gt; &lt;p class=&quot;p1&quot;&gt;我是这网站的忠实用户，已经在这买好几年了，质量一直很好，而且不定时会有折扣，真的很划算！&lt;/p&gt; &lt;%= image_tag(&quot;feedback_2.png&quot;) %&gt; &lt;p class=&quot;p2&quot;&gt;Anna - 家庭主妇&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;item&quot;&gt; &lt;p class=&quot;p1&quot;&gt;身为一个学生，预算不太多，却也能在这找到便宜又有设计感的器皿，让我生活又添加一份乐趣。&lt;/p&gt; &lt;%= image_tag(&quot;feedback_3.png&quot;) %&gt; &lt;p class=&quot;p2&quot;&gt;Kobe - 大学生&lt;/p&gt;&lt;/div&gt; 6）排版 1section.feedback-box&gt;div.row&gt;div.col-md-10.col-center 7）css，常用部分 border到这里接触了三种用法，border用来做边框，border-shadow做阴影，border-radius做圆角或圆。 居中喜欢用margin: 0 auto;，好处是可以继续改调整位置，如下的argin: 0 auto 25px auto; 123456789101112131415161718192021/*==== 用户反馈 ====*/.feedback-box &#123; background-color: #fff; text-align: center; padding: 50px 0 100px 0; .item &#123; img &#123; width: 80px; border-radius: 50%; margin: 0 auto 25px auto; border: 2px solid #ccc; &#125; .p1 &#123; max-width: 550px; margin: 0 auto 25px auto; &#125; .p2 &#123; margin-top: 25px; &#125; &#125;&#125; 8）css，轮播按钮 旋转角度的css没有接触过。 1234567891011121314151617181920.carousel-indicators &#123; margin-bottom: -70px; li &#123; background-color: #666; height: 13px; width: 13px; margin: 0 5px; border-radius: 0; /* 按钮转向45度 */ -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); &#125; li.active &#123; background-color: #0070DE; &#125;&#125; 7、合作品牌模块1）html基本信息写入。 1234567891011&lt;h2&gt;合作品牌&lt;/h2&gt;&lt;div class=&quot;short-line&quot;&gt;&lt;/div&gt;&lt;%= image_tag(&quot;brand_1.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_2.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_3.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_4.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_5.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_6.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_7.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_8.png&quot;) %&gt;&lt;%= image_tag(&quot;brand_9.png&quot;) %&gt; 2）排版 1section.brand-box&gt;div.row&gt;div.col-md-10.col-center 3）css 12345678910/*==== 合作品牌 ====*/.brand-box &#123; background-color: #f8f8f8; text-align: center; padding: 50px 0; img &#123; width: 150px; margin: 10px 15px; &#125;&#125; 8、立即购买模块1）html基本信息写入。 123&lt;section class=&quot;push-box&quot;&gt; &lt;%= link_to(&apos;立即购买&apos;, &apos;#&apos;, class:&apos;btn btn-push&apos; ) %&gt; &lt;/section&gt; 2）css 插入背景图片两种方法，测试发现background: image_url(&quot;&quot;)不太好，不能用ipic图片。 background-image: url(&quot;&quot;);好用，既能用本地app/asset/images图片，又能用ipic图片 123456789101112131415161718192021/*==== 立即购买 ====*/.push-box &#123; background-image: url(&quot;start&quot;); height: 200px; padding: 75px 0 0 0; text-align: center; .btn-push &#123; color: #fff; font-size: 20px; background-color: rgba(0, 0, 0, 0.5); padding: 10px 20px; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; transition: all 0.4s ease-in-out; &#125; .btn-push:hover &#123; background-color: #0070DE; border-color: #0070DE; &#125; [问题]仍有一些自适应问题，以及如何做才能方便调整到韵儿爸爸那种对齐？ 123456789101112131415161718app/views/layouts/application.html.erb&lt;body&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;%= render &quot;common/navbar&quot; %&gt; &lt;%= render &quot;common/flashes&quot; %&gt; &lt;%= yield %&gt; &lt;/div&gt; &lt;/div&gt; &lt;%= render &quot;common/footer&quot; %&gt; &lt;script src=&quot;https://qiyukf.com/script/aa9e006de13d137b3ef3b6fe0704d745.js&quot; defer async&gt;&lt;/script&gt; &lt;/body&gt; index中 1234567891011121314151617181920212223242526272829303132&lt;!-- 首页精选商品列表 --&gt; &lt;div class=&quot;container all-product-box&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;container topspan&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-xs-6&quot;&gt; &lt;h3 class=&quot;titspan&quot;&gt;商城&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-6&quot;&gt; &lt;%= link_to(&quot;more &gt;&quot;, products_path, class: &quot;pull-right morespan&quot;) %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;% @products.each do |product| %&gt; &lt;div class=&quot;col-xs-6 col-md-3 text-center product-list-style&quot;&gt; &lt;% link_to product_path(product) %&gt; &lt;% if product.image.present? %&gt; &lt;%= link_to image_tag(product.image.thumb.url, class: &quot;product-list-style-img img-responsive center-block all_image_css&quot;), product_path(product), target: &quot;_blank&quot; %&gt; &lt;% else %&gt; &lt;%= link_to image_tag(&quot;http://placehold.it/200x200&amp;text=No Pic&quot;, class: &quot;product-list-style-img img-responsive center-block all_image_css&quot;), product_path(product), target: &quot;_blank&quot; %&gt; &lt;% end %&gt; &lt;br&gt; &lt;%= link_to(product.title, product_path(product), target: &quot;_blank&quot;) %&gt; &lt;br&gt; &lt;strong&gt;￥ &lt;%= link_to(product.price, product_path(product), target: &quot;_blank&quot;) %&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;% end %&gt; &lt;/div&gt; &lt;/div&gt; 另一个html 123456789101112131415161718192021222324252627282930&lt;!-- 用户评价版面 --&gt; &lt;div class=&quot;row landing-page-eva&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;col-md-12&quot;&gt; &lt;h3 class=&quot;tagline&quot;&gt;听听他们 怎么说&lt;/h1&gt; &lt;div class=&quot;col-xs-12 col-sm-6 col-md-6 landing-page-eva-style&quot;&gt; &lt;div class=&quot;col-xs-3&quot;&gt; &lt;%= image_tag(&quot;xdite.jpg&quot;, class: &quot;img-circle img-responsive img-center frontpage-img&quot;) %&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-9&quot;&gt; &lt;h5&gt;Xdite (学习牛人、编程大神)&lt;/h5&gt; &lt;p&gt;作为一个程序员，之前我并不关心身边的琐碎小事，是个典型的”差不多先生”。 但是自从加入「极简生活法」以后，ta的生活教程令我完全沉迷。 我开始在乎身边的小细节，开始动手改善家居，生活变得精致，心情变得舒服。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-12 col-sm-6 col-md-6 landing-page-eva-style&quot;&gt; &lt;div class=&quot;col-xs-3&quot;&gt; &lt;%= image_tag(&quot;xiaolai.jpg&quot;, class: &quot;img-circle img-responsive img-center frontpage-img&quot;) %&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-9&quot;&gt; &lt;h5&gt;李笑来 (比特币大咖、投资人)&lt;/h5&gt; &lt;p&gt;传统电商还能活吗？特么真挺难！因为玩法落后了。那该怎么玩？「极简生活法」说——跨界。 社群\b互动+优质内容+协助成长，你买到的不只是商品，还有远比商品贵得多得多的附加价值。 对这个项目我有点心动了...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; css 12345678910// 商品展示列表样式设置，为商品栏做好排版整形 .product-list-style &#123; //图片+文字 块样式整形 margin: 3em auto 2em; &#125; .product-list-style-img &#123; //文字 块样式整形 margin-bottom: 1.2em; &#125; .all-product-box &#123; margin-bottom: 3em; &#125; 小结：1、html的css标签命名套路——①、最外层div用box-product、box-product-show；②、每个模块section用模块名+box；③、底下细分col-md-4的时候用模块名+item；④、再往下细分用模块名+part1；[1]按钮用btn+模块名 2、css一般定义看颜色、定形尺寸、定位尺寸 [问题]这里文字h1/h2/h3/p要像韵儿爸爸那样在welcome-box中设置，否则各种自定义无法保证网站字体大小、颜色、行高、对齐方式一致。行距在body设置。[问题]一个网站设置多少种字体大小和颜色？50、36、（20、14、24）、16、18。韵儿爸爸48、（24、19、14、12）[问题]关于网页字体和单位？——如果把某个元素的font-size设为16px，那么1em就等于16px。h1/h2/h3/h4/h5/h6不同显示器显示效果不同，chrome测试分别对应36、30、24、18、14、12px。【笔记】韵儿爸爸三个妙招提升颜值：1）对齐。让人迅速找到视觉规律 2）重复。 思源黑体字（需开vpn载入） 全站字色#666用于压低亮度 12345@import url(&apos;https://fonts.googleapis.com/earlyaccess/notosanssc.css&apos;); //引入google思源黑简在线字体 需要使用VPN才可生效body &#123; font-family: &apos;Noto Sans SC&apos;, sans-serif; // google思源黑简作为主字体 color: #666; // 修改全站的字体主色 压低亮度 &#125; 重复两种色调。如#f5f5f5、#7f8c8b搭原来的#fff，如#f8f8f、#333333搭原来的#fff 3）留白。尽量做减法扣掉背景，只留下商品 2、部署后heroku很多bug，涉及环境配置3、部署要写seed，和接七牛云### 【问题2】按钮怎么始终居中，按钮样式怎么设置才不容易出问题？css如下 1234567.push-box &#123; /* 区块 */ text-align: center; padding: 75px 0 0 0; height: 200px; background: image_url(&quot;start.jpg&quot;) no-repeat scroll top center/ cover; //背景图片&#125; 【问题3】大图轮播的图片大小要一样吗？合作品牌的图片大小要一样吗？","categories":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}],"tags":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/tags/web页面/"}],"keywords":[{"name":"web页面","slug":"web页面","permalink":"http://yoursite.com/categories/web页面/"}]},{"title":"ror-tips-model主键与外键","slug":"2 ror-tips:bug知识点/ror-tips-model主键与外键","date":"2017-11-15T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/a7e5943/","link":"","permalink":"http://yoursite.com/posts/a7e5943/","excerpt":"","text":"原文地址：https://cnbin.github.io/blog/2015/08/19/sql-zhu-jian-yu-wai-jian/ SQL 主键与外键AUG 19TH, 2015 1:34 PM 主键与外键关系型数据库中的一条记录中有若干个属性，若其中某一个属性组(注意是组)能唯一标识一条记录，该属性组就可以成为一个主键 比如 学生表(学号，姓名，性别，班级) 其中每个学生的学号是唯一的，学号就是一个主键 课程表(课程编号,课程名,学分) 其中课程编号是唯一的,课程编号就是一个主键 成绩表(学号,课程号,成绩) 成绩表中单一一个属性无法唯一标识一条记录，学号和课程号的组合才可以唯一标识一条记录，所以 学号和课程号的属性组是一个主键 成绩表中的学号不是成绩表的主键，但它和学生表中的学号相对应，并且学生表中的学号是学生表的主键，则称成绩表中的学号是学生表的外键 同理 成绩表中的课程号是课程表的外键 定义主键和外键主要是为了维护关系数据库的完整性，总结一下： 主键是能确定一条记录的唯一标识，比如，一条记录包括身份正号，姓名，年龄。身份证号是唯一能确定你这个人的，其他都可能有重复，所以，身份证号是主键。 外键用于与另一张表的关联。是能确定另一张表记录的字段，用于保持数据的一致性。比如，A表中的一个字段，是B表的主键，那他就可以是A表的外键。 主键、外键和索引的区别主键、外键和索引的区别？ 聚集索引和非聚集索引的区别？ 聚集索引一定是唯一索引。但唯一索引不一定是聚集索引。 聚集索引，在索引页里直接存放数据，而非聚集索引在索引页里存放的是索引，这些索引指向专门的数据页的数据。 Posted by 陈斌彬 Aug 19th, 2015 1:34 pm net","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"tool-atom-【转发】如何修改Atom自带的快捷键&&使用⌘+E快速打开新文件~","slug":"6 tool-xx工具/tool-atom-【转发】如何修改Atom自带的快捷键&&使用⌘+E快速打开新文件~","date":"2017-11-14T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/30a08ba7/","link":"","permalink":"http://yoursite.com/posts/30a08ba7/","excerpt":"","text":"原文by黄鸿亮：http://hongliang.site/2017/03/21/2017-03-21-asdf/#comments 如何修改Atom自带的快捷键&amp;&amp;使用⌘+E快速打开新文件~ 发表于 2017-03-21 | 0 Comments 发生了什么事？ 随时rails学习的不断深入，文件数量越来越多，要调出其中一个文件，再用以前的方法：在树状图里面找，效率太低。所以，用模糊搜索会大大加速文件定位的速度！ 比如，要快速切换到/app/views/admin/orders/index.html.erb, 只需要在模糊探索框内输入 ad or in即可快速定位到这个文件。如何弹出模糊搜索框： atom自带的快捷键是： ⌘+t ，但是这个组合键，对于使用windows机械键盘的人来说，键程太远，按起来很别扭。如果能改成⌘+e，那就方便很多了！ 问题：用atom自带的增加快捷键功能无效！原因：⌘+e已经被占用。于是，解题思路就有了如下： 找到atom的相关的关键代码，改掉它。 找到如何设置优先等级的方法。 然而，都行不通！…………………………………………………………/捂脸。解决过程：一阵google+一顿百度，没有找到教程，最后自己尝试出来。此处省略n个字。解决方案：打开这个文件：输入以下代码：来，代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142如何修改Atom自带的快捷键&amp;&amp;使用⌘+E快速打开新文件~ 发表于 2017-03-21 | 0 Comments发生了什么事？随时rails学习的不断深入，文件数量越来越多，要调出其中一个文件，再用以前的方法：在树状图里面找，效率太低。所以，用模糊搜索会大大加速文件定位的速度！比如，要快速切换到/app/views/admin/orders/index.html.erb, 只需要在模糊探索框内输入 ad or in即可快速定位到这个文件。如何弹出模糊搜索框：atom自带的快捷键是： ⌘+t ，但是这个组合键，对于使用windows机械键盘的人来说，键程太远，按起来很别扭。如果能改成⌘+e，那就方便很多了！问题：用atom自带的增加快捷键功能无效！原因：⌘+e已经被占用。于是，解题思路就有了如下：找到atom的相关的关键代码，改掉它。找到如何设置优先等级的方法。然而，都行不通！…………………………………………………………/捂脸。解决过程：一阵google+一顿百度，没有找到教程，最后自己尝试出来。此处省略n个字。解决方案：打开这个文件：输入以下代码：来，代码如下：12345&apos;.platform-darwin atom-text-editor&apos;: &apos;cmd-e&apos;: &apos;unset!&apos;&apos;.platform-darwin&apos;: &apos;cmd-e&apos;: &apos;fuzzy-finder:toggle-file-finder&apos;解读：unset!先把原先的快捷键取消掉，再在下面重新设置新的。搞定！写在后面：如果你有更好的解决方法，请留言告诉我……~另外一篇关于修改快捷键的blog:打code时如何减少手动挪光标的次数&amp;&amp;emmet增加自定义片段的方法。2017-3-21 学习记录ORID2017-3-22 遇到一个坑，记录 解读：unset!先把原先的快捷键取消掉，再在下面重新设置新的。 搞定！写在后面：如果你有更好的解决方法，请留言告诉我……~另外一篇关于修改快捷键的blog:打code时如何减少手动挪光标的次数&amp;&amp;emmet增加自定义片段的方法。 **2017-3-21 学习记录ORID 2017-3-22 遇到一个坑，记录**","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-atom-【转发】打code时如何减少手动挪光标的次数","slug":"6 tool-xx工具/tool-atom-【转发】打code时如何减少手动挪光标的次数","date":"2017-11-14T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/5974411c/","link":"","permalink":"http://yoursite.com/posts/5974411c/","excerpt":"","text":"原文by黄鸿亮：http://hongliang.site/2017/03/10/2017-03-10-how-to-add-your-own-custom-code-snippets-to-emmet-snippets/ 几个工具by黄鸿亮：http://activeliang-blog.logdown.com/posts/1433420-guangzhou-2017-2-19-offline-meetup-extracted-records atom打code时如何减少手动挪光标的次数&amp;&amp;emmet增加自定义片段的方法。 发表于 2017-03-10 | 分类于 mac | ** 0 Comments 写在前面：（可以直接看文未的方法）web程序员应该都知道emmet有多好用。打code如飞，不知道的只可以去看看我的另一篇有emmet相关介绍的文档：文档链接（看第三张图你就明白了） .在使用一段时间后发现一个问题，诸如：&lt;%%&gt;，没有快捷的输入方法，这对符号，我细数了一下，在先打头跟尾再把光标移动回中间的情况下要敲9个键。相信学ruby-on-rials的人都知道，这个符号是经常要作用的！所以我在想能否有快捷的输入，比如能：输入%+tab键自动补全这对符号，并把光标停留在中w间，那就太完美了！于是我开始寻找答案…… 配置atom: 在atom内建的增加snippets的方法来实现，亲测有效，方法如下：（但：打开emmet后会被覆盖。）注意：不开emmet的时候完美使用，开了emmet后这个方法无效，会补emmet原生默认的定义给覆盖掉。 然后，我又开始找解决这种冲突的方法，最后我发现，最直接的方法就是直接在emmet上增加snippets. 苦逼的解决问题之路： google了一圈发现全网竟然没有一篇可行的确定的教程，最ok的教程也只是跟你说有这么一个方法可以增加snippets来实现，但是没有给出具体方法。只是给了官方文档的链接。 官方文档只是跟你说了一堆杂七杂八的东西，然后关于怎么配置，一点儿也没有说。只是说这个东西需要自己来创建。后来算是找到了一个文件，但作者提供的路径我们根本找不到，（有可能是sublime的，但是我们用的是atom）自己创建一个文件加 路径后，无效！ 网上关于这个的99.9%的教程都不是mac下的atom下的emmet。大多不适用。 能试的都试过了，甚至连下方中的正确方法都试过了，但是当时竟然没有成功，现在写这个教程的时候还在无限纳闷…… 就这样一直在网络上游荡……就像警察抓小偷一样，明明有一点线索了但就是找不到一个完整的可行的方法！试多了，错多了，时间也折腾多了，就崩溃了，是的，我崩溃了，那一刻我多么想，不要再为这个浪费时间了，事实上我已经疯狂地追踪了十个小时了！真想找个人过来，给他点钱，帮我做出来，可以有钱也没有用啊，去哪里找？？ 最后， 我用google翻译，发邮件给emmet原作者，没想到他回复了，给了一些提示，我报着试一试的态度，竟然成功了！ 这个方法来得太不容易了……！方法如下： 打开preferences,快捷键：⌘+,点击进入emmet,代码在这里，请跟着复制粘贴： 1&quot;%&quot;: &quot;&lt;%| %&gt;&quot;, ok!保存，重启atom,实现你的打code如飞吧！ 注意：此功能只在html文件里有效，也只有html里需要这个功能！ 注意：此功能只在html文件里有效，也只有html里需要这个功能！ 注意：此功能只在html文件里有效，也只有html里需要这个功能！ 注意：此功能只在html文件里有效，也只有html里需要这个功能！ 注意：此功能只在html文件里有效，也只有html里需要这个功能！ 演示：展开后光标会停留在中间…… 再补充几点：基本就不用怎么手动挪光标了……（基本就可以很少去挪动光标了） 用上面的方法，再增加一个我们学ROR经常用的片段：&quot;a&quot;: &quot;&lt;a href=\\&quot;|\\&quot; &gt;&lt;/a&gt;&quot;,(请用复制粘贴)，这一次放在位置不一样： 插件emmet和编辑器atom均内置注释功能，快捷键均为⌘+/，通常emmet会覆盖掉atom。但atom的更好用点，我们为了想让atom来注释，需要这样做：把emmet的注释功能改掉。 打开这个文件： 按快捷键⌘+⇪+f，输入emmet:toggle-comment进行搜索。得到如图：双击打开这个文件。把cmd-/改掉，可以参考改成cmd-0,或者改成其他没有经常用的快捷键盘也行。 修改快速打开新文件的快捷键盘：参考这篇blog:如何修改Atom自带的快捷键&amp;&amp;使用⌘+E快速打开新文件~ 多用⌘+return,作用：无论你的光标在什么位置，快速在下面切入新的一行。 多用⌘+shift+return,作用：无论光标位置，快速在上方切入新的一行。 多掌握一些emmet的内建功能：比如：(试着自己操作感受下，请用复制粘贴的，输完按tab键，看看展开的结果。) a.dropdown.dropdown-toggle[data-toggle=&quot;dropdown&quot;]#my.dropdown .container&gt;tbody&gt;thead&gt;tr&gt;td*5 更多请看看这个图表：https://docs.emmet.io/cheat-sheet/ 写在后面： 助教和老师都不赞成新手用这种偷懒的方式，新手请一个字一个字的打。李笑来老师甚至不太赞成新手用atom,sublime这种高级的编辑器！ 你也可以用这个方法增加你自己代码段！ 类似的简单粗暴小教程： 利用Heroku搭建自己的梯子，3步实现免费科学上网。 mac上一键离线整个网站的方法（以便断网浏览） Mac上高速下载百度网盘资源的方法（2步） 打code时如何减少手动挪光标的次数&amp;&amp;emmet增加自定义片段的方法。 如何修改Atom自带的快捷键&amp;&amp;使用⌘+E快速打开新文件~ 本文有帮你节约到时间吗？赏几个钢蹦玩玩~😄 **全栈营60天盘点 如何快速在erb中输入&lt;%%&gt;顺便把光标停留在中间**","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"tool-vps-vpn-【转发】利用Heroku搭建自己的梯子，3步实现免费科学上网。","slug":"6 tool-xx工具/tool-vps-vpn-【转发】利用Heroku搭建自己的梯子，3步实现免费科学上网。","date":"2017-11-14T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/715513d9/","link":"","permalink":"http://yoursite.com/posts/715513d9/","excerpt":"","text":"原文by黄鸿亮：http://hongliang.site/2017/10/20/%E5%88%A9%E7%94%A8Heroku%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A2%AF%E5%AD%90%EF%BC%8C3%E6%AD%A5%E5%AE%9E%E7%8E%B0%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E3%80%82/ 利用Heroku搭建自己的梯子，3步实现免费科学上网。123kill -9 $(lsof -i tcp:1080 -t) #占用1080端口的程序会被干掉！cd ~/shadowsocks-over-websocketnode local.js -s vpn999.herokuapp.com -l 1080 -m aes-256-cfb -k Qq112233 -p 80 发表于 2017-10-20 | 分类于 mac | ** 0 Comments 网速如何？请看图！简单粗暴的小教程开始： 下载项目并部署，打开终端机，执行指令： 登录Heroku删app需要等很久？怎么删app最快捷？这样做： 123&gt; $ heroku apps #列出您所有的app&gt; $ heroku apps:destroy appname --confirm appname #两处appname自行替换成您想删的app名，完成。&gt; 1234$ git clone git@github.com:activeliang/shadowsocks-over-websocket.git$ cd shadowsocks-over-websocket$ heroku create$ git push heroku master (注意：指令前的字符$代表这是一条指令，请不要跟着复制) 设置密码并启动： （请自行替代指令中的中文提示）!!! 1234$ heroku config:set METHOD=aes-256-cfb PASSWORD=设置密码 SERVER_ADDRESS=0.0.0.0$ brew install node #这一步是安装nodejs，已安装可跳过。如遇错，请看下文提示。$ npm install$ node local.js -s 第一步中生成的Herokuapp名称.herokuapp.com -l 1080 -m aes-256-cfb -k 设置的密码 -p 80 安装nodejs遇错，怎么办？直接去官网下载安装包 下载安装客户端并配置 点击下载 打开软件，配置密码（前面设置的密码） 进入客户端 Shadowsocks 的 偏好设置： 完成，测试： 打开http://ip111.cn/，如果谷歌网站那一行有出现ip地址，说明科学上网成功。 打开www.google.com试试吧。 搞定。可以自由上网了~ 成功后刷新本教程，你会发现底部有个留言板，欢迎留下您的足迹~ 无法上网？自行排查… (遇错解决后，请底部留言反馈~） 一切正常，打开 Google 时，终端机无log生成，连接失败。 原因：请求没有被扶上梯子。 解法：Shadowsocks客户端 切换 全局模式。再不行的话，写进入 这篇教程 尝试Chrome插件。 最后：成功连接后，建议关闭Chrome插件，Shadowsocks切换回PAC模式。 感谢前人铺好了路：相关教程 进阶教程： 下次如何启用？ 开启终端 service ，执行以下代码： 12cd ~/shadowsocks-over-websocketnode local.js -s 您的herokuapp名称.herokuapp.com -l 1080 -m aes-256-cfb -k 您的密码 -p 80 开启Shadowsocks 。 科学上网期间，终端开启的service不要关闭（control + c可以关闭service）。 遇到启用service 失败，提示端口已占用？先执行： 12&gt; $ kill -9 $(lsof -i tcp:1080 -t) #占用1080端口的程序会被干掉！&gt; 如何停下来？关闭终端service或Shadowsocks。 重要提示： 如果遇到：打开某个链接，很慢，怎么办？ 原因：此请求中有链接被墙。而这个链接没被扶上梯子~ 客户端里有三种模式： PAC自动模式（自动识别,只把被墙的链接扶上梯子！这个好。）列表可以前行偏好设置 &gt; 常规 &gt; GFW List URL 中查看所有被墙的链接。 全局模式 （所有链接扶上梯子） 手动模式 （自定义的扶墙名单：PAC用户自定规则…） 解法：（二选一） 将链接手动增加到 编辑PAC用户自定规则 (扶墙名单) 中 （优先） 开启全局模式 如何做得更好： 开机全自动启用梯子（写个脚本），这样做： 新建一个脚本： 12$ touch ~/开机自启heroku梯子脚本.sh$ chmod +x ~/开机自启heroku梯子脚本.sh #此举进行引用 填入： 12cd ~/shadowsocks-over-websocketnode local.js -s 您的herokuapp名称.herokuapp.com -l 1080 -m aes-256-cfb -k 您的密码 -p 80 设置脚本的的打开方式，选择终端（Iterm留着编程用） 加入登录项：打开 系统偏好设置… &gt; 用户与群组 打开 Shadowsocks客户端 &gt; 偏好设置 &gt; 开机启动 （选中） 完成！下次重开机，全自动开启~！😄 99增加：一、heroku绑定信用卡（免费小时数增加）1、淘宝买heroku虚拟信用卡https://item.taobao.com/item.htm?spm=a1z09.2.0.0.7f3b4477VFLc9s&amp;id=551379781399&amp;_u=e2kcaibbe78，我买了7块钱 2、到heroku官网设置里，绑定信用卡 注意：heroku官网经常被墙，可能要开Shadowsocks的全局模式。 绑定后，每个月免费小时数由700变成1000小时。 二、让heroku不会休眠1、http://kaffeine.herokuapp.com/，到这个网站添加自己的heroku项目网址，就会会每30分钟ping专案一次，让它不会休眠 注意：heroku的设置里可以看到免费小时数的使用情况，如果还有其他项目在使用，可以考虑另开一个账号专门用作科学上网。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"vps","slug":"vps","permalink":"http://yoursite.com/tags/vps/"},{"name":"科学上网","slug":"科学上网","permalink":"http://yoursite.com/tags/科学上网/"},{"name":"heroku","slug":"heroku","permalink":"http://yoursite.com/tags/heroku/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"ror-system-常用gem","slug":"1 ror-system系统/ror-system-常用gem","date":"2017-11-14T16:10:00.000Z","updated":"2018-01-14T05:56:58.000Z","comments":true,"path":"posts/8e9b1ad8/","link":"","permalink":"http://yoursite.com/posts/8e9b1ad8/","excerpt":"","text":"1、gem ‘awesome_rails_console’ Rails c 的代码很乱，可以重新排版 2、gem ‘annotate’ 会在每个模型文件的顶部自动添加和更新注释，这些注释是对当前数据库模式的概述。 3、网站安全 gem ‘rack-attack’ 可以设定当特定 IP 位址就某一段时间内存取太多次的话，自动进行封锁。 12config/application.rb+ config.middleware.use Rack::Attack 123456789101112131415161718192021222324252627282930313233343536 config/initializers/rack-attack.rbclass Rack::Attack throttle(&apos;req/ip&apos;, :limit =&gt; 180, :period =&gt; 1.minutes) do |req| req.ip end ### Prevent Brute-Force Login Attacks ### # The most common brute-force login attack is a brute-force password # attack where an attacker simply tries a large number of emails and # passwords to see if any credentials match. # # Another common method of attack is to use a swarm of computers with # different IPs to try brute-forcing a password for a specific account. # Throttle POST requests to /login by IP address # # Key: &quot;rack::attack:#&#123;Time.now.to_i/:period&#125;:logins/ip:#&#123;req.ip&#125;&quot; throttle(&apos;logins/ip&apos;, :limit =&gt; 5, :period =&gt; 20.seconds) do |req| if req.path == &apos;/users/sign_in&apos; &amp;&amp; req.post? req.ip end end # Throttle POST requests to /login by email param # # Key: &quot;rack::attack:#&#123;Time.now.to_i/:period&#125;:logins/email:#&#123;req.email&#125;&quot; # # Note: This creates a problem where a malicious user could intentionally # throttle logins for another user and force their login requests to be # denied, but that&apos;s not very common and shouldn&apos;t happen to you. (Knock # on wood!) throttle(&quot;logins/email&quot;, :limit =&gt; 5, :period =&gt; 20.seconds) do |req| if req.path == &apos;/users/sign_in&apos; &amp;&amp; req.post? # return the email if present, nil otherwise req.params[&apos;email&apos;].presence end endend 重启服务器。以上设定包括： 1、一分钟内，一个 IP 位址只能存取 180 次 2、针对 /users/sign_in 这个登入网址，20 秒内只能尝试登入 5 次 3、针对 /users/sign_in 这个网址，同一 email 在 20 秒内只能尝试登入 5 次 ​ 4、网站安全 gem ‘brakeman’ brakeman 是一个 Rails 的工具可以分析代码，找出可能有漏洞的地方。 执行 brakeman，就会分析你的代码，列出”可能”有漏洞的地方：brakeman 报表结果仅供参考，不表示必然有漏洞。需要一条一条实际检查看看。 5、网站安全 gem ‘bundler-audit’ 安装 gem &#39;bundler-audit&#39; 检测套件，执行 bundle-audit检查已装gem是否有安全漏洞需要升级。bundle update 套件名称 就可以进行升级。 6、gem ‘bootstrap-sass’ 7、gem ‘devise’ 8、gem ‘simple_form’ 9、gem ‘font-awesome-rails’ gem ‘carrierwave’gem ‘mini_magick’ gem ‘letter_opener’, group: :development gem ‘aasm’","categories":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}],"tags":[{"name":"常用","slug":"常用","permalink":"http://yoursite.com/tags/常用/"},{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/tags/ror系统/"}],"keywords":[{"name":"ror系统","slug":"ror系统","permalink":"http://yoursite.com/categories/ror系统/"}]},{"title":"bug-亚马逊awe_ec2 Swap file \"/etc/shadowsocks/.config.json.swp\" already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q","slug":"2 ror-tips:bug知识点/bug-亚马逊awe_ec2 Swap file \":etc:shadowsocks:.config.json.swp\" already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q","date":"2017-11-14T03:00:00.000Z","updated":"2018-01-14T02:18:50.000Z","comments":true,"path":"posts/723a2ffb/","link":"","permalink":"http://yoursite.com/posts/723a2ffb/","excerpt":"","text":"亚马逊的AWS不能SSH登录了怎么办？ 【bug】Swap file “/etc/shadowsocks/.config.json.swp” already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (QLinux下编程难免会开启多次vim编辑， 同一个文件如果在上一次编辑时未进行保存，则在下一次想要进行编辑时就会出现： swap file “*.swp” already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort: 原因： 使用vim编辑文件实际是先copy一份临时文件并映射到内存给你编辑， 编辑的是临时文件， 当执行：w后才保存临时文件到原文件，执行：q后才删除临时文件。 每次启动编辑时都会检索这个文件是否已经存在临时文件， 有则询问如何处理，就会出现如上情景。 解决方法（删除这个临时文件即可）： rm *.swp linux用VI编辑后保存退出命令是什么啊？按esc，再按住shift再按两下’z‘键。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-rails g controller xx --no-assets与rails g controller xx有什么区别？","slug":"2 ror-tips:bug知识点/ror-tips-rails g controller xx --no-assets与rails g controller xx有什么区别？","date":"2017-11-12T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/4f7cb584/","link":"","permalink":"http://yoursite.com/posts/4f7cb584/","excerpt":"","text":"1）rails g controller xx --no-assets与平时的rails g controller xx有什么区别？ 从执行结果可以看出，区别在于前者不会产生asset文件，即相关的css和js文件。 12345invoke assetsinvoke coffeecreate app/assets/javascripts/XXX.coffeeinvoke scsscreate app/assets/stylesheets/XXX.scss","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-git init要怎么删除？","slug":"2 ror-tips:bug知识点/ror-tips-git init要怎么删除？","date":"2017-11-11T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/e2bb6abf/","link":"","permalink":"http://yoursite.com/posts/e2bb6abf/","excerpt":"","text":"12-rf .git #添加r参数，指定删除目录","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-正则表达式是什么？","slug":"2 ror-tips:bug知识点/ror-tips-正则表达式是什么？","date":"2017-11-11T16:10:00.000Z","updated":"2018-01-26T15:47:52.000Z","comments":true,"path":"posts/5a1b531/","link":"","permalink":"http://yoursite.com/posts/5a1b531/","excerpt":"","text":"正则表达式 - 语法http://www.runoob.com/regexp/regexp-syntax.html 正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。 例如： runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。 runoob，可以匹配 runob、runoob、runoooooob 等， 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。 colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。 正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-DOM是什么？","slug":"2 ror-tips:bug知识点/ror-tips-DOM是什么？","date":"2017-11-11T16:10:00.000Z","updated":"2018-01-14T04:55:31.000Z","comments":true,"path":"posts/e5ed4b1c/","link":"","permalink":"http://yoursite.com/posts/e5ed4b1c/","excerpt":"","text":"DOM全称是document object model(文档对象模型)，DOM是用来干什么的呢？假设把你的文档看成一个单独的对象，DOM就是如何用HTML或者XML对这个对象进行操作和控制的标准。","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"ror-tips-哈希算法是什么？","slug":"2 ror-tips:bug知识点/ror-tips-哈希算法是什么？","date":"2017-11-11T16:10:00.000Z","updated":"2018-01-14T10:25:45.000Z","comments":true,"path":"posts/e58e8282/","link":"","permalink":"http://yoursite.com/posts/e58e8282/","excerpt":"","text":"哈希算法，将任意长度的二进制值映射为固定长度的较小二进制值,这个小的二进制值称为哈希值。 ​","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/tags/ror知识点/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-自动化测试1-3  gem_rspec-rails报错nomethoderror/ undefined method 'this' for","slug":"2 ror-tips:bug知识点/bug-自动化测试1-3  gem_rspec-rails报错nomethoderror: undefined method 'this' for","date":"2017-11-05T01:00:00.000Z","updated":"2018-01-14T02:19:02.000Z","comments":true,"path":"posts/9178391d/","link":"","permalink":"http://yoursite.com/posts/9178391d/","excerpt":"","text":"1、执行rspec leap_year_spec.rb报错如下： 2、google搜索gem rspec找到两个github，一个是rspec/rspec（这个跟教材一样），一个是rspec/rspec-rails。用第二个，找到gem &#39;rspec-rails&#39;，在gemfile文件中安装，然后bundle。 3、再测试rspec leap_year_spec.rb，搞定如下：","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"bug-seed档测试 ActiveRecord--StatementInvalid in Devise--SessionsController#create","slug":"2 ror-tips:bug知识点/bug-seed档测试 ActiveRecord--StatementInvalid in Devise--SessionsController#create","date":"2017-11-04T21:30:00.000Z","updated":"2018-01-14T02:19:11.000Z","comments":true,"path":"posts/852d9f92/","link":"","permalink":"http://yoursite.com/posts/852d9f92/","excerpt":"","text":"jdstore4-3，做seed档后，测试报错ActiveRecord::StatementInvalid in Devise::SessionsController#createSQLite3::ReadOnlyException: attempt to write a readonly database: UPDATE “users” SET “current_sign_in_at” = ?, “last_sign_in_at” = ?, “sign_in_count” = ?, “updated_at” = ? WHERE “users”.”id” = ?def each loop do val = step break self if done? yield val end 原因seed档里u.is_admin = true错写成u.is_admin 修改后，rake db:drop、 rake db:migrate、 rake db:seed","categories":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"}],"keywords":[{"name":"ror知识点","slug":"ror知识点","permalink":"http://yoursite.com/categories/ror知识点/"}]},{"title":"www-interview-(视频）背景不匹配，怎么写简历？","slug":"7 www-xx心得/www-interview-(视频）背景不匹配，怎么写简历？","date":"2017-11-01T16:10:00.000Z","updated":"2018-01-14T05:52:02.000Z","comments":true,"path":"posts/26fa074a/","link":"","permalink":"http://yoursite.com/posts/26fa074a/","excerpt":"","text":"一、背景不够匹配，怎么写简历？概率事件：9000份简历，面试120，实习14，全职8，也就是说简历到面试的概率是1.3%、面试到实习概率11.7%、实习到全职概率57.1%。其中简历的关卡难度最大。 1、找工作的唯一目的是什么？1）拿Offer。你做的任何一件不是为了拿Offer的事情都是在浪费时间、降低效率、在跟自己作对。 2）不要暴露任何减分项：教育背景不好、工作背景不好、年龄大、身高矮、颜值低、已离职、培训班出身。 在简历上在面试上不要谦虚，做100至少要说到110。 3）淡化培训班、两个月、线上。“先自己自学编程，后来为了自己更好的学习，去报了一个压力强度很大的训练营，每天要做10个小时，做了两个已经上线的项目，都是小组协作，我主要负责前端，链接是xx，比赛中参赛者400拿了前3名。” 2、脑中记住这个问题：我可以给对方带来什么价值？1）简历不匹配？要根据简历要求恶补知识。 2）简历内容常见问题：①内容不够详细、②不说结果 公司不要你绝对不是因为年龄，而是你的技能跟公司的要求不匹配。你前几次面试，一定会初一堆错误、遇到一堆的问题。 推荐电影《实习生》，学习如何在自己的技能不能跟上互联网脚步，却还能找到自己应该融入公司的点。 表达能力？①把面试最经常问道的问题列出来，写答案，在你面试十次之前你是不具备这样的技能的，你是没法说出自己有多适合这家公司、背景多牛逼；②对着镜子练，要成为一个擅长说自己的人；③实战是最好的学习，你即便是去实战然后被干掉都ok；④肢体语言，切菜＋画圆对外的东西往外画自己的东西往内画；对方对你说话、自己跟对方说话，你要看着对方的眼睛，不要到处飘（感觉不认真听不自信）；","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"interview","slug":"interview","permalink":"http://yoursite.com/tags/interview/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]},{"title":"www-orid-day-大脑工作原理的书：《learning how to learn》、《为什么孩子不喜欢读书》","slug":"7 www-xx心得/www-orid-day-大脑工作原理的书：《learning how to learn》、《为什么孩子不喜欢读书》","date":"2017-08-31T16:10:00.000Z","updated":"2018-01-15T04:52:26.000Z","comments":true,"path":"posts/c0e8cc53/","link":"","permalink":"http://yoursite.com/posts/c0e8cc53/","excerpt":"","text":"大脑工作原理的书：《learning how to learn》、《为什么孩子不喜欢读书》 孩子讨厌上学，你在逼他的事情让他找不到成就感，人最重要的是自我价值，在游戏中才能找到自我价值，于是游戏变成了人生。","categories":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"},{"name":"orid-day","slug":"orid-day","permalink":"http://yoursite.com/tags/orid-day/"}],"keywords":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/categories/心得/"}]}]}